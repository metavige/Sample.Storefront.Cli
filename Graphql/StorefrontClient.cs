// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace Storefront.Cli
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static Type GetElementType(Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, Type targetType, Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(Type targetContainerType, Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string BuildArgumentValue(object value, string formatMask, Formatting formatting, int level, byte indentationSize)
        {
            if (value is null)
                return "null";
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null: return "null";
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        return BuildArgumentValue(jValue.Value, null, formatting, level, indentationSize);
                    case JTokenType.String:
                        return "\"" + ((string)jValue.Value).Replace("\"", "\\\"") + "\"";
                    default:
                        return "\"" + jValue.Value + "\"";
                }
            }
    
            if (value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, formatting, level, indentationSize)}";
            }
    
            if (value is JObject jObject)
                return BuildEnumerableArgument(jObject, null, formatting, level + 1, indentationSize, '{', '}');
    #endif
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return "\"" + dateTime.ToString("O") + "\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return "\"" + dateTimeOffset.ToString("O") + "\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, formatting, level + 2, indentationSize);
    
            if (value is Guid)
                return "\"" + value + "\"";
    
            if (value is String @string)
                return "\"" + @string.Replace("\"", "\\\"") + "\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, formatting, level, indentationSize, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return "\"" + argumentValue + "\"";
        }
    
        private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, indentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, formatting, level, indentationSize));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? "$" + queryBuilderParameter.Name
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, formatting, level, indentationSize);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, indentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, Formatting formatting, int level, byte indentationSize)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, formatting, level, indentationSize));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
                if (enumMember == null)
                    throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => base.Value == null ? default : (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName) : base(name, graphQlTypeName, null)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public void ResetValue() => base.Value = null;
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    
        private static void EnsureGraphQlTypeName(string graphQlTypeName)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName = null)
            : base(name, graphQlTypeName ?? GetGraphQlTypeName(typeof(T)))
        {
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T defaultValue)
            : base(name, graphQlTypeName, defaultValue)
        {
        }
    
        public GraphQlQueryParameter(string name, T defaultValue, bool isNullable = true)
            : base(name, GetGraphQlTypeName(typeof(T), isNullable), defaultValue)
        {
        }
    
        private static string GetGraphQlTypeName(Type valueType, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(valueType);
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(string))
                return "String";
    
            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }
    
        private static string GetValueTypeGraphQlTypeName(Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(formatting, 1, indentationSize);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields);
        }
    
        protected virtual string Build(Formatting formatting, int level, byte indentationSize)
        {
            var isIndentedFormatting = formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            if (!String.IsNullOrEmpty(_operationType))
            {
                builder.Append(_operationType);
    
                if (!String.IsNullOrEmpty(_operationName))
                {
                    builder.Append(" ");
                    builder.Append(_operationName);
                }
    
                if (_queryParameters?.Count > 0)
                {
                    builder.Append(indentationSpace);
                    builder.Append("(");
    
                    foreach (var queryParameterInfo in _queryParameters)
                    {
                        if (isIndentedFormatting)
                        {
                            builder.AppendLine(separator);
                            builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));
                        }
                        else
                            builder.Append(separator);
                        
                        builder.Append("$");
                        builder.Append(queryParameterInfo.ArgumentValue.Name);
                        builder.Append(":");
                        builder.Append(indentationSpace);
    
                        builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                        if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!") && queryParameterInfo.ArgumentValue.Value is not null)
                        {
                            builder.Append(indentationSpace);
                            builder.Append("=");
                            builder.Append(indentationSpace);
                            builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, formatting, 0, indentationSize));
                        }
    
                        separator = ",";
                    }
    
                    builder.Append(")");
                }
            }
    
            builder.Append(indentationSpace);
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
            
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(formatting, level, indentationSize);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));
            
            builder.Append("}");
    
            return builder.ToString();
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }
    
        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();
    
                    if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;
    
                    parentTypes?.Add(builderType);
    
                    var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });
    
                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
            
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(Formatting formatting, int level, byte indentationSize);
    
            protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
            {
                var separator = formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, formatting, level, indentationSize) : "$" + a.ArgumentValue.Name)}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(Formatting formatting, int level, byte indentationSize) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, formatting, level, indentationSize)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                GetIndentation(formatting, level, indentationSize) +
                BuildAliasPrefix(Alias, formatting) +
                FieldName +
                BuildArgumentClause(formatting, level, indentationSize) +
                BuildDirectiveClause(formatting, level, indentationSize);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(Alias, formatting) + FieldName +
                      BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(formatting, level, indentationSize) + "..." + (formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize);
        }
    }
    
    public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }
    
    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }
    
    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string Color = "Color";
        public const string DateTime = "DateTime";
        public const string Decimal = "Decimal";
        public const string Float = "Float";
        public const string Html = "HTML";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string Json = "JSON";
        public const string String = "String";
        public const string UnsignedInt64 = "UnsignedInt64";
        public const string Url = "URL";

        public const string ArticleSortKeys = "ArticleSortKeys";
        public const string BlogSortKeys = "BlogSortKeys";
        public const string CardBrand = "CardBrand";
        public const string CartErrorCode = "CartErrorCode";
        public const string CheckoutErrorCode = "CheckoutErrorCode";
        public const string CollectionSortKeys = "CollectionSortKeys";
        public const string CountryCode = "CountryCode";
        public const string CropRegion = "CropRegion";
        public const string CurrencyCode = "CurrencyCode";
        public const string CustomerErrorCode = "CustomerErrorCode";
        public const string DeliveryMethodType = "DeliveryMethodType";
        public const string DigitalWallet = "DigitalWallet";
        public const string DiscountApplicationAllocationMethod = "DiscountApplicationAllocationMethod";
        public const string DiscountApplicationTargetSelection = "DiscountApplicationTargetSelection";
        public const string DiscountApplicationTargetType = "DiscountApplicationTargetType";
        public const string FilterType = "FilterType";
        public const string ImageContentType = "ImageContentType";
        public const string LanguageCode = "LanguageCode";
        public const string LocationSortKeys = "LocationSortKeys";
        public const string MediaContentType = "MediaContentType";
        public const string MediaHost = "MediaHost";
        public const string MenuItemType = "MenuItemType";
        public const string OrderCancelReason = "OrderCancelReason";
        public const string OrderFinancialStatus = "OrderFinancialStatus";
        public const string OrderFulfillmentStatus = "OrderFulfillmentStatus";
        public const string OrderSortKeys = "OrderSortKeys";
        public const string PageSortKeys = "PageSortKeys";
        public const string PaymentTokenType = "PaymentTokenType";
        public const string ProductCollectionSortKeys = "ProductCollectionSortKeys";
        public const string ProductImageSortKeys = "ProductImageSortKeys";
        public const string ProductMediaSortKeys = "ProductMediaSortKeys";
        public const string ProductSortKeys = "ProductSortKeys";
        public const string ProductVariantSortKeys = "ProductVariantSortKeys";
        public const string SellingPlanCheckoutChargeType = "SellingPlanCheckoutChargeType";
        public const string TransactionKind = "TransactionKind";
        public const string TransactionStatus = "TransactionStatus";
        public const string UnitPriceMeasurementMeasuredType = "UnitPriceMeasurementMeasuredType";
        public const string UnitPriceMeasurementMeasuredUnit = "UnitPriceMeasurementMeasuredUnit";
        public const string UnitSystem = "UnitSystem";
        public const string WeightUnit = "WeightUnit";

        public const string ApiVersion = "ApiVersion";
        public const string AppliedGiftCard = "AppliedGiftCard";
        public const string Article = "Article";
        public const string ArticleAuthor = "ArticleAuthor";
        public const string ArticleConnection = "ArticleConnection";
        public const string ArticleEdge = "ArticleEdge";
        public const string Attribute = "Attribute";
        public const string AutomaticDiscountApplication = "AutomaticDiscountApplication";
        public const string AvailableShippingRates = "AvailableShippingRates";
        public const string Blog = "Blog";
        public const string BlogConnection = "BlogConnection";
        public const string BlogEdge = "BlogEdge";
        public const string Brand = "Brand";
        public const string BrandColorGroup = "BrandColorGroup";
        public const string BrandColors = "BrandColors";
        public const string Cart = "Cart";
        public const string CartAttributesUpdatePayload = "CartAttributesUpdatePayload";
        public const string CartAutomaticDiscountAllocation = "CartAutomaticDiscountAllocation";
        public const string CartBuyerIdentity = "CartBuyerIdentity";
        public const string CartBuyerIdentityUpdatePayload = "CartBuyerIdentityUpdatePayload";
        public const string CartCodeDiscountAllocation = "CartCodeDiscountAllocation";
        public const string CartCost = "CartCost";
        public const string CartCreatePayload = "CartCreatePayload";
        public const string CartCustomDiscountAllocation = "CartCustomDiscountAllocation";
        public const string CartDeliveryGroup = "CartDeliveryGroup";
        public const string CartDeliveryGroupConnection = "CartDeliveryGroupConnection";
        public const string CartDeliveryGroupEdge = "CartDeliveryGroupEdge";
        public const string CartDeliveryOption = "CartDeliveryOption";
        public const string CartDiscountCode = "CartDiscountCode";
        public const string CartDiscountCodesUpdatePayload = "CartDiscountCodesUpdatePayload";
        public const string CartEstimatedCost = "CartEstimatedCost";
        public const string CartLine = "CartLine";
        public const string CartLineConnection = "CartLineConnection";
        public const string CartLineCost = "CartLineCost";
        public const string CartLineEdge = "CartLineEdge";
        public const string CartLineEstimatedCost = "CartLineEstimatedCost";
        public const string CartLinesAddPayload = "CartLinesAddPayload";
        public const string CartLinesRemovePayload = "CartLinesRemovePayload";
        public const string CartLinesUpdatePayload = "CartLinesUpdatePayload";
        public const string CartNoteUpdatePayload = "CartNoteUpdatePayload";
        public const string CartSelectedDeliveryOptionsUpdatePayload = "CartSelectedDeliveryOptionsUpdatePayload";
        public const string CartUserError = "CartUserError";
        public const string Checkout = "Checkout";
        public const string CheckoutAttributesUpdateV2Payload = "CheckoutAttributesUpdateV2Payload";
        public const string CheckoutBuyerIdentity = "CheckoutBuyerIdentity";
        public const string CheckoutCompleteFreePayload = "CheckoutCompleteFreePayload";
        public const string CheckoutCompleteWithCreditCardV2Payload = "CheckoutCompleteWithCreditCardV2Payload";
        public const string CheckoutCompleteWithTokenizedPaymentV3Payload = "CheckoutCompleteWithTokenizedPaymentV3Payload";
        public const string CheckoutCreatePayload = "CheckoutCreatePayload";
        public const string CheckoutCustomerAssociateV2Payload = "CheckoutCustomerAssociateV2Payload";
        public const string CheckoutCustomerDisassociateV2Payload = "CheckoutCustomerDisassociateV2Payload";
        public const string CheckoutDiscountCodeApplyV2Payload = "CheckoutDiscountCodeApplyV2Payload";
        public const string CheckoutDiscountCodeRemovePayload = "CheckoutDiscountCodeRemovePayload";
        public const string CheckoutEmailUpdateV2Payload = "CheckoutEmailUpdateV2Payload";
        public const string CheckoutGiftCardRemoveV2Payload = "CheckoutGiftCardRemoveV2Payload";
        public const string CheckoutGiftCardsAppendPayload = "CheckoutGiftCardsAppendPayload";
        public const string CheckoutLineItem = "CheckoutLineItem";
        public const string CheckoutLineItemConnection = "CheckoutLineItemConnection";
        public const string CheckoutLineItemEdge = "CheckoutLineItemEdge";
        public const string CheckoutLineItemsAddPayload = "CheckoutLineItemsAddPayload";
        public const string CheckoutLineItemsRemovePayload = "CheckoutLineItemsRemovePayload";
        public const string CheckoutLineItemsReplacePayload = "CheckoutLineItemsReplacePayload";
        public const string CheckoutLineItemsUpdatePayload = "CheckoutLineItemsUpdatePayload";
        public const string CheckoutShippingAddressUpdateV2Payload = "CheckoutShippingAddressUpdateV2Payload";
        public const string CheckoutShippingLineUpdatePayload = "CheckoutShippingLineUpdatePayload";
        public const string CheckoutUserError = "CheckoutUserError";
        public const string Collection = "Collection";
        public const string CollectionConnection = "CollectionConnection";
        public const string CollectionEdge = "CollectionEdge";
        public const string Comment = "Comment";
        public const string CommentAuthor = "CommentAuthor";
        public const string CommentConnection = "CommentConnection";
        public const string CommentEdge = "CommentEdge";
        public const string Country = "Country";
        public const string CreditCard = "CreditCard";
        public const string Currency = "Currency";
        public const string Customer = "Customer";
        public const string CustomerAccessToken = "CustomerAccessToken";
        public const string CustomerAccessTokenCreatePayload = "CustomerAccessTokenCreatePayload";
        public const string CustomerAccessTokenCreateWithMultipassPayload = "CustomerAccessTokenCreateWithMultipassPayload";
        public const string CustomerAccessTokenDeletePayload = "CustomerAccessTokenDeletePayload";
        public const string CustomerAccessTokenRenewPayload = "CustomerAccessTokenRenewPayload";
        public const string CustomerActivateByUrlPayload = "CustomerActivateByUrlPayload";
        public const string CustomerActivatePayload = "CustomerActivatePayload";
        public const string CustomerAddressCreatePayload = "CustomerAddressCreatePayload";
        public const string CustomerAddressDeletePayload = "CustomerAddressDeletePayload";
        public const string CustomerAddressUpdatePayload = "CustomerAddressUpdatePayload";
        public const string CustomerCreatePayload = "CustomerCreatePayload";
        public const string CustomerDefaultAddressUpdatePayload = "CustomerDefaultAddressUpdatePayload";
        public const string CustomerRecoverPayload = "CustomerRecoverPayload";
        public const string CustomerResetByUrlPayload = "CustomerResetByUrlPayload";
        public const string CustomerResetPayload = "CustomerResetPayload";
        public const string CustomerUpdatePayload = "CustomerUpdatePayload";
        public const string CustomerUserError = "CustomerUserError";
        public const string DiscountAllocation = "DiscountAllocation";
        public const string DiscountApplicationConnection = "DiscountApplicationConnection";
        public const string DiscountApplicationEdge = "DiscountApplicationEdge";
        public const string DiscountCodeApplication = "DiscountCodeApplication";
        public const string Domain = "Domain";
        public const string ExternalVideo = "ExternalVideo";
        public const string Filter = "Filter";
        public const string FilterValue = "FilterValue";
        public const string Fulfillment = "Fulfillment";
        public const string FulfillmentLineItem = "FulfillmentLineItem";
        public const string FulfillmentLineItemConnection = "FulfillmentLineItemConnection";
        public const string FulfillmentLineItemEdge = "FulfillmentLineItemEdge";
        public const string FulfillmentTrackingInfo = "FulfillmentTrackingInfo";
        public const string GenericFile = "GenericFile";
        public const string Image = "Image";
        public const string ImageConnection = "ImageConnection";
        public const string ImageEdge = "ImageEdge";
        public const string Language = "Language";
        public const string Localization = "Localization";
        public const string Location = "Location";
        public const string LocationAddress = "LocationAddress";
        public const string LocationConnection = "LocationConnection";
        public const string LocationEdge = "LocationEdge";
        public const string MailingAddress = "MailingAddress";
        public const string MailingAddressConnection = "MailingAddressConnection";
        public const string MailingAddressEdge = "MailingAddressEdge";
        public const string ManualDiscountApplication = "ManualDiscountApplication";
        public const string MediaConnection = "MediaConnection";
        public const string MediaEdge = "MediaEdge";
        public const string MediaImage = "MediaImage";
        public const string Menu = "Menu";
        public const string MenuItem = "MenuItem";
        public const string Metafield = "Metafield";
        public const string MetafieldReferenceConnection = "MetafieldReferenceConnection";
        public const string MetafieldReferenceEdge = "MetafieldReferenceEdge";
        public const string Model3D = "Model3d";
        public const string Model3DSource = "Model3dSource";
        public const string MoneyV2 = "MoneyV2";
        public const string Mutation = "Mutation";
        public const string Order = "Order";
        public const string OrderConnection = "OrderConnection";
        public const string OrderEdge = "OrderEdge";
        public const string OrderLineItem = "OrderLineItem";
        public const string OrderLineItemConnection = "OrderLineItemConnection";
        public const string OrderLineItemEdge = "OrderLineItemEdge";
        public const string Page = "Page";
        public const string PageConnection = "PageConnection";
        public const string PageEdge = "PageEdge";
        public const string PageInfo = "PageInfo";
        public const string Payment = "Payment";
        public const string PaymentSettings = "PaymentSettings";
        public const string PricingPercentageValue = "PricingPercentageValue";
        public const string Product = "Product";
        public const string ProductConnection = "ProductConnection";
        public const string ProductEdge = "ProductEdge";
        public const string ProductOption = "ProductOption";
        public const string ProductPriceRange = "ProductPriceRange";
        public const string ProductVariant = "ProductVariant";
        public const string ProductVariantConnection = "ProductVariantConnection";
        public const string ProductVariantEdge = "ProductVariantEdge";
        public const string QueryRoot = "QueryRoot";
        public const string ScriptDiscountApplication = "ScriptDiscountApplication";
        public const string SelectedOption = "SelectedOption";
        public const string SellingPlan = "SellingPlan";
        public const string SellingPlanAllocation = "SellingPlanAllocation";
        public const string SellingPlanAllocationConnection = "SellingPlanAllocationConnection";
        public const string SellingPlanAllocationEdge = "SellingPlanAllocationEdge";
        public const string SellingPlanAllocationPriceAdjustment = "SellingPlanAllocationPriceAdjustment";
        public const string SellingPlanCheckoutCharge = "SellingPlanCheckoutCharge";
        public const string SellingPlanCheckoutChargePercentageValue = "SellingPlanCheckoutChargePercentageValue";
        public const string SellingPlanConnection = "SellingPlanConnection";
        public const string SellingPlanEdge = "SellingPlanEdge";
        public const string SellingPlanFixedAmountPriceAdjustment = "SellingPlanFixedAmountPriceAdjustment";
        public const string SellingPlanFixedPriceAdjustment = "SellingPlanFixedPriceAdjustment";
        public const string SellingPlanGroup = "SellingPlanGroup";
        public const string SellingPlanGroupConnection = "SellingPlanGroupConnection";
        public const string SellingPlanGroupEdge = "SellingPlanGroupEdge";
        public const string SellingPlanGroupOption = "SellingPlanGroupOption";
        public const string SellingPlanOption = "SellingPlanOption";
        public const string SellingPlanPercentagePriceAdjustment = "SellingPlanPercentagePriceAdjustment";
        public const string SellingPlanPriceAdjustment = "SellingPlanPriceAdjustment";
        public const string Seo = "SEO";
        public const string ShippingRate = "ShippingRate";
        public const string Shop = "Shop";
        public const string ShopPolicy = "ShopPolicy";
        public const string ShopPolicyWithDefault = "ShopPolicyWithDefault";
        public const string StoreAvailability = "StoreAvailability";
        public const string StoreAvailabilityConnection = "StoreAvailabilityConnection";
        public const string StoreAvailabilityEdge = "StoreAvailabilityEdge";
        public const string StringConnection = "StringConnection";
        public const string StringEdge = "StringEdge";
        public const string Transaction = "Transaction";
        public const string UnitPriceMeasurement = "UnitPriceMeasurement";
        public const string UrlRedirect = "UrlRedirect";
        public const string UrlRedirectConnection = "UrlRedirectConnection";
        public const string UrlRedirectEdge = "UrlRedirectEdge";
        public const string UserError = "UserError";
        public const string Video = "Video";
        public const string VideoSource = "VideoSource";

        public const string AttributeInput = "AttributeInput";
        public const string CartBuyerIdentityInput = "CartBuyerIdentityInput";
        public const string CartInput = "CartInput";
        public const string CartLineInput = "CartLineInput";
        public const string CartLineUpdateInput = "CartLineUpdateInput";
        public const string CartSelectedDeliveryOptionInput = "CartSelectedDeliveryOptionInput";
        public const string CheckoutAttributesUpdateV2Input = "CheckoutAttributesUpdateV2Input";
        public const string CheckoutBuyerIdentityInput = "CheckoutBuyerIdentityInput";
        public const string CheckoutCreateInput = "CheckoutCreateInput";
        public const string CheckoutLineItemInput = "CheckoutLineItemInput";
        public const string CheckoutLineItemUpdateInput = "CheckoutLineItemUpdateInput";
        public const string CreditCardPaymentInputV2 = "CreditCardPaymentInputV2";
        public const string CustomerAccessTokenCreateInput = "CustomerAccessTokenCreateInput";
        public const string CustomerActivateInput = "CustomerActivateInput";
        public const string CustomerCreateInput = "CustomerCreateInput";
        public const string CustomerResetInput = "CustomerResetInput";
        public const string CustomerUpdateInput = "CustomerUpdateInput";
        public const string DeliveryAddressInput = "DeliveryAddressInput";
        public const string GeoCoordinateInput = "GeoCoordinateInput";
        public const string HasMetafieldsIdentifier = "HasMetafieldsIdentifier";
        public const string ImageTransformInput = "ImageTransformInput";
        public const string MailingAddressInput = "MailingAddressInput";
        public const string MetafieldFilter = "MetafieldFilter";
        public const string MoneyInput = "MoneyInput";
        public const string PriceRangeFilter = "PriceRangeFilter";
        public const string ProductFilter = "ProductFilter";
        public const string SelectedOptionInput = "SelectedOptionInput";
        public const string TokenizedPaymentInputV3 = "TokenizedPaymentInputV3";
        public const string VariantOptionFilter = "VariantOptionFilter";

        public const string DeliveryAddress = "DeliveryAddress";
        public const string Merchandise = "Merchandise";
        public const string MetafieldParentResource = "MetafieldParentResource";
        public const string MetafieldReference = "MetafieldReference";
        public const string PricingValue = "PricingValue";
        public const string SellingPlanCheckoutChargeValue = "SellingPlanCheckoutChargeValue";
        public const string SellingPlanPriceAdjustmentValue = "SellingPlanPriceAdjustmentValue";

        public const string CartDiscountAllocation = "CartDiscountAllocation";
        public const string DiscountApplication = "DiscountApplication";
        public const string DisplayableError = "DisplayableError";
        public const string HasMetafields = "HasMetafields";
        public const string Media = "Media";
        public const string Node = "Node";
        public const string OnlineStorePublishable = "OnlineStorePublishable";

        public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
            new Dictionary<Type, string>
            {
                { typeof(string), "String" },
                { typeof(bool), "Boolean" },
                { typeof(Guid), "ID" },
                { typeof(DateTimeOffset), "DateTime" },
                { typeof(int), "Int" },
                { typeof(decimal), "Float" },
                { typeof(AttributeInput), "AttributeInput" },
                { typeof(CartBuyerIdentityInput), "CartBuyerIdentityInput" },
                { typeof(CartInput), "CartInput" },
                { typeof(CartLineInput), "CartLineInput" },
                { typeof(CartLineUpdateInput), "CartLineUpdateInput" },
                { typeof(CartSelectedDeliveryOptionInput), "CartSelectedDeliveryOptionInput" },
                { typeof(CheckoutAttributesUpdateV2Input), "CheckoutAttributesUpdateV2Input" },
                { typeof(CheckoutBuyerIdentityInput), "CheckoutBuyerIdentityInput" },
                { typeof(CheckoutCreateInput), "CheckoutCreateInput" },
                { typeof(CheckoutLineItemInput), "CheckoutLineItemInput" },
                { typeof(CheckoutLineItemUpdateInput), "CheckoutLineItemUpdateInput" },
                { typeof(CreditCardPaymentInputV2), "CreditCardPaymentInputV2" },
                { typeof(CustomerAccessTokenCreateInput), "CustomerAccessTokenCreateInput" },
                { typeof(CustomerActivateInput), "CustomerActivateInput" },
                { typeof(CustomerCreateInput), "CustomerCreateInput" },
                { typeof(CustomerResetInput), "CustomerResetInput" },
                { typeof(CustomerUpdateInput), "CustomerUpdateInput" },
                { typeof(DeliveryAddressInput), "DeliveryAddressInput" },
                { typeof(GeoCoordinateInput), "GeoCoordinateInput" },
                { typeof(HasMetafieldsIdentifier), "HasMetafieldsIdentifier" },
                { typeof(ImageTransformInput), "ImageTransformInput" },
                { typeof(MailingAddressInput), "MailingAddressInput" },
                { typeof(MetafieldFilter), "MetafieldFilter" },
                { typeof(MoneyInput), "MoneyInput" },
                { typeof(PriceRangeFilter), "PriceRangeFilter" },
                { typeof(ProductFilter), "ProductFilter" },
                { typeof(SelectedOptionInput), "SelectedOptionInput" },
                { typeof(TokenizedPaymentInputV3), "TokenizedPaymentInputV3" },
                { typeof(VariantOptionFilter), "VariantOptionFilter" }
            };
}
    #endregion

    #region enums
    public enum ArticleSortKeys
    {
        [EnumMember(Value = "TITLE")] Title,
        [EnumMember(Value = "BLOG_TITLE")] BlogTitle,
        [EnumMember(Value = "AUTHOR")] Author,
        [EnumMember(Value = "UPDATED_AT")] UpdatedAt,
        [EnumMember(Value = "PUBLISHED_AT")] PublishedAt,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum BlogSortKeys
    {
        [EnumMember(Value = "HANDLE")] Handle,
        [EnumMember(Value = "TITLE")] Title,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum CardBrand
    {
        [EnumMember(Value = "VISA")] Visa,
        [EnumMember(Value = "MASTERCARD")] Mastercard,
        [EnumMember(Value = "DISCOVER")] Discover,
        [EnumMember(Value = "AMERICAN_EXPRESS")] AmericanExpress,
        [EnumMember(Value = "DINERS_CLUB")] DinersClub,
        [EnumMember(Value = "JCB")] Jcb
    }

    public enum CartErrorCode
    {
        [EnumMember(Value = "INVALID")] Invalid,
        [EnumMember(Value = "LESS_THAN")] LessThan,
        [EnumMember(Value = "INVALID_MERCHANDISE_LINE")] InvalidMerchandiseLine,
        [EnumMember(Value = "MISSING_DISCOUNT_CODE")] MissingDiscountCode,
        [EnumMember(Value = "MISSING_NOTE")] MissingNote
    }

    public enum CheckoutErrorCode
    {
        [EnumMember(Value = "BLANK")] Blank,
        [EnumMember(Value = "INVALID")] Invalid,
        [EnumMember(Value = "TOO_LONG")] TooLong,
        [EnumMember(Value = "PRESENT")] Present,
        [EnumMember(Value = "LESS_THAN")] LessThan,
        [EnumMember(Value = "GREATER_THAN_OR_EQUAL_TO")] GreaterThanOrEqualTo,
        [EnumMember(Value = "LESS_THAN_OR_EQUAL_TO")] LessThanOrEqualTo,
        [EnumMember(Value = "ALREADY_COMPLETED")] AlreadyCompleted,
        [EnumMember(Value = "LOCKED")] Locked,
        [EnumMember(Value = "NOT_SUPPORTED")] NotSupported,
        [EnumMember(Value = "BAD_DOMAIN")] BadDomain,
        [EnumMember(Value = "INVALID_FOR_COUNTRY")] InvalidForCountry,
        [EnumMember(Value = "INVALID_FOR_COUNTRY_AND_PROVINCE")] InvalidForCountryAndProvince,
        [EnumMember(Value = "INVALID_STATE_IN_COUNTRY")] InvalidStateInCountry,
        [EnumMember(Value = "INVALID_PROVINCE_IN_COUNTRY")] InvalidProvinceInCountry,
        [EnumMember(Value = "INVALID_REGION_IN_COUNTRY")] InvalidRegionInCountry,
        [EnumMember(Value = "SHIPPING_RATE_EXPIRED")] ShippingRateExpired,
        [EnumMember(Value = "GIFT_CARD_UNUSABLE")] GiftCardUnusable,
        [EnumMember(Value = "GIFT_CARD_DISABLED")] GiftCardDisabled,
        [EnumMember(Value = "GIFT_CARD_CODE_INVALID")] GiftCardCodeInvalid,
        [EnumMember(Value = "GIFT_CARD_ALREADY_APPLIED")] GiftCardAlreadyApplied,
        [EnumMember(Value = "GIFT_CARD_CURRENCY_MISMATCH")] GiftCardCurrencyMismatch,
        [EnumMember(Value = "GIFT_CARD_EXPIRED")] GiftCardExpired,
        [EnumMember(Value = "GIFT_CARD_DEPLETED")] GiftCardDepleted,
        [EnumMember(Value = "GIFT_CARD_NOT_FOUND")] GiftCardNotFound,
        [EnumMember(Value = "CART_DOES_NOT_MEET_DISCOUNT_REQUIREMENTS_NOTICE")] CartDoesNotMeetDiscountRequirementsNotice,
        [EnumMember(Value = "DISCOUNT_EXPIRED")] DiscountExpired,
        [EnumMember(Value = "DISCOUNT_DISABLED")] DiscountDisabled,
        [EnumMember(Value = "DISCOUNT_LIMIT_REACHED")] DiscountLimitReached,
        [EnumMember(Value = "HIGHER_VALUE_DISCOUNT_APPLIED")] HigherValueDiscountApplied,
        [EnumMember(Value = "MAXIMUM_DISCOUNT_CODE_LIMIT_REACHED")] MaximumDiscountCodeLimitReached,
        [EnumMember(Value = "DISCOUNT_NOT_FOUND")] DiscountNotFound,
        [EnumMember(Value = "CUSTOMER_ALREADY_USED_ONCE_PER_CUSTOMER_DISCOUNT_NOTICE")] CustomerAlreadyUsedOncePerCustomerDiscountNotice,
        [EnumMember(Value = "DISCOUNT_CODE_APPLICATION_FAILED")] DiscountCodeApplicationFailed,
        [EnumMember(Value = "EMPTY")] Empty,
        [EnumMember(Value = "NOT_ENOUGH_IN_STOCK")] NotEnoughInStock,
        [EnumMember(Value = "MISSING_PAYMENT_INPUT")] MissingPaymentInput,
        [EnumMember(Value = "TOTAL_PRICE_MISMATCH")] TotalPriceMismatch,
        [EnumMember(Value = "LINE_ITEM_NOT_FOUND")] LineItemNotFound,
        [EnumMember(Value = "UNABLE_TO_APPLY")] UnableToApply,
        [EnumMember(Value = "DISCOUNT_ALREADY_APPLIED")] DiscountAlreadyApplied,
        [EnumMember(Value = "THROTTLED_DURING_CHECKOUT")] ThrottledDuringCheckout,
        [EnumMember(Value = "EXPIRED_QUEUE_TOKEN")] ExpiredQueueToken,
        [EnumMember(Value = "INVALID_QUEUE_TOKEN")] InvalidQueueToken,
        [EnumMember(Value = "INVALID_COUNTRY_AND_CURRENCY")] InvalidCountryAndCurrency
    }

    public enum CollectionSortKeys
    {
        [EnumMember(Value = "TITLE")] Title,
        [EnumMember(Value = "UPDATED_AT")] UpdatedAt,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum CountryCode
    {
        [EnumMember(Value = "AF")] Af,
        [EnumMember(Value = "AX")] Ax,
        [EnumMember(Value = "AL")] Al,
        [EnumMember(Value = "DZ")] Dz,
        [EnumMember(Value = "AD")] Ad,
        [EnumMember(Value = "AO")] Ao,
        [EnumMember(Value = "AI")] Ai,
        [EnumMember(Value = "AG")] Ag,
        [EnumMember(Value = "AR")] Ar,
        [EnumMember(Value = "AM")] Am,
        [EnumMember(Value = "AW")] Aw,
        [EnumMember(Value = "AC")] Ac,
        [EnumMember(Value = "AU")] Au,
        [EnumMember(Value = "AT")] At,
        [EnumMember(Value = "AZ")] Az,
        [EnumMember(Value = "BS")] Bs,
        [EnumMember(Value = "BH")] Bh,
        [EnumMember(Value = "BD")] Bd,
        [EnumMember(Value = "BB")] Bb,
        [EnumMember(Value = "BY")] By,
        [EnumMember(Value = "BE")] Be,
        [EnumMember(Value = "BZ")] Bz,
        [EnumMember(Value = "BJ")] Bj,
        [EnumMember(Value = "BM")] Bm,
        [EnumMember(Value = "BT")] Bt,
        [EnumMember(Value = "BO")] Bo,
        [EnumMember(Value = "BA")] Ba,
        [EnumMember(Value = "BW")] Bw,
        [EnumMember(Value = "BV")] Bv,
        [EnumMember(Value = "BR")] Br,
        [EnumMember(Value = "IO")] Io,
        [EnumMember(Value = "BN")] Bn,
        [EnumMember(Value = "BG")] Bg,
        [EnumMember(Value = "BF")] Bf,
        [EnumMember(Value = "BI")] Bi,
        [EnumMember(Value = "KH")] Kh,
        [EnumMember(Value = "CA")] Ca,
        [EnumMember(Value = "CV")] Cv,
        [EnumMember(Value = "BQ")] Bq,
        [EnumMember(Value = "KY")] Ky,
        [EnumMember(Value = "CF")] Cf,
        [EnumMember(Value = "TD")] Td,
        [EnumMember(Value = "CL")] Cl,
        [EnumMember(Value = "CN")] Cn,
        [EnumMember(Value = "CX")] Cx,
        [EnumMember(Value = "CC")] Cc,
        [EnumMember(Value = "CO")] Co,
        [EnumMember(Value = "KM")] Km,
        [EnumMember(Value = "CG")] Cg,
        [EnumMember(Value = "CD")] Cd,
        [EnumMember(Value = "CK")] Ck,
        [EnumMember(Value = "CR")] Cr,
        [EnumMember(Value = "HR")] Hr,
        [EnumMember(Value = "CU")] Cu,
        [EnumMember(Value = "CW")] Cw,
        [EnumMember(Value = "CY")] Cy,
        [EnumMember(Value = "CZ")] Cz,
        [EnumMember(Value = "CI")] Ci,
        [EnumMember(Value = "DK")] Dk,
        [EnumMember(Value = "DJ")] Dj,
        [EnumMember(Value = "DM")] Dm,
        [EnumMember(Value = "DO")] Do,
        [EnumMember(Value = "EC")] Ec,
        [EnumMember(Value = "EG")] Eg,
        [EnumMember(Value = "SV")] Sv,
        [EnumMember(Value = "GQ")] Gq,
        [EnumMember(Value = "ER")] Er,
        [EnumMember(Value = "EE")] Ee,
        [EnumMember(Value = "SZ")] Sz,
        [EnumMember(Value = "ET")] Et,
        [EnumMember(Value = "FK")] Fk,
        [EnumMember(Value = "FO")] Fo,
        [EnumMember(Value = "FJ")] Fj,
        [EnumMember(Value = "FI")] Fi,
        [EnumMember(Value = "FR")] Fr,
        [EnumMember(Value = "GF")] Gf,
        [EnumMember(Value = "PF")] Pf,
        [EnumMember(Value = "TF")] Tf,
        [EnumMember(Value = "GA")] Ga,
        [EnumMember(Value = "GM")] Gm,
        [EnumMember(Value = "GE")] Ge,
        [EnumMember(Value = "DE")] De,
        [EnumMember(Value = "GH")] Gh,
        [EnumMember(Value = "GI")] Gi,
        [EnumMember(Value = "GR")] Gr,
        [EnumMember(Value = "GL")] Gl,
        [EnumMember(Value = "GD")] Gd,
        [EnumMember(Value = "GP")] Gp,
        [EnumMember(Value = "GT")] Gt,
        [EnumMember(Value = "GG")] Gg,
        [EnumMember(Value = "GN")] Gn,
        [EnumMember(Value = "GW")] Gw,
        [EnumMember(Value = "GY")] Gy,
        [EnumMember(Value = "HT")] Ht,
        [EnumMember(Value = "HM")] Hm,
        [EnumMember(Value = "VA")] Va,
        [EnumMember(Value = "HN")] Hn,
        [EnumMember(Value = "HK")] Hk,
        [EnumMember(Value = "HU")] Hu,
        [EnumMember(Value = "IS")] Is,
        [EnumMember(Value = "IN")] In,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "IR")] Ir,
        [EnumMember(Value = "IQ")] Iq,
        [EnumMember(Value = "IE")] Ie,
        [EnumMember(Value = "IM")] Im,
        [EnumMember(Value = "IL")] Il,
        [EnumMember(Value = "IT")] It,
        [EnumMember(Value = "JM")] Jm,
        [EnumMember(Value = "JP")] Jp,
        [EnumMember(Value = "JE")] Je,
        [EnumMember(Value = "JO")] Jo,
        [EnumMember(Value = "KZ")] Kz,
        [EnumMember(Value = "KE")] Ke,
        [EnumMember(Value = "KI")] Ki,
        [EnumMember(Value = "KP")] Kp,
        [EnumMember(Value = "XK")] Xk,
        [EnumMember(Value = "KW")] Kw,
        [EnumMember(Value = "KG")] Kg,
        [EnumMember(Value = "LA")] La,
        [EnumMember(Value = "LV")] Lv,
        [EnumMember(Value = "LB")] Lb,
        [EnumMember(Value = "LS")] Ls,
        [EnumMember(Value = "LR")] Lr,
        [EnumMember(Value = "LY")] Ly,
        [EnumMember(Value = "LI")] Li,
        [EnumMember(Value = "LT")] Lt,
        [EnumMember(Value = "LU")] Lu,
        [EnumMember(Value = "MO")] Mo,
        [EnumMember(Value = "MG")] Mg,
        [EnumMember(Value = "MW")] Mw,
        [EnumMember(Value = "MY")] My,
        [EnumMember(Value = "MV")] Mv,
        [EnumMember(Value = "ML")] Ml,
        [EnumMember(Value = "MT")] Mt,
        [EnumMember(Value = "MQ")] Mq,
        [EnumMember(Value = "MR")] Mr,
        [EnumMember(Value = "MU")] Mu,
        [EnumMember(Value = "YT")] Yt,
        [EnumMember(Value = "MX")] Mx,
        [EnumMember(Value = "MD")] Md,
        [EnumMember(Value = "MC")] Mc,
        [EnumMember(Value = "MN")] Mn,
        [EnumMember(Value = "ME")] Me,
        [EnumMember(Value = "MS")] Ms,
        [EnumMember(Value = "MA")] Ma,
        [EnumMember(Value = "MZ")] Mz,
        [EnumMember(Value = "MM")] Mm,
        [EnumMember(Value = "NA")] Na,
        [EnumMember(Value = "NR")] Nr,
        [EnumMember(Value = "NP")] Np,
        [EnumMember(Value = "NL")] Nl,
        [EnumMember(Value = "AN")] An,
        [EnumMember(Value = "NC")] Nc,
        [EnumMember(Value = "NZ")] Nz,
        [EnumMember(Value = "NI")] Ni,
        [EnumMember(Value = "NE")] Ne,
        [EnumMember(Value = "NG")] Ng,
        [EnumMember(Value = "NU")] Nu,
        [EnumMember(Value = "NF")] Nf,
        [EnumMember(Value = "MK")] Mk,
        [EnumMember(Value = "NO")] No,
        [EnumMember(Value = "OM")] Om,
        [EnumMember(Value = "PK")] Pk,
        [EnumMember(Value = "PS")] Ps,
        [EnumMember(Value = "PA")] Pa,
        [EnumMember(Value = "PG")] Pg,
        [EnumMember(Value = "PY")] Py,
        [EnumMember(Value = "PE")] Pe,
        [EnumMember(Value = "PH")] Ph,
        [EnumMember(Value = "PN")] Pn,
        [EnumMember(Value = "PL")] Pl,
        [EnumMember(Value = "PT")] Pt,
        [EnumMember(Value = "QA")] Qa,
        [EnumMember(Value = "CM")] Cm,
        [EnumMember(Value = "RE")] Re,
        [EnumMember(Value = "RO")] Ro,
        [EnumMember(Value = "RU")] Ru,
        [EnumMember(Value = "RW")] Rw,
        [EnumMember(Value = "BL")] Bl,
        [EnumMember(Value = "SH")] Sh,
        [EnumMember(Value = "KN")] Kn,
        [EnumMember(Value = "LC")] Lc,
        [EnumMember(Value = "MF")] Mf,
        [EnumMember(Value = "PM")] Pm,
        [EnumMember(Value = "WS")] Ws,
        [EnumMember(Value = "SM")] Sm,
        [EnumMember(Value = "ST")] St,
        [EnumMember(Value = "SA")] Sa,
        [EnumMember(Value = "SN")] Sn,
        [EnumMember(Value = "RS")] Rs,
        [EnumMember(Value = "SC")] Sc,
        [EnumMember(Value = "SL")] Sl,
        [EnumMember(Value = "SG")] Sg,
        [EnumMember(Value = "SX")] Sx,
        [EnumMember(Value = "SK")] Sk,
        [EnumMember(Value = "SI")] Si,
        [EnumMember(Value = "SB")] Sb,
        [EnumMember(Value = "SO")] So,
        [EnumMember(Value = "ZA")] Za,
        [EnumMember(Value = "GS")] Gs,
        [EnumMember(Value = "KR")] Kr,
        [EnumMember(Value = "SS")] Ss,
        [EnumMember(Value = "ES")] Es,
        [EnumMember(Value = "LK")] Lk,
        [EnumMember(Value = "VC")] Vc,
        [EnumMember(Value = "SD")] Sd,
        [EnumMember(Value = "SR")] Sr,
        [EnumMember(Value = "SJ")] Sj,
        [EnumMember(Value = "SE")] Se,
        [EnumMember(Value = "CH")] Ch,
        [EnumMember(Value = "SY")] Sy,
        [EnumMember(Value = "TW")] Tw,
        [EnumMember(Value = "TJ")] Tj,
        [EnumMember(Value = "TZ")] Tz,
        [EnumMember(Value = "TH")] Th,
        [EnumMember(Value = "TL")] Tl,
        [EnumMember(Value = "TG")] Tg,
        [EnumMember(Value = "TK")] Tk,
        [EnumMember(Value = "TO")] To,
        [EnumMember(Value = "TT")] Tt,
        [EnumMember(Value = "TA")] Ta,
        [EnumMember(Value = "TN")] Tn,
        [EnumMember(Value = "TR")] Tr,
        [EnumMember(Value = "TM")] Tm,
        [EnumMember(Value = "TC")] Tc,
        [EnumMember(Value = "TV")] Tv,
        [EnumMember(Value = "UG")] Ug,
        [EnumMember(Value = "UA")] Ua,
        [EnumMember(Value = "AE")] Ae,
        [EnumMember(Value = "GB")] Gb,
        [EnumMember(Value = "US")] Us,
        [EnumMember(Value = "UM")] Um,
        [EnumMember(Value = "UY")] Uy,
        [EnumMember(Value = "UZ")] Uz,
        [EnumMember(Value = "VU")] Vu,
        [EnumMember(Value = "VE")] Ve,
        [EnumMember(Value = "VN")] Vn,
        [EnumMember(Value = "VG")] Vg,
        [EnumMember(Value = "WF")] Wf,
        [EnumMember(Value = "EH")] Eh,
        [EnumMember(Value = "YE")] Ye,
        [EnumMember(Value = "ZM")] Zm,
        [EnumMember(Value = "ZW")] Zw,
        [EnumMember(Value = "ZZ")] Zz
    }

    public enum CropRegion
    {
        [EnumMember(Value = "CENTER")] Center,
        [EnumMember(Value = "TOP")] Top,
        [EnumMember(Value = "BOTTOM")] Bottom,
        [EnumMember(Value = "LEFT")] Left,
        [EnumMember(Value = "RIGHT")] Right
    }

    public enum CurrencyCode
    {
        [EnumMember(Value = "USD")] Usd,
        [EnumMember(Value = "EUR")] Eur,
        [EnumMember(Value = "GBP")] Gbp,
        [EnumMember(Value = "CAD")] Cad,
        [EnumMember(Value = "AFN")] Afn,
        [EnumMember(Value = "ALL")] All,
        [EnumMember(Value = "DZD")] Dzd,
        [EnumMember(Value = "AOA")] Aoa,
        [EnumMember(Value = "ARS")] Ars,
        [EnumMember(Value = "AMD")] Amd,
        [EnumMember(Value = "AWG")] Awg,
        [EnumMember(Value = "AUD")] Aud,
        [EnumMember(Value = "BBD")] Bbd,
        [EnumMember(Value = "AZN")] Azn,
        [EnumMember(Value = "BDT")] Bdt,
        [EnumMember(Value = "BSD")] Bsd,
        [EnumMember(Value = "BHD")] Bhd,
        [EnumMember(Value = "BIF")] Bif,
        [EnumMember(Value = "BZD")] Bzd,
        [EnumMember(Value = "BMD")] Bmd,
        [EnumMember(Value = "BTN")] Btn,
        [EnumMember(Value = "BAM")] Bam,
        [EnumMember(Value = "BRL")] Brl,
        [EnumMember(Value = "BOB")] Bob,
        [EnumMember(Value = "BWP")] Bwp,
        [EnumMember(Value = "BND")] Bnd,
        [EnumMember(Value = "BGN")] Bgn,
        [EnumMember(Value = "MMK")] Mmk,
        [EnumMember(Value = "KHR")] Khr,
        [EnumMember(Value = "CVE")] Cve,
        [EnumMember(Value = "KYD")] Kyd,
        [EnumMember(Value = "XAF")] Xaf,
        [EnumMember(Value = "CLP")] Clp,
        [EnumMember(Value = "CNY")] Cny,
        [EnumMember(Value = "COP")] Cop,
        [EnumMember(Value = "KMF")] Kmf,
        [EnumMember(Value = "CDF")] Cdf,
        [EnumMember(Value = "CRC")] Crc,
        [EnumMember(Value = "HRK")] Hrk,
        [EnumMember(Value = "CZK")] Czk,
        [EnumMember(Value = "DKK")] Dkk,
        [EnumMember(Value = "DOP")] Dop,
        [EnumMember(Value = "XCD")] Xcd,
        [EnumMember(Value = "EGP")] Egp,
        [EnumMember(Value = "ETB")] Etb,
        [EnumMember(Value = "XPF")] Xpf,
        [EnumMember(Value = "FJD")] Fjd,
        [EnumMember(Value = "GMD")] Gmd,
        [EnumMember(Value = "GHS")] Ghs,
        [EnumMember(Value = "GTQ")] Gtq,
        [EnumMember(Value = "GYD")] Gyd,
        [EnumMember(Value = "GEL")] Gel,
        [EnumMember(Value = "HTG")] Htg,
        [EnumMember(Value = "HNL")] Hnl,
        [EnumMember(Value = "HKD")] Hkd,
        [EnumMember(Value = "HUF")] Huf,
        [EnumMember(Value = "ISK")] Isk,
        [EnumMember(Value = "INR")] Inr,
        [EnumMember(Value = "IDR")] Idr,
        [EnumMember(Value = "ILS")] Ils,
        [EnumMember(Value = "IQD")] Iqd,
        [EnumMember(Value = "JMD")] Jmd,
        [EnumMember(Value = "JPY")] Jpy,
        [EnumMember(Value = "JEP")] Jep,
        [EnumMember(Value = "JOD")] Jod,
        [EnumMember(Value = "KZT")] Kzt,
        [EnumMember(Value = "KES")] Kes,
        [EnumMember(Value = "KWD")] Kwd,
        [EnumMember(Value = "KGS")] Kgs,
        [EnumMember(Value = "LAK")] Lak,
        [EnumMember(Value = "LVL")] Lvl,
        [EnumMember(Value = "LBP")] Lbp,
        [EnumMember(Value = "LSL")] Lsl,
        [EnumMember(Value = "LRD")] Lrd,
        [EnumMember(Value = "LTL")] Ltl,
        [EnumMember(Value = "MGA")] Mga,
        [EnumMember(Value = "MKD")] Mkd,
        [EnumMember(Value = "MOP")] Mop,
        [EnumMember(Value = "MWK")] Mwk,
        [EnumMember(Value = "MVR")] Mvr,
        [EnumMember(Value = "MXN")] Mxn,
        [EnumMember(Value = "MYR")] Myr,
        [EnumMember(Value = "MUR")] Mur,
        [EnumMember(Value = "MDL")] Mdl,
        [EnumMember(Value = "MAD")] Mad,
        [EnumMember(Value = "MNT")] Mnt,
        [EnumMember(Value = "MZN")] Mzn,
        [EnumMember(Value = "NAD")] Nad,
        [EnumMember(Value = "NPR")] Npr,
        [EnumMember(Value = "ANG")] Ang,
        [EnumMember(Value = "NZD")] Nzd,
        [EnumMember(Value = "NIO")] Nio,
        [EnumMember(Value = "NGN")] Ngn,
        [EnumMember(Value = "NOK")] Nok,
        [EnumMember(Value = "OMR")] Omr,
        [EnumMember(Value = "PAB")] Pab,
        [EnumMember(Value = "PKR")] Pkr,
        [EnumMember(Value = "PGK")] Pgk,
        [EnumMember(Value = "PYG")] Pyg,
        [EnumMember(Value = "PEN")] Pen,
        [EnumMember(Value = "PHP")] Php,
        [EnumMember(Value = "PLN")] Pln,
        [EnumMember(Value = "QAR")] Qar,
        [EnumMember(Value = "RON")] Ron,
        [EnumMember(Value = "RUB")] Rub,
        [EnumMember(Value = "RWF")] Rwf,
        [EnumMember(Value = "WST")] Wst,
        [EnumMember(Value = "SAR")] Sar,
        [EnumMember(Value = "RSD")] Rsd,
        [EnumMember(Value = "SCR")] Scr,
        [EnumMember(Value = "SGD")] Sgd,
        [EnumMember(Value = "SDG")] Sdg,
        [EnumMember(Value = "SYP")] Syp,
        [EnumMember(Value = "ZAR")] Zar,
        [EnumMember(Value = "KRW")] Krw,
        [EnumMember(Value = "SSP")] Ssp,
        [EnumMember(Value = "SBD")] Sbd,
        [EnumMember(Value = "LKR")] Lkr,
        [EnumMember(Value = "SRD")] Srd,
        [EnumMember(Value = "SZL")] Szl,
        [EnumMember(Value = "SEK")] Sek,
        [EnumMember(Value = "CHF")] Chf,
        [EnumMember(Value = "TWD")] Twd,
        [EnumMember(Value = "THB")] Thb,
        [EnumMember(Value = "TZS")] Tzs,
        [EnumMember(Value = "TTD")] Ttd,
        [EnumMember(Value = "TND")] Tnd,
        [EnumMember(Value = "TRY")] Try,
        [EnumMember(Value = "TMT")] Tmt,
        [EnumMember(Value = "UGX")] Ugx,
        [EnumMember(Value = "UAH")] Uah,
        [EnumMember(Value = "AED")] Aed,
        [EnumMember(Value = "UYU")] Uyu,
        [EnumMember(Value = "UZS")] Uzs,
        [EnumMember(Value = "VUV")] Vuv,
        [EnumMember(Value = "VND")] Vnd,
        [EnumMember(Value = "XOF")] Xof,
        [EnumMember(Value = "YER")] Yer,
        [EnumMember(Value = "ZMW")] Zmw,
        [EnumMember(Value = "BYN")] Byn,
        [EnumMember(Value = "BYR")] Byr,
        [EnumMember(Value = "DJF")] Djf,
        [EnumMember(Value = "ERN")] Ern,
        [EnumMember(Value = "FKP")] Fkp,
        [EnumMember(Value = "GIP")] Gip,
        [EnumMember(Value = "GNF")] Gnf,
        [EnumMember(Value = "IRR")] Irr,
        [EnumMember(Value = "KID")] Kid,
        [EnumMember(Value = "LYD")] Lyd,
        [EnumMember(Value = "MRU")] Mru,
        [EnumMember(Value = "SLL")] Sll,
        [EnumMember(Value = "SHP")] Shp,
        [EnumMember(Value = "SOS")] Sos,
        [EnumMember(Value = "STD")] Std,
        [EnumMember(Value = "STN")] Stn,
        [EnumMember(Value = "TJS")] Tjs,
        [EnumMember(Value = "TOP")] Top,
        [EnumMember(Value = "VED")] Ved,
        [EnumMember(Value = "VEF")] Vef,
        [EnumMember(Value = "VES")] Ves,
        [EnumMember(Value = "XXX")] Xxx
    }

    public enum CustomerErrorCode
    {
        [EnumMember(Value = "BLANK")] Blank,
        [EnumMember(Value = "INVALID")] Invalid,
        [EnumMember(Value = "TAKEN")] Taken,
        [EnumMember(Value = "TOO_LONG")] TooLong,
        [EnumMember(Value = "TOO_SHORT")] TooShort,
        [EnumMember(Value = "UNIDENTIFIED_CUSTOMER")] UnidentifiedCustomer,
        [EnumMember(Value = "CUSTOMER_DISABLED")] CustomerDisabled,
        [EnumMember(Value = "PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE")] PasswordStartsOrEndsWithWhitespace,
        [EnumMember(Value = "CONTAINS_HTML_TAGS")] ContainsHtmlTags,
        [EnumMember(Value = "CONTAINS_URL")] ContainsUrl,
        [EnumMember(Value = "TOKEN_INVALID")] TokenInvalid,
        [EnumMember(Value = "ALREADY_ENABLED")] AlreadyEnabled,
        [EnumMember(Value = "NOT_FOUND")] NotFound,
        [EnumMember(Value = "BAD_DOMAIN")] BadDomain,
        [EnumMember(Value = "INVALID_MULTIPASS_REQUEST")] InvalidMultipassRequest
    }

    public enum DeliveryMethodType
    {
        [EnumMember(Value = "SHIPPING")] Shipping,
        [EnumMember(Value = "PICK_UP")] PickUp,
        [EnumMember(Value = "RETAIL")] Retail,
        [EnumMember(Value = "LOCAL")] Local,
        [EnumMember(Value = "PICKUP_POINT")] PickupPoint,
        [EnumMember(Value = "NONE")] None
    }

    public enum DigitalWallet
    {
        [EnumMember(Value = "APPLE_PAY")] ApplePay,
        [EnumMember(Value = "ANDROID_PAY")] AndroidPay,
        [EnumMember(Value = "GOOGLE_PAY")] GooglePay,
        [EnumMember(Value = "SHOPIFY_PAY")] ShopifyPay
    }

    public enum DiscountApplicationAllocationMethod
    {
        [EnumMember(Value = "ACROSS")] Across,
        [EnumMember(Value = "EACH")] Each,
        [EnumMember(Value = "ONE")] One
    }

    public enum DiscountApplicationTargetSelection
    {
        [EnumMember(Value = "ALL")] All,
        [EnumMember(Value = "ENTITLED")] Entitled,
        [EnumMember(Value = "EXPLICIT")] Explicit
    }

    public enum DiscountApplicationTargetType
    {
        [EnumMember(Value = "LINE_ITEM")] LineItem,
        [EnumMember(Value = "SHIPPING_LINE")] ShippingLine
    }

    public enum FilterType
    {
        [EnumMember(Value = "LIST")] List,
        [EnumMember(Value = "PRICE_RANGE")] PriceRange,
        [EnumMember(Value = "BOOLEAN")] Boolean
    }

    public enum ImageContentType
    {
        [EnumMember(Value = "PNG")] Png,
        [EnumMember(Value = "JPG")] Jpg,
        [EnumMember(Value = "WEBP")] Webp
    }

    public enum LanguageCode
    {
        [EnumMember(Value = "AF")] Af,
        [EnumMember(Value = "AK")] Ak,
        [EnumMember(Value = "AM")] Am,
        [EnumMember(Value = "AR")] Ar,
        [EnumMember(Value = "AS")] As,
        [EnumMember(Value = "AZ")] Az,
        [EnumMember(Value = "BE")] Be,
        [EnumMember(Value = "BG")] Bg,
        [EnumMember(Value = "BM")] Bm,
        [EnumMember(Value = "BN")] Bn,
        [EnumMember(Value = "BO")] Bo,
        [EnumMember(Value = "BR")] Br,
        [EnumMember(Value = "BS")] Bs,
        [EnumMember(Value = "CA")] Ca,
        [EnumMember(Value = "CE")] Ce,
        [EnumMember(Value = "CS")] Cs,
        [EnumMember(Value = "CY")] Cy,
        [EnumMember(Value = "DA")] Da,
        [EnumMember(Value = "DE")] De,
        [EnumMember(Value = "DZ")] Dz,
        [EnumMember(Value = "EE")] Ee,
        [EnumMember(Value = "EL")] El,
        [EnumMember(Value = "EN")] En,
        [EnumMember(Value = "EO")] Eo,
        [EnumMember(Value = "ES")] Es,
        [EnumMember(Value = "ET")] Et,
        [EnumMember(Value = "EU")] Eu,
        [EnumMember(Value = "FA")] Fa,
        [EnumMember(Value = "FF")] Ff,
        [EnumMember(Value = "FI")] Fi,
        [EnumMember(Value = "FO")] Fo,
        [EnumMember(Value = "FR")] Fr,
        [EnumMember(Value = "FY")] Fy,
        [EnumMember(Value = "GA")] Ga,
        [EnumMember(Value = "GD")] Gd,
        [EnumMember(Value = "GL")] Gl,
        [EnumMember(Value = "GU")] Gu,
        [EnumMember(Value = "GV")] Gv,
        [EnumMember(Value = "HA")] Ha,
        [EnumMember(Value = "HE")] He,
        [EnumMember(Value = "HI")] Hi,
        [EnumMember(Value = "HR")] Hr,
        [EnumMember(Value = "HU")] Hu,
        [EnumMember(Value = "HY")] Hy,
        [EnumMember(Value = "IA")] Ia,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "IG")] Ig,
        [EnumMember(Value = "II")] Ii,
        [EnumMember(Value = "IS")] Is,
        [EnumMember(Value = "IT")] It,
        [EnumMember(Value = "JA")] Ja,
        [EnumMember(Value = "JV")] Jv,
        [EnumMember(Value = "KA")] Ka,
        [EnumMember(Value = "KI")] Ki,
        [EnumMember(Value = "KK")] Kk,
        [EnumMember(Value = "KL")] Kl,
        [EnumMember(Value = "KM")] Km,
        [EnumMember(Value = "KN")] Kn,
        [EnumMember(Value = "KO")] Ko,
        [EnumMember(Value = "KS")] Ks,
        [EnumMember(Value = "KU")] Ku,
        [EnumMember(Value = "KW")] Kw,
        [EnumMember(Value = "KY")] Ky,
        [EnumMember(Value = "LB")] Lb,
        [EnumMember(Value = "LG")] Lg,
        [EnumMember(Value = "LN")] Ln,
        [EnumMember(Value = "LO")] Lo,
        [EnumMember(Value = "LT")] Lt,
        [EnumMember(Value = "LU")] Lu,
        [EnumMember(Value = "LV")] Lv,
        [EnumMember(Value = "MG")] Mg,
        [EnumMember(Value = "MI")] Mi,
        [EnumMember(Value = "MK")] Mk,
        [EnumMember(Value = "ML")] Ml,
        [EnumMember(Value = "MN")] Mn,
        [EnumMember(Value = "MR")] Mr,
        [EnumMember(Value = "MS")] Ms,
        [EnumMember(Value = "MT")] Mt,
        [EnumMember(Value = "MY")] My,
        [EnumMember(Value = "NB")] Nb,
        [EnumMember(Value = "ND")] Nd,
        [EnumMember(Value = "NE")] Ne,
        [EnumMember(Value = "NL")] Nl,
        [EnumMember(Value = "NN")] Nn,
        [EnumMember(Value = "NO")] No,
        [EnumMember(Value = "OM")] Om,
        [EnumMember(Value = "OR")] Or,
        [EnumMember(Value = "OS")] Os,
        [EnumMember(Value = "PA")] Pa,
        [EnumMember(Value = "PL")] Pl,
        [EnumMember(Value = "PS")] Ps,
        [EnumMember(Value = "PT_BR")] PtBr,
        [EnumMember(Value = "PT_PT")] PtPt,
        [EnumMember(Value = "QU")] Qu,
        [EnumMember(Value = "RM")] Rm,
        [EnumMember(Value = "RN")] Rn,
        [EnumMember(Value = "RO")] Ro,
        [EnumMember(Value = "RU")] Ru,
        [EnumMember(Value = "RW")] Rw,
        [EnumMember(Value = "SD")] Sd,
        [EnumMember(Value = "SE")] Se,
        [EnumMember(Value = "SG")] Sg,
        [EnumMember(Value = "SI")] Si,
        [EnumMember(Value = "SK")] Sk,
        [EnumMember(Value = "SL")] Sl,
        [EnumMember(Value = "SN")] Sn,
        [EnumMember(Value = "SO")] So,
        [EnumMember(Value = "SQ")] Sq,
        [EnumMember(Value = "SR")] Sr,
        [EnumMember(Value = "SU")] Su,
        [EnumMember(Value = "SV")] Sv,
        [EnumMember(Value = "SW")] Sw,
        [EnumMember(Value = "TA")] Ta,
        [EnumMember(Value = "TE")] Te,
        [EnumMember(Value = "TG")] Tg,
        [EnumMember(Value = "TH")] Th,
        [EnumMember(Value = "TI")] Ti,
        [EnumMember(Value = "TK")] Tk,
        [EnumMember(Value = "TO")] To,
        [EnumMember(Value = "TR")] Tr,
        [EnumMember(Value = "TT")] Tt,
        [EnumMember(Value = "UG")] Ug,
        [EnumMember(Value = "UK")] Uk,
        [EnumMember(Value = "UR")] Ur,
        [EnumMember(Value = "UZ")] Uz,
        [EnumMember(Value = "VI")] Vi,
        [EnumMember(Value = "WO")] Wo,
        [EnumMember(Value = "XH")] Xh,
        [EnumMember(Value = "YI")] Yi,
        [EnumMember(Value = "YO")] Yo,
        [EnumMember(Value = "ZH_CN")] ZhCn,
        [EnumMember(Value = "ZH_TW")] ZhTw,
        [EnumMember(Value = "ZU")] Zu,
        [EnumMember(Value = "ZH")] Zh,
        [EnumMember(Value = "PT")] Pt,
        [EnumMember(Value = "CU")] Cu,
        [EnumMember(Value = "VO")] Vo
    }

    public enum LocationSortKeys
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "NAME")] Name,
        [EnumMember(Value = "CITY")] City,
        [EnumMember(Value = "DISTANCE")] Distance
    }

    public enum MediaContentType
    {
        [EnumMember(Value = "EXTERNAL_VIDEO")] ExternalVideo,
        [EnumMember(Value = "IMAGE")] Image,
        [EnumMember(Value = "MODEL_3D")] Model3D,
        [EnumMember(Value = "VIDEO")] Video
    }

    public enum MediaHost
    {
        [EnumMember(Value = "YOUTUBE")] Youtube,
        [EnumMember(Value = "VIMEO")] Vimeo
    }

    public enum MenuItemType
    {
        [EnumMember(Value = "FRONTPAGE")] Frontpage,
        [EnumMember(Value = "COLLECTION")] Collection,
        [EnumMember(Value = "COLLECTIONS")] Collections,
        [EnumMember(Value = "PRODUCT")] Product,
        [EnumMember(Value = "CATALOG")] Catalog,
        [EnumMember(Value = "PAGE")] Page,
        [EnumMember(Value = "BLOG")] Blog,
        [EnumMember(Value = "ARTICLE")] Article,
        [EnumMember(Value = "SEARCH")] Search,
        [EnumMember(Value = "SHOP_POLICY")] ShopPolicy,
        [EnumMember(Value = "HTTP")] Http
    }

    public enum OrderCancelReason
    {
        [EnumMember(Value = "CUSTOMER")] Customer,
        [EnumMember(Value = "DECLINED")] Declined,
        [EnumMember(Value = "FRAUD")] Fraud,
        [EnumMember(Value = "INVENTORY")] Inventory,
        [EnumMember(Value = "OTHER")] Other
    }

    public enum OrderFinancialStatus
    {
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "AUTHORIZED")] Authorized,
        [EnumMember(Value = "PARTIALLY_PAID")] PartiallyPaid,
        [EnumMember(Value = "PARTIALLY_REFUNDED")] PartiallyRefunded,
        [EnumMember(Value = "VOIDED")] Voided,
        [EnumMember(Value = "PAID")] Paid,
        [EnumMember(Value = "REFUNDED")] Refunded
    }

    public enum OrderFulfillmentStatus
    {
        [EnumMember(Value = "UNFULFILLED")] Unfulfilled,
        [EnumMember(Value = "PARTIALLY_FULFILLED")] PartiallyFulfilled,
        [EnumMember(Value = "FULFILLED")] Fulfilled,
        [EnumMember(Value = "RESTOCKED")] Restocked,
        [EnumMember(Value = "PENDING_FULFILLMENT")] PendingFulfillment,
        [EnumMember(Value = "OPEN")] Open,
        [EnumMember(Value = "IN_PROGRESS")] InProgress,
        [EnumMember(Value = "ON_HOLD")] OnHold,
        [EnumMember(Value = "SCHEDULED")] Scheduled
    }

    public enum OrderSortKeys
    {
        [EnumMember(Value = "PROCESSED_AT")] ProcessedAt,
        [EnumMember(Value = "TOTAL_PRICE")] TotalPrice,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum PageSortKeys
    {
        [EnumMember(Value = "TITLE")] Title,
        [EnumMember(Value = "UPDATED_AT")] UpdatedAt,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum PaymentTokenType
    {
        [EnumMember(Value = "APPLE_PAY")] ApplePay,
        [EnumMember(Value = "VAULT")] Vault,
        [EnumMember(Value = "SHOPIFY_PAY")] ShopifyPay,
        [EnumMember(Value = "GOOGLE_PAY")] GooglePay,
        [EnumMember(Value = "STRIPE_VAULT_TOKEN")] StripeVaultToken
    }

    public enum ProductCollectionSortKeys
    {
        [EnumMember(Value = "TITLE")] Title,
        [EnumMember(Value = "PRICE")] Price,
        [EnumMember(Value = "BEST_SELLING")] BestSelling,
        [EnumMember(Value = "CREATED")] Created,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "MANUAL")] Manual,
        [EnumMember(Value = "COLLECTION_DEFAULT")] CollectionDefault,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum ProductImageSortKeys
    {
        [EnumMember(Value = "CREATED_AT")] CreatedAt,
        [EnumMember(Value = "POSITION")] Position,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum ProductMediaSortKeys
    {
        [EnumMember(Value = "POSITION")] Position,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum ProductSortKeys
    {
        [EnumMember(Value = "TITLE")] Title,
        [EnumMember(Value = "PRODUCT_TYPE")] ProductType,
        [EnumMember(Value = "VENDOR")] Vendor,
        [EnumMember(Value = "UPDATED_AT")] UpdatedAt,
        [EnumMember(Value = "CREATED_AT")] CreatedAt,
        [EnumMember(Value = "BEST_SELLING")] BestSelling,
        [EnumMember(Value = "PRICE")] Price,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum ProductVariantSortKeys
    {
        [EnumMember(Value = "TITLE")] Title,
        [EnumMember(Value = "SKU")] Sku,
        [EnumMember(Value = "POSITION")] Position,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum SellingPlanCheckoutChargeType
    {
        [EnumMember(Value = "PERCENTAGE")] Percentage,
        [EnumMember(Value = "PRICE")] Price
    }

    public enum TransactionKind
    {
        [EnumMember(Value = "SALE")] Sale,
        [EnumMember(Value = "CAPTURE")] Capture,
        [EnumMember(Value = "AUTHORIZATION")] Authorization,
        [EnumMember(Value = "EMV_AUTHORIZATION")] EmvAuthorization,
        [EnumMember(Value = "CHANGE")] Change
    }

    public enum TransactionStatus
    {
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "SUCCESS")] Success,
        [EnumMember(Value = "FAILURE")] Failure,
        [EnumMember(Value = "ERROR")] Error
    }

    public enum UnitPriceMeasurementMeasuredType
    {
        [EnumMember(Value = "VOLUME")] Volume,
        [EnumMember(Value = "WEIGHT")] Weight,
        [EnumMember(Value = "LENGTH")] Length,
        [EnumMember(Value = "AREA")] Area
    }

    public enum UnitPriceMeasurementMeasuredUnit
    {
        [EnumMember(Value = "ML")] Ml,
        [EnumMember(Value = "CL")] Cl,
        L,
        M3,
        [EnumMember(Value = "MG")] Mg,
        G,
        [EnumMember(Value = "KG")] Kg,
        [EnumMember(Value = "MM")] Mm,
        [EnumMember(Value = "CM")] Cm,
        M,
        M2
    }

    public enum UnitSystem
    {
        [EnumMember(Value = "IMPERIAL_SYSTEM")] ImperialSystem,
        [EnumMember(Value = "METRIC_SYSTEM")] MetricSystem
    }

    public enum WeightUnit
    {
        [EnumMember(Value = "KILOGRAMS")] Kilograms,
        [EnumMember(Value = "GRAMS")] Grams,
        [EnumMember(Value = "POUNDS")] Pounds,
        [EnumMember(Value = "OUNCES")] Ounces
    }
    #endregion

    #region directives
    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }

    public class AccessRestrictedDirective : GraphQlDirective
    {
        public AccessRestrictedDirective(QueryBuilderParameter<string> reason = null) : base("accessRestricted")
        {
            AddArgument("reason", reason);
        }
    }

    public class InContextDirective : GraphQlDirective
    {
        public InContextDirective(QueryBuilderParameter<CountryCode?> country = null, QueryBuilderParameter<LanguageCode?> language = null, QueryBuilderParameter<Guid?> preferredLocationId = null) : base("inContext")
        {
            AddArgument("country", country);
            AddArgument("language", language);
            AddArgument("preferredLocationId", preferredLocationId);
        }
    }
    #endregion

    #region builder classes
    public class ApiVersionQueryBuilder : GraphQlQueryBuilder<ApiVersionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "supported" }
            };

        protected override string TypeName { get { return "ApiVersion"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ApiVersionQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public ApiVersionQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public ApiVersionQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public ApiVersionQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public ApiVersionQueryBuilder WithSupported(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("supported", alias, new GraphQlDirective[] { include, skip });
        }

        public ApiVersionQueryBuilder ExceptSupported()
        {
            return ExceptField("supported");
        }
    }

    public class AppliedGiftCardQueryBuilder : GraphQlQueryBuilder<AppliedGiftCardQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "amountUsed", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "balance", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lastCharacters" },
                new GraphQlFieldMetadata { Name = "presentmentAmountUsed", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "AppliedGiftCard"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AppliedGiftCardQueryBuilder WithAmountUsed(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("amountUsed", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AppliedGiftCardQueryBuilder ExceptAmountUsed()
        {
            return ExceptField("amountUsed");
        }

        public AppliedGiftCardQueryBuilder WithBalance(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("balance", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AppliedGiftCardQueryBuilder ExceptBalance()
        {
            return ExceptField("balance");
        }

        public AppliedGiftCardQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AppliedGiftCardQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AppliedGiftCardQueryBuilder WithLastCharacters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastCharacters", alias, new GraphQlDirective[] { include, skip });
        }

        public AppliedGiftCardQueryBuilder ExceptLastCharacters()
        {
            return ExceptField("lastCharacters");
        }

        public AppliedGiftCardQueryBuilder WithPresentmentAmountUsed(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("presentmentAmountUsed", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AppliedGiftCardQueryBuilder ExceptPresentmentAmountUsed()
        {
            return ExceptField("presentmentAmountUsed");
        }
    }

    public class ArticleQueryBuilder : GraphQlQueryBuilder<ArticleQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "authorV2", IsComplex = true, QueryBuilderType = typeof(ArticleAuthorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "blog", IsComplex = true, QueryBuilderType = typeof(BlogQueryBuilder) },
                new GraphQlFieldMetadata { Name = "comments", IsComplex = true, QueryBuilderType = typeof(CommentConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "content" },
                new GraphQlFieldMetadata { Name = "contentHtml", IsComplex = true },
                new GraphQlFieldMetadata { Name = "excerpt" },
                new GraphQlFieldMetadata { Name = "excerptHtml", IsComplex = true },
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "image", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafield", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafields", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "onlineStoreUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "publishedAt", IsComplex = true },
                new GraphQlFieldMetadata { Name = "seo", IsComplex = true, QueryBuilderType = typeof(SeoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tags", IsComplex = true },
                new GraphQlFieldMetadata { Name = "title" }
            };

        protected override string TypeName { get { return "Article"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ArticleQueryBuilder WithAuthorV2(ArticleAuthorQueryBuilder articleAuthorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("authorV2", alias, articleAuthorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptAuthorV2()
        {
            return ExceptField("authorV2");
        }

        public ArticleQueryBuilder WithBlog(BlogQueryBuilder blogQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("blog", alias, blogQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptBlog()
        {
            return ExceptField("blog");
        }

        public ArticleQueryBuilder WithComments(CommentConnectionQueryBuilder commentConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("comments", alias, commentConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ArticleQueryBuilder ExceptComments()
        {
            return ExceptField("comments");
        }

        public ArticleQueryBuilder WithContent(QueryBuilderParameter<int?> truncateAt = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (truncateAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "truncateAt", ArgumentValue = truncateAt} );

            return WithScalarField("content", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ArticleQueryBuilder ExceptContent()
        {
            return ExceptField("content");
        }

        public ArticleQueryBuilder WithContentHtml(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("contentHtml", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptContentHtml()
        {
            return ExceptField("contentHtml");
        }

        public ArticleQueryBuilder WithExcerpt(QueryBuilderParameter<int?> truncateAt = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (truncateAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "truncateAt", ArgumentValue = truncateAt} );

            return WithScalarField("excerpt", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ArticleQueryBuilder ExceptExcerpt()
        {
            return ExceptField("excerpt");
        }

        public ArticleQueryBuilder WithExcerptHtml(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excerptHtml", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptExcerptHtml()
        {
            return ExceptField("excerptHtml");
        }

        public ArticleQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public ArticleQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ArticleQueryBuilder WithImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("image", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptImage()
        {
            return ExceptField("image");
        }

        public ArticleQueryBuilder WithMetafield(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<string> @namespace, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "namespace", ArgumentValue = @namespace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("metafield", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ArticleQueryBuilder ExceptMetafield()
        {
            return ExceptField("metafield");
        }

        public ArticleQueryBuilder WithMetafields(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<IEnumerable<HasMetafieldsIdentifier>> identifiers, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "identifiers", ArgumentValue = identifiers} );
            return WithObjectField("metafields", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ArticleQueryBuilder ExceptMetafields()
        {
            return ExceptField("metafields");
        }

        public ArticleQueryBuilder WithOnlineStoreUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("onlineStoreUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptOnlineStoreUrl()
        {
            return ExceptField("onlineStoreUrl");
        }

        public ArticleQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }

        public ArticleQueryBuilder WithSeo(SeoQueryBuilder seoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("seo", alias, seoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptSeo()
        {
            return ExceptField("seo");
        }

        public ArticleQueryBuilder WithTags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tags", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptTags()
        {
            return ExceptField("tags");
        }

        public ArticleQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }
    }

    public class ArticleAuthorQueryBuilder : GraphQlQueryBuilder<ArticleAuthorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "bio" },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "firstName" },
                new GraphQlFieldMetadata { Name = "lastName" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "ArticleAuthor"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ArticleAuthorQueryBuilder WithBio(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bio", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleAuthorQueryBuilder ExceptBio()
        {
            return ExceptField("bio");
        }

        public ArticleAuthorQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleAuthorQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public ArticleAuthorQueryBuilder WithFirstName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstName", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleAuthorQueryBuilder ExceptFirstName()
        {
            return ExceptField("firstName");
        }

        public ArticleAuthorQueryBuilder WithLastName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastName", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleAuthorQueryBuilder ExceptLastName()
        {
            return ExceptField("lastName");
        }

        public ArticleAuthorQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleAuthorQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class ArticleConnectionQueryBuilder : GraphQlQueryBuilder<ArticleConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(ArticleEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ArticleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "ArticleConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ArticleConnectionQueryBuilder WithEdges(ArticleEdgeQueryBuilder articleEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, articleEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ArticleConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public ArticleConnectionQueryBuilder WithNodes(ArticleQueryBuilder articleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, articleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ArticleConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ArticleConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ArticleConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class ArticleEdgeQueryBuilder : GraphQlQueryBuilder<ArticleEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ArticleQueryBuilder) }
            };

        protected override string TypeName { get { return "ArticleEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ArticleEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public ArticleEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public ArticleEdgeQueryBuilder WithNode(ArticleQueryBuilder articleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, articleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ArticleEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class AttributeQueryBuilder : GraphQlQueryBuilder<AttributeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "Attribute"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AttributeQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public AttributeQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public AttributeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public AttributeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class AutomaticDiscountApplicationQueryBuilder : GraphQlQueryBuilder<AutomaticDiscountApplicationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "allocationMethod" },
                new GraphQlFieldMetadata { Name = "targetSelection" },
                new GraphQlFieldMetadata { Name = "targetType" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(PricingValueQueryBuilder) }
            };

        protected override string TypeName { get { return "AutomaticDiscountApplication"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AutomaticDiscountApplicationQueryBuilder WithAllocationMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allocationMethod", alias, new GraphQlDirective[] { include, skip });
        }

        public AutomaticDiscountApplicationQueryBuilder ExceptAllocationMethod()
        {
            return ExceptField("allocationMethod");
        }

        public AutomaticDiscountApplicationQueryBuilder WithTargetSelection(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetSelection", alias, new GraphQlDirective[] { include, skip });
        }

        public AutomaticDiscountApplicationQueryBuilder ExceptTargetSelection()
        {
            return ExceptField("targetSelection");
        }

        public AutomaticDiscountApplicationQueryBuilder WithTargetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetType", alias, new GraphQlDirective[] { include, skip });
        }

        public AutomaticDiscountApplicationQueryBuilder ExceptTargetType()
        {
            return ExceptField("targetType");
        }

        public AutomaticDiscountApplicationQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public AutomaticDiscountApplicationQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public AutomaticDiscountApplicationQueryBuilder WithValue(PricingValueQueryBuilder pricingValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, pricingValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AutomaticDiscountApplicationQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class AvailableShippingRatesQueryBuilder : GraphQlQueryBuilder<AvailableShippingRatesQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "ready" },
                new GraphQlFieldMetadata { Name = "shippingRates", IsComplex = true, QueryBuilderType = typeof(ShippingRateQueryBuilder) }
            };

        protected override string TypeName { get { return "AvailableShippingRates"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AvailableShippingRatesQueryBuilder WithReady(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ready", alias, new GraphQlDirective[] { include, skip });
        }

        public AvailableShippingRatesQueryBuilder ExceptReady()
        {
            return ExceptField("ready");
        }

        public AvailableShippingRatesQueryBuilder WithShippingRates(ShippingRateQueryBuilder shippingRateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingRates", alias, shippingRateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AvailableShippingRatesQueryBuilder ExceptShippingRates()
        {
            return ExceptField("shippingRates");
        }
    }

    public class BlogQueryBuilder : GraphQlQueryBuilder<BlogQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "articleByHandle", IsComplex = true, QueryBuilderType = typeof(ArticleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "articles", IsComplex = true, QueryBuilderType = typeof(ArticleConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authors", IsComplex = true, QueryBuilderType = typeof(ArticleAuthorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "metafield", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafields", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "onlineStoreUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "seo", IsComplex = true, QueryBuilderType = typeof(SeoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "title" }
            };

        protected override string TypeName { get { return "Blog"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BlogQueryBuilder WithArticleByHandle(ArticleQueryBuilder articleQueryBuilder, QueryBuilderParameter<string> handle, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "handle", ArgumentValue = handle} );
            return WithObjectField("articleByHandle", alias, articleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BlogQueryBuilder ExceptArticleByHandle()
        {
            return ExceptField("articleByHandle");
        }

        public BlogQueryBuilder WithArticles(ArticleConnectionQueryBuilder articleConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<ArticleSortKeys?> sortKey = null, QueryBuilderParameter<string> query = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            if (query != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "query", ArgumentValue = query} );

            return WithObjectField("articles", alias, articleConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BlogQueryBuilder ExceptArticles()
        {
            return ExceptField("articles");
        }

        public BlogQueryBuilder WithAuthors(ArticleAuthorQueryBuilder articleAuthorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("authors", alias, articleAuthorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BlogQueryBuilder ExceptAuthors()
        {
            return ExceptField("authors");
        }

        public BlogQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public BlogQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BlogQueryBuilder WithMetafield(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<string> @namespace, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "namespace", ArgumentValue = @namespace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("metafield", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BlogQueryBuilder ExceptMetafield()
        {
            return ExceptField("metafield");
        }

        public BlogQueryBuilder WithMetafields(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<IEnumerable<HasMetafieldsIdentifier>> identifiers, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "identifiers", ArgumentValue = identifiers} );
            return WithObjectField("metafields", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BlogQueryBuilder ExceptMetafields()
        {
            return ExceptField("metafields");
        }

        public BlogQueryBuilder WithOnlineStoreUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("onlineStoreUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogQueryBuilder ExceptOnlineStoreUrl()
        {
            return ExceptField("onlineStoreUrl");
        }

        public BlogQueryBuilder WithSeo(SeoQueryBuilder seoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("seo", alias, seoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BlogQueryBuilder ExceptSeo()
        {
            return ExceptField("seo");
        }

        public BlogQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }
    }

    public class BlogConnectionQueryBuilder : GraphQlQueryBuilder<BlogConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(BlogEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(BlogQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "BlogConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BlogConnectionQueryBuilder WithEdges(BlogEdgeQueryBuilder blogEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, blogEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BlogConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public BlogConnectionQueryBuilder WithNodes(BlogQueryBuilder blogQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, blogQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BlogConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public BlogConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BlogConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class BlogEdgeQueryBuilder : GraphQlQueryBuilder<BlogEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(BlogQueryBuilder) }
            };

        protected override string TypeName { get { return "BlogEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BlogEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public BlogEdgeQueryBuilder WithNode(BlogQueryBuilder blogQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, blogQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BlogEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class BrandQueryBuilder : GraphQlQueryBuilder<BrandQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "colors", IsComplex = true, QueryBuilderType = typeof(BrandColorsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "coverImage", IsComplex = true, QueryBuilderType = typeof(MediaImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "logo", IsComplex = true, QueryBuilderType = typeof(MediaImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "shortDescription" },
                new GraphQlFieldMetadata { Name = "slogan" },
                new GraphQlFieldMetadata { Name = "squareLogo", IsComplex = true, QueryBuilderType = typeof(MediaImageQueryBuilder) }
            };

        protected override string TypeName { get { return "Brand"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BrandQueryBuilder WithColors(BrandColorsQueryBuilder brandColorsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("colors", alias, brandColorsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BrandQueryBuilder ExceptColors()
        {
            return ExceptField("colors");
        }

        public BrandQueryBuilder WithCoverImage(MediaImageQueryBuilder mediaImageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("coverImage", alias, mediaImageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BrandQueryBuilder ExceptCoverImage()
        {
            return ExceptField("coverImage");
        }

        public BrandQueryBuilder WithLogo(MediaImageQueryBuilder mediaImageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("logo", alias, mediaImageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BrandQueryBuilder ExceptLogo()
        {
            return ExceptField("logo");
        }

        public BrandQueryBuilder WithShortDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shortDescription", alias, new GraphQlDirective[] { include, skip });
        }

        public BrandQueryBuilder ExceptShortDescription()
        {
            return ExceptField("shortDescription");
        }

        public BrandQueryBuilder WithSlogan(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slogan", alias, new GraphQlDirective[] { include, skip });
        }

        public BrandQueryBuilder ExceptSlogan()
        {
            return ExceptField("slogan");
        }

        public BrandQueryBuilder WithSquareLogo(MediaImageQueryBuilder mediaImageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("squareLogo", alias, mediaImageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BrandQueryBuilder ExceptSquareLogo()
        {
            return ExceptField("squareLogo");
        }
    }

    public class BrandColorGroupQueryBuilder : GraphQlQueryBuilder<BrandColorGroupQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "background", IsComplex = true },
                new GraphQlFieldMetadata { Name = "foreground", IsComplex = true }
            };

        protected override string TypeName { get { return "BrandColorGroup"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BrandColorGroupQueryBuilder WithBackground(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("background", alias, new GraphQlDirective[] { include, skip });
        }

        public BrandColorGroupQueryBuilder ExceptBackground()
        {
            return ExceptField("background");
        }

        public BrandColorGroupQueryBuilder WithForeground(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("foreground", alias, new GraphQlDirective[] { include, skip });
        }

        public BrandColorGroupQueryBuilder ExceptForeground()
        {
            return ExceptField("foreground");
        }
    }

    public class BrandColorsQueryBuilder : GraphQlQueryBuilder<BrandColorsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "primary", IsComplex = true, QueryBuilderType = typeof(BrandColorGroupQueryBuilder) },
                new GraphQlFieldMetadata { Name = "secondary", IsComplex = true, QueryBuilderType = typeof(BrandColorGroupQueryBuilder) }
            };

        protected override string TypeName { get { return "BrandColors"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BrandColorsQueryBuilder WithPrimary(BrandColorGroupQueryBuilder brandColorGroupQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("primary", alias, brandColorGroupQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BrandColorsQueryBuilder ExceptPrimary()
        {
            return ExceptField("primary");
        }

        public BrandColorsQueryBuilder WithSecondary(BrandColorGroupQueryBuilder brandColorGroupQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("secondary", alias, brandColorGroupQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BrandColorsQueryBuilder ExceptSecondary()
        {
            return ExceptField("secondary");
        }
    }

    public class CartQueryBuilder : GraphQlQueryBuilder<CartQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "attribute", IsComplex = true, QueryBuilderType = typeof(AttributeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "attributes", IsComplex = true, QueryBuilderType = typeof(AttributeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buyerIdentity", IsComplex = true, QueryBuilderType = typeof(CartBuyerIdentityQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "cost", IsComplex = true, QueryBuilderType = typeof(CartCostQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "deliveryGroups", IsComplex = true, QueryBuilderType = typeof(CartDeliveryGroupConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "discountAllocations", IsComplex = true, QueryBuilderType = typeof(CartDiscountAllocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "discountCodes", IsComplex = true, QueryBuilderType = typeof(CartDiscountCodeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lines", IsComplex = true, QueryBuilderType = typeof(CartLineConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "note" },
                new GraphQlFieldMetadata { Name = "totalQuantity" },
                new GraphQlFieldMetadata { Name = "updatedAt" }
            };

        protected override string TypeName { get { return "Cart"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartQueryBuilder WithAttribute(AttributeQueryBuilder attributeQueryBuilder, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("attribute", alias, attributeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CartQueryBuilder ExceptAttribute()
        {
            return ExceptField("attribute");
        }

        public CartQueryBuilder WithAttributes(AttributeQueryBuilder attributeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("attributes", alias, attributeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptAttributes()
        {
            return ExceptField("attributes");
        }

        public CartQueryBuilder WithBuyerIdentity(CartBuyerIdentityQueryBuilder cartBuyerIdentityQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("buyerIdentity", alias, cartBuyerIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptBuyerIdentity()
        {
            return ExceptField("buyerIdentity");
        }

        public CartQueryBuilder WithCheckoutUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("checkoutUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptCheckoutUrl()
        {
            return ExceptField("checkoutUrl");
        }

        public CartQueryBuilder WithCost(CartCostQueryBuilder cartCostQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cost", alias, cartCostQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptCost()
        {
            return ExceptField("cost");
        }

        public CartQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public CartQueryBuilder WithDeliveryGroups(CartDeliveryGroupConnectionQueryBuilder cartDeliveryGroupConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("deliveryGroups", alias, cartDeliveryGroupConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CartQueryBuilder ExceptDeliveryGroups()
        {
            return ExceptField("deliveryGroups");
        }

        public CartQueryBuilder WithDiscountAllocations(CartDiscountAllocationQueryBuilder cartDiscountAllocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAllocations", alias, cartDiscountAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptDiscountAllocations()
        {
            return ExceptField("discountAllocations");
        }

        public CartQueryBuilder WithDiscountCodes(CartDiscountCodeQueryBuilder cartDiscountCodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountCodes", alias, cartDiscountCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptDiscountCodes()
        {
            return ExceptField("discountCodes");
        }

        public CartQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CartQueryBuilder WithLines(CartLineConnectionQueryBuilder cartLineConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("lines", alias, cartLineConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CartQueryBuilder ExceptLines()
        {
            return ExceptField("lines");
        }

        public CartQueryBuilder WithNote(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("note", alias, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptNote()
        {
            return ExceptField("note");
        }

        public CartQueryBuilder WithTotalQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalQuantity", alias, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptTotalQuantity()
        {
            return ExceptField("totalQuantity");
        }

        public CartQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CartQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }
    }

    public class CartAttributesUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CartAttributesUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(CartUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CartAttributesUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartAttributesUpdatePayloadQueryBuilder WithCart(CartQueryBuilder cartQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cart", alias, cartQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartAttributesUpdatePayloadQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public CartAttributesUpdatePayloadQueryBuilder WithUserErrors(CartUserErrorQueryBuilder cartUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, cartUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartAttributesUpdatePayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CartAutomaticDiscountAllocationQueryBuilder : GraphQlQueryBuilder<CartAutomaticDiscountAllocationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "discountedAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "title" }
            };

        protected override string TypeName { get { return "CartAutomaticDiscountAllocation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartAutomaticDiscountAllocationQueryBuilder WithDiscountedAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountedAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartAutomaticDiscountAllocationQueryBuilder ExceptDiscountedAmount()
        {
            return ExceptField("discountedAmount");
        }

        public CartAutomaticDiscountAllocationQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public CartAutomaticDiscountAllocationQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }
    }

    public class CartBuyerIdentityQueryBuilder : GraphQlQueryBuilder<CartBuyerIdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "countryCode" },
                new GraphQlFieldMetadata { Name = "customer", IsComplex = true, QueryBuilderType = typeof(CustomerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deliveryAddressPreferences", IsComplex = true, QueryBuilderType = typeof(DeliveryAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "phone" }
            };

        protected override string TypeName { get { return "CartBuyerIdentity"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartBuyerIdentityQueryBuilder WithCountryCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryCode", alias, new GraphQlDirective[] { include, skip });
        }

        public CartBuyerIdentityQueryBuilder ExceptCountryCode()
        {
            return ExceptField("countryCode");
        }

        public CartBuyerIdentityQueryBuilder WithCustomer(CustomerQueryBuilder customerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customer", alias, customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartBuyerIdentityQueryBuilder ExceptCustomer()
        {
            return ExceptField("customer");
        }

        public CartBuyerIdentityQueryBuilder WithDeliveryAddressPreferences(DeliveryAddressQueryBuilder deliveryAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deliveryAddressPreferences", alias, deliveryAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartBuyerIdentityQueryBuilder ExceptDeliveryAddressPreferences()
        {
            return ExceptField("deliveryAddressPreferences");
        }

        public CartBuyerIdentityQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public CartBuyerIdentityQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public CartBuyerIdentityQueryBuilder WithPhone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("phone", alias, new GraphQlDirective[] { include, skip });
        }

        public CartBuyerIdentityQueryBuilder ExceptPhone()
        {
            return ExceptField("phone");
        }
    }

    public class CartBuyerIdentityUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CartBuyerIdentityUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(CartUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CartBuyerIdentityUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartBuyerIdentityUpdatePayloadQueryBuilder WithCart(CartQueryBuilder cartQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cart", alias, cartQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartBuyerIdentityUpdatePayloadQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public CartBuyerIdentityUpdatePayloadQueryBuilder WithUserErrors(CartUserErrorQueryBuilder cartUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, cartUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartBuyerIdentityUpdatePayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CartCodeDiscountAllocationQueryBuilder : GraphQlQueryBuilder<CartCodeDiscountAllocationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "code" },
                new GraphQlFieldMetadata { Name = "discountedAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "CartCodeDiscountAllocation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartCodeDiscountAllocationQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public CartCodeDiscountAllocationQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public CartCodeDiscountAllocationQueryBuilder WithDiscountedAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountedAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartCodeDiscountAllocationQueryBuilder ExceptDiscountedAmount()
        {
            return ExceptField("discountedAmount");
        }
    }

    public class CartCostQueryBuilder : GraphQlQueryBuilder<CartCostQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkoutChargeAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "subtotalAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "subtotalAmountEstimated" },
                new GraphQlFieldMetadata { Name = "totalAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalAmountEstimated" },
                new GraphQlFieldMetadata { Name = "totalDutyAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalDutyAmountEstimated" },
                new GraphQlFieldMetadata { Name = "totalTaxAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalTaxAmountEstimated" }
            };

        protected override string TypeName { get { return "CartCost"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartCostQueryBuilder WithCheckoutChargeAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutChargeAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartCostQueryBuilder ExceptCheckoutChargeAmount()
        {
            return ExceptField("checkoutChargeAmount");
        }

        public CartCostQueryBuilder WithSubtotalAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("subtotalAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartCostQueryBuilder ExceptSubtotalAmount()
        {
            return ExceptField("subtotalAmount");
        }

        public CartCostQueryBuilder WithSubtotalAmountEstimated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("subtotalAmountEstimated", alias, new GraphQlDirective[] { include, skip });
        }

        public CartCostQueryBuilder ExceptSubtotalAmountEstimated()
        {
            return ExceptField("subtotalAmountEstimated");
        }

        public CartCostQueryBuilder WithTotalAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartCostQueryBuilder ExceptTotalAmount()
        {
            return ExceptField("totalAmount");
        }

        public CartCostQueryBuilder WithTotalAmountEstimated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalAmountEstimated", alias, new GraphQlDirective[] { include, skip });
        }

        public CartCostQueryBuilder ExceptTotalAmountEstimated()
        {
            return ExceptField("totalAmountEstimated");
        }

        public CartCostQueryBuilder WithTotalDutyAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalDutyAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartCostQueryBuilder ExceptTotalDutyAmount()
        {
            return ExceptField("totalDutyAmount");
        }

        public CartCostQueryBuilder WithTotalDutyAmountEstimated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalDutyAmountEstimated", alias, new GraphQlDirective[] { include, skip });
        }

        public CartCostQueryBuilder ExceptTotalDutyAmountEstimated()
        {
            return ExceptField("totalDutyAmountEstimated");
        }

        public CartCostQueryBuilder WithTotalTaxAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalTaxAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartCostQueryBuilder ExceptTotalTaxAmount()
        {
            return ExceptField("totalTaxAmount");
        }

        public CartCostQueryBuilder WithTotalTaxAmountEstimated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalTaxAmountEstimated", alias, new GraphQlDirective[] { include, skip });
        }

        public CartCostQueryBuilder ExceptTotalTaxAmountEstimated()
        {
            return ExceptField("totalTaxAmountEstimated");
        }
    }

    public class CartCreatePayloadQueryBuilder : GraphQlQueryBuilder<CartCreatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(CartUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CartCreatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartCreatePayloadQueryBuilder WithCart(CartQueryBuilder cartQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cart", alias, cartQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartCreatePayloadQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public CartCreatePayloadQueryBuilder WithUserErrors(CartUserErrorQueryBuilder cartUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, cartUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartCreatePayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CartCustomDiscountAllocationQueryBuilder : GraphQlQueryBuilder<CartCustomDiscountAllocationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "discountedAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "title" }
            };

        protected override string TypeName { get { return "CartCustomDiscountAllocation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartCustomDiscountAllocationQueryBuilder WithDiscountedAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountedAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartCustomDiscountAllocationQueryBuilder ExceptDiscountedAmount()
        {
            return ExceptField("discountedAmount");
        }

        public CartCustomDiscountAllocationQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public CartCustomDiscountAllocationQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }
    }

    public class CartDeliveryGroupQueryBuilder : GraphQlQueryBuilder<CartDeliveryGroupQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cartLines", IsComplex = true, QueryBuilderType = typeof(CartLineConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deliveryAddress", IsComplex = true, QueryBuilderType = typeof(MailingAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deliveryOptions", IsComplex = true, QueryBuilderType = typeof(CartDeliveryOptionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "selectedDeliveryOption", IsComplex = true, QueryBuilderType = typeof(CartDeliveryOptionQueryBuilder) }
            };

        protected override string TypeName { get { return "CartDeliveryGroup"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartDeliveryGroupQueryBuilder WithCartLines(CartLineConnectionQueryBuilder cartLineConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("cartLines", alias, cartLineConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CartDeliveryGroupQueryBuilder ExceptCartLines()
        {
            return ExceptField("cartLines");
        }

        public CartDeliveryGroupQueryBuilder WithDeliveryAddress(MailingAddressQueryBuilder mailingAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deliveryAddress", alias, mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryGroupQueryBuilder ExceptDeliveryAddress()
        {
            return ExceptField("deliveryAddress");
        }

        public CartDeliveryGroupQueryBuilder WithDeliveryOptions(CartDeliveryOptionQueryBuilder cartDeliveryOptionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deliveryOptions", alias, cartDeliveryOptionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryGroupQueryBuilder ExceptDeliveryOptions()
        {
            return ExceptField("deliveryOptions");
        }

        public CartDeliveryGroupQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryGroupQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CartDeliveryGroupQueryBuilder WithSelectedDeliveryOption(CartDeliveryOptionQueryBuilder cartDeliveryOptionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("selectedDeliveryOption", alias, cartDeliveryOptionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryGroupQueryBuilder ExceptSelectedDeliveryOption()
        {
            return ExceptField("selectedDeliveryOption");
        }
    }

    public class CartDeliveryGroupConnectionQueryBuilder : GraphQlQueryBuilder<CartDeliveryGroupConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(CartDeliveryGroupEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(CartDeliveryGroupQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "CartDeliveryGroupConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartDeliveryGroupConnectionQueryBuilder WithEdges(CartDeliveryGroupEdgeQueryBuilder cartDeliveryGroupEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, cartDeliveryGroupEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryGroupConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public CartDeliveryGroupConnectionQueryBuilder WithNodes(CartDeliveryGroupQueryBuilder cartDeliveryGroupQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, cartDeliveryGroupQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryGroupConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public CartDeliveryGroupConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryGroupConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class CartDeliveryGroupEdgeQueryBuilder : GraphQlQueryBuilder<CartDeliveryGroupEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(CartDeliveryGroupQueryBuilder) }
            };

        protected override string TypeName { get { return "CartDeliveryGroupEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartDeliveryGroupEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryGroupEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public CartDeliveryGroupEdgeQueryBuilder WithNode(CartDeliveryGroupQueryBuilder cartDeliveryGroupQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, cartDeliveryGroupQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryGroupEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class CartDeliveryOptionQueryBuilder : GraphQlQueryBuilder<CartDeliveryOptionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "code" },
                new GraphQlFieldMetadata { Name = "deliveryMethodType" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "estimatedCost", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "title" }
            };

        protected override string TypeName { get { return "CartDeliveryOption"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartDeliveryOptionQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryOptionQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public CartDeliveryOptionQueryBuilder WithDeliveryMethodType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deliveryMethodType", alias, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryOptionQueryBuilder ExceptDeliveryMethodType()
        {
            return ExceptField("deliveryMethodType");
        }

        public CartDeliveryOptionQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryOptionQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public CartDeliveryOptionQueryBuilder WithEstimatedCost(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("estimatedCost", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryOptionQueryBuilder ExceptEstimatedCost()
        {
            return ExceptField("estimatedCost");
        }

        public CartDeliveryOptionQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryOptionQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public CartDeliveryOptionQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public CartDeliveryOptionQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }
    }

    public class CartDiscountAllocationQueryBuilder : GraphQlQueryBuilder<CartDiscountAllocationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "discountedAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "CartDiscountAllocation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartDiscountAllocationQueryBuilder WithDiscountedAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountedAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDiscountAllocationQueryBuilder ExceptDiscountedAmount()
        {
            return ExceptField("discountedAmount");
        }

        public CartDiscountAllocationQueryBuilder WithCartAutomaticDiscountAllocationFragment(CartAutomaticDiscountAllocationQueryBuilder cartAutomaticDiscountAllocationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(cartAutomaticDiscountAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDiscountAllocationQueryBuilder WithCartCodeDiscountAllocationFragment(CartCodeDiscountAllocationQueryBuilder cartCodeDiscountAllocationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(cartCodeDiscountAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDiscountAllocationQueryBuilder WithCartCustomDiscountAllocationFragment(CartCustomDiscountAllocationQueryBuilder cartCustomDiscountAllocationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(cartCustomDiscountAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class CartDiscountCodeQueryBuilder : GraphQlQueryBuilder<CartDiscountCodeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "applicable" },
                new GraphQlFieldMetadata { Name = "code" }
            };

        protected override string TypeName { get { return "CartDiscountCode"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartDiscountCodeQueryBuilder WithApplicable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("applicable", alias, new GraphQlDirective[] { include, skip });
        }

        public CartDiscountCodeQueryBuilder ExceptApplicable()
        {
            return ExceptField("applicable");
        }

        public CartDiscountCodeQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public CartDiscountCodeQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }
    }

    public class CartDiscountCodesUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CartDiscountCodesUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(CartUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CartDiscountCodesUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartDiscountCodesUpdatePayloadQueryBuilder WithCart(CartQueryBuilder cartQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cart", alias, cartQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDiscountCodesUpdatePayloadQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public CartDiscountCodesUpdatePayloadQueryBuilder WithUserErrors(CartUserErrorQueryBuilder cartUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, cartUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartDiscountCodesUpdatePayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CartEstimatedCostQueryBuilder : GraphQlQueryBuilder<CartEstimatedCostQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkoutChargeAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "subtotalAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalDutyAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalTaxAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "CartEstimatedCost"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartEstimatedCostQueryBuilder WithCheckoutChargeAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutChargeAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartEstimatedCostQueryBuilder ExceptCheckoutChargeAmount()
        {
            return ExceptField("checkoutChargeAmount");
        }

        public CartEstimatedCostQueryBuilder WithSubtotalAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("subtotalAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartEstimatedCostQueryBuilder ExceptSubtotalAmount()
        {
            return ExceptField("subtotalAmount");
        }

        public CartEstimatedCostQueryBuilder WithTotalAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartEstimatedCostQueryBuilder ExceptTotalAmount()
        {
            return ExceptField("totalAmount");
        }

        public CartEstimatedCostQueryBuilder WithTotalDutyAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalDutyAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartEstimatedCostQueryBuilder ExceptTotalDutyAmount()
        {
            return ExceptField("totalDutyAmount");
        }

        public CartEstimatedCostQueryBuilder WithTotalTaxAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalTaxAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartEstimatedCostQueryBuilder ExceptTotalTaxAmount()
        {
            return ExceptField("totalTaxAmount");
        }
    }

    public class CartLineQueryBuilder : GraphQlQueryBuilder<CartLineQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "attribute", IsComplex = true, QueryBuilderType = typeof(AttributeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "attributes", IsComplex = true, QueryBuilderType = typeof(AttributeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cost", IsComplex = true, QueryBuilderType = typeof(CartLineCostQueryBuilder) },
                new GraphQlFieldMetadata { Name = "discountAllocations", IsComplex = true, QueryBuilderType = typeof(CartDiscountAllocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "merchandise", IsComplex = true, QueryBuilderType = typeof(MerchandiseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "quantity" },
                new GraphQlFieldMetadata { Name = "sellingPlanAllocation", IsComplex = true, QueryBuilderType = typeof(SellingPlanAllocationQueryBuilder) }
            };

        protected override string TypeName { get { return "CartLine"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartLineQueryBuilder WithAttribute(AttributeQueryBuilder attributeQueryBuilder, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("attribute", alias, attributeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CartLineQueryBuilder ExceptAttribute()
        {
            return ExceptField("attribute");
        }

        public CartLineQueryBuilder WithAttributes(AttributeQueryBuilder attributeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("attributes", alias, attributeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineQueryBuilder ExceptAttributes()
        {
            return ExceptField("attributes");
        }

        public CartLineQueryBuilder WithCost(CartLineCostQueryBuilder cartLineCostQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cost", alias, cartLineCostQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineQueryBuilder ExceptCost()
        {
            return ExceptField("cost");
        }

        public CartLineQueryBuilder WithDiscountAllocations(CartDiscountAllocationQueryBuilder cartDiscountAllocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAllocations", alias, cartDiscountAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineQueryBuilder ExceptDiscountAllocations()
        {
            return ExceptField("discountAllocations");
        }

        public CartLineQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CartLineQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CartLineQueryBuilder WithMerchandise(MerchandiseQueryBuilder merchandiseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("merchandise", alias, merchandiseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineQueryBuilder ExceptMerchandise()
        {
            return ExceptField("merchandise");
        }

        public CartLineQueryBuilder WithQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantity", alias, new GraphQlDirective[] { include, skip });
        }

        public CartLineQueryBuilder ExceptQuantity()
        {
            return ExceptField("quantity");
        }

        public CartLineQueryBuilder WithSellingPlanAllocation(SellingPlanAllocationQueryBuilder sellingPlanAllocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("sellingPlanAllocation", alias, sellingPlanAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineQueryBuilder ExceptSellingPlanAllocation()
        {
            return ExceptField("sellingPlanAllocation");
        }
    }

    public class CartLineConnectionQueryBuilder : GraphQlQueryBuilder<CartLineConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(CartLineEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(CartLineQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "CartLineConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartLineConnectionQueryBuilder WithEdges(CartLineEdgeQueryBuilder cartLineEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, cartLineEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public CartLineConnectionQueryBuilder WithNodes(CartLineQueryBuilder cartLineQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, cartLineQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public CartLineConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class CartLineCostQueryBuilder : GraphQlQueryBuilder<CartLineCostQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "amountPerQuantity", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "compareAtAmountPerQuantity", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "subtotalAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "CartLineCost"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartLineCostQueryBuilder WithAmountPerQuantity(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("amountPerQuantity", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineCostQueryBuilder ExceptAmountPerQuantity()
        {
            return ExceptField("amountPerQuantity");
        }

        public CartLineCostQueryBuilder WithCompareAtAmountPerQuantity(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("compareAtAmountPerQuantity", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineCostQueryBuilder ExceptCompareAtAmountPerQuantity()
        {
            return ExceptField("compareAtAmountPerQuantity");
        }

        public CartLineCostQueryBuilder WithSubtotalAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("subtotalAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineCostQueryBuilder ExceptSubtotalAmount()
        {
            return ExceptField("subtotalAmount");
        }

        public CartLineCostQueryBuilder WithTotalAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineCostQueryBuilder ExceptTotalAmount()
        {
            return ExceptField("totalAmount");
        }
    }

    public class CartLineEdgeQueryBuilder : GraphQlQueryBuilder<CartLineEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(CartLineQueryBuilder) }
            };

        protected override string TypeName { get { return "CartLineEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartLineEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public CartLineEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public CartLineEdgeQueryBuilder WithNode(CartLineQueryBuilder cartLineQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, cartLineQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class CartLineEstimatedCostQueryBuilder : GraphQlQueryBuilder<CartLineEstimatedCostQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "amount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "compareAtAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "subtotalAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "CartLineEstimatedCost"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartLineEstimatedCostQueryBuilder WithAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("amount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineEstimatedCostQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public CartLineEstimatedCostQueryBuilder WithCompareAtAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("compareAtAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineEstimatedCostQueryBuilder ExceptCompareAtAmount()
        {
            return ExceptField("compareAtAmount");
        }

        public CartLineEstimatedCostQueryBuilder WithSubtotalAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("subtotalAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineEstimatedCostQueryBuilder ExceptSubtotalAmount()
        {
            return ExceptField("subtotalAmount");
        }

        public CartLineEstimatedCostQueryBuilder WithTotalAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLineEstimatedCostQueryBuilder ExceptTotalAmount()
        {
            return ExceptField("totalAmount");
        }
    }

    public class CartLinesAddPayloadQueryBuilder : GraphQlQueryBuilder<CartLinesAddPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(CartUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CartLinesAddPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartLinesAddPayloadQueryBuilder WithCart(CartQueryBuilder cartQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cart", alias, cartQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLinesAddPayloadQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public CartLinesAddPayloadQueryBuilder WithUserErrors(CartUserErrorQueryBuilder cartUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, cartUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLinesAddPayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CartLinesRemovePayloadQueryBuilder : GraphQlQueryBuilder<CartLinesRemovePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(CartUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CartLinesRemovePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartLinesRemovePayloadQueryBuilder WithCart(CartQueryBuilder cartQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cart", alias, cartQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLinesRemovePayloadQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public CartLinesRemovePayloadQueryBuilder WithUserErrors(CartUserErrorQueryBuilder cartUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, cartUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLinesRemovePayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CartLinesUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CartLinesUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(CartUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CartLinesUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartLinesUpdatePayloadQueryBuilder WithCart(CartQueryBuilder cartQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cart", alias, cartQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLinesUpdatePayloadQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public CartLinesUpdatePayloadQueryBuilder WithUserErrors(CartUserErrorQueryBuilder cartUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, cartUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartLinesUpdatePayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CartNoteUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CartNoteUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(CartUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CartNoteUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartNoteUpdatePayloadQueryBuilder WithCart(CartQueryBuilder cartQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cart", alias, cartQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartNoteUpdatePayloadQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public CartNoteUpdatePayloadQueryBuilder WithUserErrors(CartUserErrorQueryBuilder cartUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, cartUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartNoteUpdatePayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CartSelectedDeliveryOptionsUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CartSelectedDeliveryOptionsUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(CartUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CartSelectedDeliveryOptionsUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartSelectedDeliveryOptionsUpdatePayloadQueryBuilder WithCart(CartQueryBuilder cartQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cart", alias, cartQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartSelectedDeliveryOptionsUpdatePayloadQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public CartSelectedDeliveryOptionsUpdatePayloadQueryBuilder WithUserErrors(CartUserErrorQueryBuilder cartUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, cartUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartSelectedDeliveryOptionsUpdatePayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CartUserErrorQueryBuilder : GraphQlQueryBuilder<CartUserErrorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "code" },
                new GraphQlFieldMetadata { Name = "field", IsComplex = true },
                new GraphQlFieldMetadata { Name = "message" }
            };

        protected override string TypeName { get { return "CartUserError"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CartUserErrorQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public CartUserErrorQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public CartUserErrorQueryBuilder WithField(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("field", alias, new GraphQlDirective[] { include, skip });
        }

        public CartUserErrorQueryBuilder ExceptField()
        {
            return ExceptField("field");
        }

        public CartUserErrorQueryBuilder WithMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("message", alias, new GraphQlDirective[] { include, skip });
        }

        public CartUserErrorQueryBuilder ExceptMessage()
        {
            return ExceptField("message");
        }
    }

    public class CheckoutQueryBuilder : GraphQlQueryBuilder<CheckoutQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "appliedGiftCards", IsComplex = true, QueryBuilderType = typeof(AppliedGiftCardQueryBuilder) },
                new GraphQlFieldMetadata { Name = "availableShippingRates", IsComplex = true, QueryBuilderType = typeof(AvailableShippingRatesQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buyerIdentity", IsComplex = true, QueryBuilderType = typeof(CheckoutBuyerIdentityQueryBuilder) },
                new GraphQlFieldMetadata { Name = "completedAt", IsComplex = true },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "currencyCode" },
                new GraphQlFieldMetadata { Name = "customAttributes", IsComplex = true, QueryBuilderType = typeof(AttributeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "discountApplications", IsComplex = true, QueryBuilderType = typeof(DiscountApplicationConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lineItems", IsComplex = true, QueryBuilderType = typeof(CheckoutLineItemConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lineItemsSubtotalPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "note" },
                new GraphQlFieldMetadata { Name = "order", IsComplex = true, QueryBuilderType = typeof(OrderQueryBuilder) },
                new GraphQlFieldMetadata { Name = "orderStatusUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "paymentDue", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "ready" },
                new GraphQlFieldMetadata { Name = "requiresShipping" },
                new GraphQlFieldMetadata { Name = "shippingAddress", IsComplex = true, QueryBuilderType = typeof(MailingAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "shippingDiscountAllocations", IsComplex = true, QueryBuilderType = typeof(DiscountAllocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "shippingLine", IsComplex = true, QueryBuilderType = typeof(ShippingRateQueryBuilder) },
                new GraphQlFieldMetadata { Name = "subtotalPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "taxExempt" },
                new GraphQlFieldMetadata { Name = "taxesIncluded" },
                new GraphQlFieldMetadata { Name = "totalDuties", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalTax", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "webUrl", IsComplex = true }
            };

        protected override string TypeName { get { return "Checkout"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutQueryBuilder WithAppliedGiftCards(AppliedGiftCardQueryBuilder appliedGiftCardQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("appliedGiftCards", alias, appliedGiftCardQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptAppliedGiftCards()
        {
            return ExceptField("appliedGiftCards");
        }

        public CheckoutQueryBuilder WithAvailableShippingRates(AvailableShippingRatesQueryBuilder availableShippingRatesQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("availableShippingRates", alias, availableShippingRatesQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptAvailableShippingRates()
        {
            return ExceptField("availableShippingRates");
        }

        public CheckoutQueryBuilder WithBuyerIdentity(CheckoutBuyerIdentityQueryBuilder checkoutBuyerIdentityQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("buyerIdentity", alias, checkoutBuyerIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptBuyerIdentity()
        {
            return ExceptField("buyerIdentity");
        }

        public CheckoutQueryBuilder WithCompletedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("completedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptCompletedAt()
        {
            return ExceptField("completedAt");
        }

        public CheckoutQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public CheckoutQueryBuilder WithCurrencyCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currencyCode", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptCurrencyCode()
        {
            return ExceptField("currencyCode");
        }

        public CheckoutQueryBuilder WithCustomAttributes(AttributeQueryBuilder attributeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customAttributes", alias, attributeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptCustomAttributes()
        {
            return ExceptField("customAttributes");
        }

        public CheckoutQueryBuilder WithDiscountApplications(DiscountApplicationConnectionQueryBuilder discountApplicationConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("discountApplications", alias, discountApplicationConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CheckoutQueryBuilder ExceptDiscountApplications()
        {
            return ExceptField("discountApplications");
        }

        public CheckoutQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public CheckoutQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CheckoutQueryBuilder WithLineItems(CheckoutLineItemConnectionQueryBuilder checkoutLineItemConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("lineItems", alias, checkoutLineItemConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CheckoutQueryBuilder ExceptLineItems()
        {
            return ExceptField("lineItems");
        }

        public CheckoutQueryBuilder WithLineItemsSubtotalPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lineItemsSubtotalPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptLineItemsSubtotalPrice()
        {
            return ExceptField("lineItemsSubtotalPrice");
        }

        public CheckoutQueryBuilder WithNote(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("note", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptNote()
        {
            return ExceptField("note");
        }

        public CheckoutQueryBuilder WithOrder(OrderQueryBuilder orderQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("order", alias, orderQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptOrder()
        {
            return ExceptField("order");
        }

        public CheckoutQueryBuilder WithOrderStatusUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("orderStatusUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptOrderStatusUrl()
        {
            return ExceptField("orderStatusUrl");
        }

        public CheckoutQueryBuilder WithPaymentDue(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("paymentDue", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptPaymentDue()
        {
            return ExceptField("paymentDue");
        }

        public CheckoutQueryBuilder WithReady(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ready", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptReady()
        {
            return ExceptField("ready");
        }

        public CheckoutQueryBuilder WithRequiresShipping(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requiresShipping", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptRequiresShipping()
        {
            return ExceptField("requiresShipping");
        }

        public CheckoutQueryBuilder WithShippingAddress(MailingAddressQueryBuilder mailingAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingAddress", alias, mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptShippingAddress()
        {
            return ExceptField("shippingAddress");
        }

        public CheckoutQueryBuilder WithShippingDiscountAllocations(DiscountAllocationQueryBuilder discountAllocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingDiscountAllocations", alias, discountAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptShippingDiscountAllocations()
        {
            return ExceptField("shippingDiscountAllocations");
        }

        public CheckoutQueryBuilder WithShippingLine(ShippingRateQueryBuilder shippingRateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingLine", alias, shippingRateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptShippingLine()
        {
            return ExceptField("shippingLine");
        }

        public CheckoutQueryBuilder WithSubtotalPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("subtotalPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptSubtotalPrice()
        {
            return ExceptField("subtotalPrice");
        }

        public CheckoutQueryBuilder WithTaxExempt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxExempt", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptTaxExempt()
        {
            return ExceptField("taxExempt");
        }

        public CheckoutQueryBuilder WithTaxesIncluded(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxesIncluded", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptTaxesIncluded()
        {
            return ExceptField("taxesIncluded");
        }

        public CheckoutQueryBuilder WithTotalDuties(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalDuties", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptTotalDuties()
        {
            return ExceptField("totalDuties");
        }

        public CheckoutQueryBuilder WithTotalPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptTotalPrice()
        {
            return ExceptField("totalPrice");
        }

        public CheckoutQueryBuilder WithTotalTax(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalTax", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptTotalTax()
        {
            return ExceptField("totalTax");
        }

        public CheckoutQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public CheckoutQueryBuilder WithWebUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutQueryBuilder ExceptWebUrl()
        {
            return ExceptField("webUrl");
        }
    }

    public class CheckoutAttributesUpdateV2PayloadQueryBuilder : GraphQlQueryBuilder<CheckoutAttributesUpdateV2PayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutAttributesUpdateV2Payload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutAttributesUpdateV2PayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutAttributesUpdateV2PayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutAttributesUpdateV2PayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutAttributesUpdateV2PayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutBuyerIdentityQueryBuilder : GraphQlQueryBuilder<CheckoutBuyerIdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "countryCode" }
            };

        protected override string TypeName { get { return "CheckoutBuyerIdentity"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutBuyerIdentityQueryBuilder WithCountryCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryCode", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutBuyerIdentityQueryBuilder ExceptCountryCode()
        {
            return ExceptField("countryCode");
        }
    }

    public class CheckoutCompleteFreePayloadQueryBuilder : GraphQlQueryBuilder<CheckoutCompleteFreePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutCompleteFreePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutCompleteFreePayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCompleteFreePayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutCompleteFreePayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCompleteFreePayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutCompleteWithCreditCardV2PayloadQueryBuilder : GraphQlQueryBuilder<CheckoutCompleteWithCreditCardV2PayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "payment", IsComplex = true, QueryBuilderType = typeof(PaymentQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutCompleteWithCreditCardV2Payload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutCompleteWithCreditCardV2PayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCompleteWithCreditCardV2PayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutCompleteWithCreditCardV2PayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCompleteWithCreditCardV2PayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }

        public CheckoutCompleteWithCreditCardV2PayloadQueryBuilder WithPayment(PaymentQueryBuilder paymentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("payment", alias, paymentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCompleteWithCreditCardV2PayloadQueryBuilder ExceptPayment()
        {
            return ExceptField("payment");
        }
    }

    public class CheckoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder : GraphQlQueryBuilder<CheckoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "payment", IsComplex = true, QueryBuilderType = typeof(PaymentQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutCompleteWithTokenizedPaymentV3Payload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }

        public CheckoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder WithPayment(PaymentQueryBuilder paymentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("payment", alias, paymentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder ExceptPayment()
        {
            return ExceptField("payment");
        }
    }

    public class CheckoutCreatePayloadQueryBuilder : GraphQlQueryBuilder<CheckoutCreatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "queueToken" }
            };

        protected override string TypeName { get { return "CheckoutCreatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutCreatePayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCreatePayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutCreatePayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCreatePayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }

        public CheckoutCreatePayloadQueryBuilder WithQueueToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("queueToken", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCreatePayloadQueryBuilder ExceptQueueToken()
        {
            return ExceptField("queueToken");
        }
    }

    public class CheckoutCustomerAssociateV2PayloadQueryBuilder : GraphQlQueryBuilder<CheckoutCustomerAssociateV2PayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customer", IsComplex = true, QueryBuilderType = typeof(CustomerQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutCustomerAssociateV2Payload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutCustomerAssociateV2PayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCustomerAssociateV2PayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutCustomerAssociateV2PayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCustomerAssociateV2PayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }

        public CheckoutCustomerAssociateV2PayloadQueryBuilder WithCustomer(CustomerQueryBuilder customerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customer", alias, customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCustomerAssociateV2PayloadQueryBuilder ExceptCustomer()
        {
            return ExceptField("customer");
        }
    }

    public class CheckoutCustomerDisassociateV2PayloadQueryBuilder : GraphQlQueryBuilder<CheckoutCustomerDisassociateV2PayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutCustomerDisassociateV2Payload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutCustomerDisassociateV2PayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCustomerDisassociateV2PayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutCustomerDisassociateV2PayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutCustomerDisassociateV2PayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutDiscountCodeApplyV2PayloadQueryBuilder : GraphQlQueryBuilder<CheckoutDiscountCodeApplyV2PayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutDiscountCodeApplyV2Payload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutDiscountCodeApplyV2PayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutDiscountCodeApplyV2PayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutDiscountCodeApplyV2PayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutDiscountCodeApplyV2PayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutDiscountCodeRemovePayloadQueryBuilder : GraphQlQueryBuilder<CheckoutDiscountCodeRemovePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutDiscountCodeRemovePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutDiscountCodeRemovePayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutDiscountCodeRemovePayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutDiscountCodeRemovePayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutDiscountCodeRemovePayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutEmailUpdateV2PayloadQueryBuilder : GraphQlQueryBuilder<CheckoutEmailUpdateV2PayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutEmailUpdateV2Payload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutEmailUpdateV2PayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutEmailUpdateV2PayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutEmailUpdateV2PayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutEmailUpdateV2PayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutGiftCardRemoveV2PayloadQueryBuilder : GraphQlQueryBuilder<CheckoutGiftCardRemoveV2PayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutGiftCardRemoveV2Payload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutGiftCardRemoveV2PayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutGiftCardRemoveV2PayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutGiftCardRemoveV2PayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutGiftCardRemoveV2PayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutGiftCardsAppendPayloadQueryBuilder : GraphQlQueryBuilder<CheckoutGiftCardsAppendPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutGiftCardsAppendPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutGiftCardsAppendPayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutGiftCardsAppendPayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutGiftCardsAppendPayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutGiftCardsAppendPayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutLineItemQueryBuilder : GraphQlQueryBuilder<CheckoutLineItemQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customAttributes", IsComplex = true, QueryBuilderType = typeof(AttributeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "discountAllocations", IsComplex = true, QueryBuilderType = typeof(DiscountAllocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "quantity" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "unitPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "variant", IsComplex = true, QueryBuilderType = typeof(ProductVariantQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutLineItem"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutLineItemQueryBuilder WithCustomAttributes(AttributeQueryBuilder attributeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customAttributes", alias, attributeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemQueryBuilder ExceptCustomAttributes()
        {
            return ExceptField("customAttributes");
        }

        public CheckoutLineItemQueryBuilder WithDiscountAllocations(DiscountAllocationQueryBuilder discountAllocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAllocations", alias, discountAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemQueryBuilder ExceptDiscountAllocations()
        {
            return ExceptField("discountAllocations");
        }

        public CheckoutLineItemQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CheckoutLineItemQueryBuilder WithQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantity", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemQueryBuilder ExceptQuantity()
        {
            return ExceptField("quantity");
        }

        public CheckoutLineItemQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public CheckoutLineItemQueryBuilder WithUnitPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("unitPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemQueryBuilder ExceptUnitPrice()
        {
            return ExceptField("unitPrice");
        }

        public CheckoutLineItemQueryBuilder WithVariant(ProductVariantQueryBuilder productVariantQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("variant", alias, productVariantQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemQueryBuilder ExceptVariant()
        {
            return ExceptField("variant");
        }
    }

    public class CheckoutLineItemConnectionQueryBuilder : GraphQlQueryBuilder<CheckoutLineItemConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(CheckoutLineItemEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(CheckoutLineItemQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutLineItemConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutLineItemConnectionQueryBuilder WithEdges(CheckoutLineItemEdgeQueryBuilder checkoutLineItemEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, checkoutLineItemEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public CheckoutLineItemConnectionQueryBuilder WithNodes(CheckoutLineItemQueryBuilder checkoutLineItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, checkoutLineItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public CheckoutLineItemConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class CheckoutLineItemEdgeQueryBuilder : GraphQlQueryBuilder<CheckoutLineItemEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(CheckoutLineItemQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutLineItemEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutLineItemEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public CheckoutLineItemEdgeQueryBuilder WithNode(CheckoutLineItemQueryBuilder checkoutLineItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, checkoutLineItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class CheckoutLineItemsAddPayloadQueryBuilder : GraphQlQueryBuilder<CheckoutLineItemsAddPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutLineItemsAddPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutLineItemsAddPayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemsAddPayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutLineItemsAddPayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemsAddPayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutLineItemsRemovePayloadQueryBuilder : GraphQlQueryBuilder<CheckoutLineItemsRemovePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutLineItemsRemovePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutLineItemsRemovePayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemsRemovePayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutLineItemsRemovePayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemsRemovePayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutLineItemsReplacePayloadQueryBuilder : GraphQlQueryBuilder<CheckoutLineItemsReplacePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutLineItemsReplacePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutLineItemsReplacePayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemsReplacePayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutLineItemsReplacePayloadQueryBuilder WithUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemsReplacePayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CheckoutLineItemsUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CheckoutLineItemsUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutLineItemsUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutLineItemsUpdatePayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemsUpdatePayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutLineItemsUpdatePayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutLineItemsUpdatePayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutShippingAddressUpdateV2PayloadQueryBuilder : GraphQlQueryBuilder<CheckoutShippingAddressUpdateV2PayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutShippingAddressUpdateV2Payload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutShippingAddressUpdateV2PayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutShippingAddressUpdateV2PayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutShippingAddressUpdateV2PayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutShippingAddressUpdateV2PayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutShippingLineUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CheckoutShippingLineUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutUserErrors", IsComplex = true, QueryBuilderType = typeof(CheckoutUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CheckoutShippingLineUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutShippingLineUpdatePayloadQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutShippingLineUpdatePayloadQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public CheckoutShippingLineUpdatePayloadQueryBuilder WithCheckoutUserErrors(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutUserErrors", alias, checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CheckoutShippingLineUpdatePayloadQueryBuilder ExceptCheckoutUserErrors()
        {
            return ExceptField("checkoutUserErrors");
        }
    }

    public class CheckoutUserErrorQueryBuilder : GraphQlQueryBuilder<CheckoutUserErrorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "code" },
                new GraphQlFieldMetadata { Name = "field", IsComplex = true },
                new GraphQlFieldMetadata { Name = "message" }
            };

        protected override string TypeName { get { return "CheckoutUserError"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckoutUserErrorQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutUserErrorQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public CheckoutUserErrorQueryBuilder WithField(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("field", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutUserErrorQueryBuilder ExceptField()
        {
            return ExceptField("field");
        }

        public CheckoutUserErrorQueryBuilder WithMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("message", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckoutUserErrorQueryBuilder ExceptMessage()
        {
            return ExceptField("message");
        }
    }

    public class CollectionQueryBuilder : GraphQlQueryBuilder<CollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "descriptionHtml", IsComplex = true },
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "image", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafield", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafields", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "onlineStoreUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "products", IsComplex = true, QueryBuilderType = typeof(ProductConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "seo", IsComplex = true, QueryBuilderType = typeof(SeoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "updatedAt" }
            };

        protected override string TypeName { get { return "Collection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CollectionQueryBuilder WithDescription(QueryBuilderParameter<int?> truncateAt = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (truncateAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "truncateAt", ArgumentValue = truncateAt} );

            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public CollectionQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public CollectionQueryBuilder WithDescriptionHtml(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("descriptionHtml", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptDescriptionHtml()
        {
            return ExceptField("descriptionHtml");
        }

        public CollectionQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public CollectionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CollectionQueryBuilder WithImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("image", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptImage()
        {
            return ExceptField("image");
        }

        public CollectionQueryBuilder WithMetafield(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<string> @namespace, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "namespace", ArgumentValue = @namespace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("metafield", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CollectionQueryBuilder ExceptMetafield()
        {
            return ExceptField("metafield");
        }

        public CollectionQueryBuilder WithMetafields(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<IEnumerable<HasMetafieldsIdentifier>> identifiers, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "identifiers", ArgumentValue = identifiers} );
            return WithObjectField("metafields", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CollectionQueryBuilder ExceptMetafields()
        {
            return ExceptField("metafields");
        }

        public CollectionQueryBuilder WithOnlineStoreUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("onlineStoreUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptOnlineStoreUrl()
        {
            return ExceptField("onlineStoreUrl");
        }

        public CollectionQueryBuilder WithProducts(ProductConnectionQueryBuilder productConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<ProductCollectionSortKeys?> sortKey = null, QueryBuilderParameter<IEnumerable<ProductFilter>> filters = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            return WithObjectField("products", alias, productConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CollectionQueryBuilder ExceptProducts()
        {
            return ExceptField("products");
        }

        public CollectionQueryBuilder WithSeo(SeoQueryBuilder seoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("seo", alias, seoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptSeo()
        {
            return ExceptField("seo");
        }

        public CollectionQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public CollectionQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }
    }

    public class CollectionConnectionQueryBuilder : GraphQlQueryBuilder<CollectionConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(CollectionEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "CollectionConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CollectionConnectionQueryBuilder WithEdges(CollectionEdgeQueryBuilder collectionEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, collectionEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public CollectionConnectionQueryBuilder WithNodes(CollectionQueryBuilder collectionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public CollectionConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class CollectionEdgeQueryBuilder : GraphQlQueryBuilder<CollectionEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) }
            };

        protected override string TypeName { get { return "CollectionEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CollectionEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public CollectionEdgeQueryBuilder WithNode(CollectionQueryBuilder collectionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class CommentQueryBuilder : GraphQlQueryBuilder<CommentQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "author", IsComplex = true, QueryBuilderType = typeof(CommentAuthorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "content" },
                new GraphQlFieldMetadata { Name = "contentHtml", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" }
            };

        protected override string TypeName { get { return "Comment"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CommentQueryBuilder WithAuthor(CommentAuthorQueryBuilder commentAuthorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("author", alias, commentAuthorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CommentQueryBuilder ExceptAuthor()
        {
            return ExceptField("author");
        }

        public CommentQueryBuilder WithContent(QueryBuilderParameter<int?> truncateAt = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (truncateAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "truncateAt", ArgumentValue = truncateAt} );

            return WithScalarField("content", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public CommentQueryBuilder ExceptContent()
        {
            return ExceptField("content");
        }

        public CommentQueryBuilder WithContentHtml(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("contentHtml", alias, new GraphQlDirective[] { include, skip });
        }

        public CommentQueryBuilder ExceptContentHtml()
        {
            return ExceptField("contentHtml");
        }

        public CommentQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CommentQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class CommentAuthorQueryBuilder : GraphQlQueryBuilder<CommentAuthorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "CommentAuthor"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CommentAuthorQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public CommentAuthorQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public CommentAuthorQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CommentAuthorQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class CommentConnectionQueryBuilder : GraphQlQueryBuilder<CommentConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(CommentEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(CommentQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "CommentConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CommentConnectionQueryBuilder WithEdges(CommentEdgeQueryBuilder commentEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, commentEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CommentConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public CommentConnectionQueryBuilder WithNodes(CommentQueryBuilder commentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, commentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CommentConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public CommentConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CommentConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class CommentEdgeQueryBuilder : GraphQlQueryBuilder<CommentEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(CommentQueryBuilder) }
            };

        protected override string TypeName { get { return "CommentEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CommentEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public CommentEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public CommentEdgeQueryBuilder WithNode(CommentQueryBuilder commentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, commentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CommentEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class CountryQueryBuilder : GraphQlQueryBuilder<CountryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "availableLanguages", IsComplex = true, QueryBuilderType = typeof(LanguageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "currency", IsComplex = true, QueryBuilderType = typeof(CurrencyQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isoCode" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "unitSystem" }
            };

        protected override string TypeName { get { return "Country"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CountryQueryBuilder WithAvailableLanguages(LanguageQueryBuilder languageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("availableLanguages", alias, languageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CountryQueryBuilder ExceptAvailableLanguages()
        {
            return ExceptField("availableLanguages");
        }

        public CountryQueryBuilder WithCurrency(CurrencyQueryBuilder currencyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("currency", alias, currencyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CountryQueryBuilder ExceptCurrency()
        {
            return ExceptField("currency");
        }

        public CountryQueryBuilder WithIsoCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isoCode", alias, new GraphQlDirective[] { include, skip });
        }

        public CountryQueryBuilder ExceptIsoCode()
        {
            return ExceptField("isoCode");
        }

        public CountryQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CountryQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CountryQueryBuilder WithUnitSystem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitSystem", alias, new GraphQlDirective[] { include, skip });
        }

        public CountryQueryBuilder ExceptUnitSystem()
        {
            return ExceptField("unitSystem");
        }
    }

    public class CreditCardQueryBuilder : GraphQlQueryBuilder<CreditCardQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "brand" },
                new GraphQlFieldMetadata { Name = "expiryMonth" },
                new GraphQlFieldMetadata { Name = "expiryYear" },
                new GraphQlFieldMetadata { Name = "firstDigits" },
                new GraphQlFieldMetadata { Name = "firstName" },
                new GraphQlFieldMetadata { Name = "lastDigits" },
                new GraphQlFieldMetadata { Name = "lastName" },
                new GraphQlFieldMetadata { Name = "maskedNumber" }
            };

        protected override string TypeName { get { return "CreditCard"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CreditCardQueryBuilder WithBrand(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("brand", alias, new GraphQlDirective[] { include, skip });
        }

        public CreditCardQueryBuilder ExceptBrand()
        {
            return ExceptField("brand");
        }

        public CreditCardQueryBuilder WithExpiryMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("expiryMonth", alias, new GraphQlDirective[] { include, skip });
        }

        public CreditCardQueryBuilder ExceptExpiryMonth()
        {
            return ExceptField("expiryMonth");
        }

        public CreditCardQueryBuilder WithExpiryYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("expiryYear", alias, new GraphQlDirective[] { include, skip });
        }

        public CreditCardQueryBuilder ExceptExpiryYear()
        {
            return ExceptField("expiryYear");
        }

        public CreditCardQueryBuilder WithFirstDigits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstDigits", alias, new GraphQlDirective[] { include, skip });
        }

        public CreditCardQueryBuilder ExceptFirstDigits()
        {
            return ExceptField("firstDigits");
        }

        public CreditCardQueryBuilder WithFirstName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstName", alias, new GraphQlDirective[] { include, skip });
        }

        public CreditCardQueryBuilder ExceptFirstName()
        {
            return ExceptField("firstName");
        }

        public CreditCardQueryBuilder WithLastDigits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastDigits", alias, new GraphQlDirective[] { include, skip });
        }

        public CreditCardQueryBuilder ExceptLastDigits()
        {
            return ExceptField("lastDigits");
        }

        public CreditCardQueryBuilder WithLastName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastName", alias, new GraphQlDirective[] { include, skip });
        }

        public CreditCardQueryBuilder ExceptLastName()
        {
            return ExceptField("lastName");
        }

        public CreditCardQueryBuilder WithMaskedNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maskedNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public CreditCardQueryBuilder ExceptMaskedNumber()
        {
            return ExceptField("maskedNumber");
        }
    }

    public class CurrencyQueryBuilder : GraphQlQueryBuilder<CurrencyQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isoCode" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "symbol" }
            };

        protected override string TypeName { get { return "Currency"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CurrencyQueryBuilder WithIsoCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isoCode", alias, new GraphQlDirective[] { include, skip });
        }

        public CurrencyQueryBuilder ExceptIsoCode()
        {
            return ExceptField("isoCode");
        }

        public CurrencyQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CurrencyQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CurrencyQueryBuilder WithSymbol(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("symbol", alias, new GraphQlDirective[] { include, skip });
        }

        public CurrencyQueryBuilder ExceptSymbol()
        {
            return ExceptField("symbol");
        }
    }

    public class CustomerQueryBuilder : GraphQlQueryBuilder<CustomerQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "acceptsMarketing" },
                new GraphQlFieldMetadata { Name = "addresses", IsComplex = true, QueryBuilderType = typeof(MailingAddressConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "defaultAddress", IsComplex = true, QueryBuilderType = typeof(MailingAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "firstName" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lastIncompleteCheckout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lastName" },
                new GraphQlFieldMetadata { Name = "metafield", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafields", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "numberOfOrders", IsComplex = true },
                new GraphQlFieldMetadata { Name = "orders", IsComplex = true, QueryBuilderType = typeof(OrderConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "phone" },
                new GraphQlFieldMetadata { Name = "tags", IsComplex = true },
                new GraphQlFieldMetadata { Name = "updatedAt" }
            };

        protected override string TypeName { get { return "Customer"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerQueryBuilder WithAcceptsMarketing(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("acceptsMarketing", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptAcceptsMarketing()
        {
            return ExceptField("acceptsMarketing");
        }

        public CustomerQueryBuilder WithAddresses(MailingAddressConnectionQueryBuilder mailingAddressConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("addresses", alias, mailingAddressConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CustomerQueryBuilder ExceptAddresses()
        {
            return ExceptField("addresses");
        }

        public CustomerQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public CustomerQueryBuilder WithDefaultAddress(MailingAddressQueryBuilder mailingAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("defaultAddress", alias, mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptDefaultAddress()
        {
            return ExceptField("defaultAddress");
        }

        public CustomerQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public CustomerQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public CustomerQueryBuilder WithFirstName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstName", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptFirstName()
        {
            return ExceptField("firstName");
        }

        public CustomerQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CustomerQueryBuilder WithLastIncompleteCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lastIncompleteCheckout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptLastIncompleteCheckout()
        {
            return ExceptField("lastIncompleteCheckout");
        }

        public CustomerQueryBuilder WithLastName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastName", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptLastName()
        {
            return ExceptField("lastName");
        }

        public CustomerQueryBuilder WithMetafield(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<string> @namespace, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "namespace", ArgumentValue = @namespace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("metafield", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CustomerQueryBuilder ExceptMetafield()
        {
            return ExceptField("metafield");
        }

        public CustomerQueryBuilder WithMetafields(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<IEnumerable<HasMetafieldsIdentifier>> identifiers, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "identifiers", ArgumentValue = identifiers} );
            return WithObjectField("metafields", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CustomerQueryBuilder ExceptMetafields()
        {
            return ExceptField("metafields");
        }

        public CustomerQueryBuilder WithNumberOfOrders(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numberOfOrders", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptNumberOfOrders()
        {
            return ExceptField("numberOfOrders");
        }

        public CustomerQueryBuilder WithOrders(OrderConnectionQueryBuilder orderConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<OrderSortKeys?> sortKey = null, QueryBuilderParameter<string> query = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            if (query != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "query", ArgumentValue = query} );

            return WithObjectField("orders", alias, orderConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CustomerQueryBuilder ExceptOrders()
        {
            return ExceptField("orders");
        }

        public CustomerQueryBuilder WithPhone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("phone", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptPhone()
        {
            return ExceptField("phone");
        }

        public CustomerQueryBuilder WithTags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tags", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptTags()
        {
            return ExceptField("tags");
        }

        public CustomerQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }
    }

    public class CustomerAccessTokenQueryBuilder : GraphQlQueryBuilder<CustomerAccessTokenQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "accessToken" },
                new GraphQlFieldMetadata { Name = "expiresAt", IsComplex = true }
            };

        protected override string TypeName { get { return "CustomerAccessToken"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerAccessTokenQueryBuilder WithAccessToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("accessToken", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenQueryBuilder ExceptAccessToken()
        {
            return ExceptField("accessToken");
        }

        public CustomerAccessTokenQueryBuilder WithExpiresAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("expiresAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenQueryBuilder ExceptExpiresAt()
        {
            return ExceptField("expiresAt");
        }
    }

    public class CustomerAccessTokenCreatePayloadQueryBuilder : GraphQlQueryBuilder<CustomerAccessTokenCreatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customerAccessToken", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerAccessTokenCreatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerAccessTokenCreatePayloadQueryBuilder WithCustomerAccessToken(CustomerAccessTokenQueryBuilder customerAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerAccessToken", alias, customerAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenCreatePayloadQueryBuilder ExceptCustomerAccessToken()
        {
            return ExceptField("customerAccessToken");
        }

        public CustomerAccessTokenCreatePayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenCreatePayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerAccessTokenCreateWithMultipassPayloadQueryBuilder : GraphQlQueryBuilder<CustomerAccessTokenCreateWithMultipassPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customerAccessToken", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerAccessTokenCreateWithMultipassPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerAccessTokenCreateWithMultipassPayloadQueryBuilder WithCustomerAccessToken(CustomerAccessTokenQueryBuilder customerAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerAccessToken", alias, customerAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenCreateWithMultipassPayloadQueryBuilder ExceptCustomerAccessToken()
        {
            return ExceptField("customerAccessToken");
        }

        public CustomerAccessTokenCreateWithMultipassPayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenCreateWithMultipassPayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerAccessTokenDeletePayloadQueryBuilder : GraphQlQueryBuilder<CustomerAccessTokenDeletePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "deletedAccessToken" },
                new GraphQlFieldMetadata { Name = "deletedCustomerAccessTokenId" },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(UserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerAccessTokenDeletePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerAccessTokenDeletePayloadQueryBuilder WithDeletedAccessToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deletedAccessToken", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenDeletePayloadQueryBuilder ExceptDeletedAccessToken()
        {
            return ExceptField("deletedAccessToken");
        }

        public CustomerAccessTokenDeletePayloadQueryBuilder WithDeletedCustomerAccessTokenId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deletedCustomerAccessTokenId", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenDeletePayloadQueryBuilder ExceptDeletedCustomerAccessTokenId()
        {
            return ExceptField("deletedCustomerAccessTokenId");
        }

        public CustomerAccessTokenDeletePayloadQueryBuilder WithUserErrors(UserErrorQueryBuilder userErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, userErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenDeletePayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CustomerAccessTokenRenewPayloadQueryBuilder : GraphQlQueryBuilder<CustomerAccessTokenRenewPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customerAccessToken", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "userErrors", IsComplex = true, QueryBuilderType = typeof(UserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerAccessTokenRenewPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerAccessTokenRenewPayloadQueryBuilder WithCustomerAccessToken(CustomerAccessTokenQueryBuilder customerAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerAccessToken", alias, customerAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenRenewPayloadQueryBuilder ExceptCustomerAccessToken()
        {
            return ExceptField("customerAccessToken");
        }

        public CustomerAccessTokenRenewPayloadQueryBuilder WithUserErrors(UserErrorQueryBuilder userErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userErrors", alias, userErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAccessTokenRenewPayloadQueryBuilder ExceptUserErrors()
        {
            return ExceptField("userErrors");
        }
    }

    public class CustomerActivateByUrlPayloadQueryBuilder : GraphQlQueryBuilder<CustomerActivateByUrlPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customer", IsComplex = true, QueryBuilderType = typeof(CustomerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAccessToken", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerActivateByUrlPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerActivateByUrlPayloadQueryBuilder WithCustomer(CustomerQueryBuilder customerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customer", alias, customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerActivateByUrlPayloadQueryBuilder ExceptCustomer()
        {
            return ExceptField("customer");
        }

        public CustomerActivateByUrlPayloadQueryBuilder WithCustomerAccessToken(CustomerAccessTokenQueryBuilder customerAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerAccessToken", alias, customerAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerActivateByUrlPayloadQueryBuilder ExceptCustomerAccessToken()
        {
            return ExceptField("customerAccessToken");
        }

        public CustomerActivateByUrlPayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerActivateByUrlPayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerActivatePayloadQueryBuilder : GraphQlQueryBuilder<CustomerActivatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customer", IsComplex = true, QueryBuilderType = typeof(CustomerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAccessToken", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerActivatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerActivatePayloadQueryBuilder WithCustomer(CustomerQueryBuilder customerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customer", alias, customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerActivatePayloadQueryBuilder ExceptCustomer()
        {
            return ExceptField("customer");
        }

        public CustomerActivatePayloadQueryBuilder WithCustomerAccessToken(CustomerAccessTokenQueryBuilder customerAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerAccessToken", alias, customerAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerActivatePayloadQueryBuilder ExceptCustomerAccessToken()
        {
            return ExceptField("customerAccessToken");
        }

        public CustomerActivatePayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerActivatePayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerAddressCreatePayloadQueryBuilder : GraphQlQueryBuilder<CustomerAddressCreatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customerAddress", IsComplex = true, QueryBuilderType = typeof(MailingAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerAddressCreatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerAddressCreatePayloadQueryBuilder WithCustomerAddress(MailingAddressQueryBuilder mailingAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerAddress", alias, mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAddressCreatePayloadQueryBuilder ExceptCustomerAddress()
        {
            return ExceptField("customerAddress");
        }

        public CustomerAddressCreatePayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAddressCreatePayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerAddressDeletePayloadQueryBuilder : GraphQlQueryBuilder<CustomerAddressDeletePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deletedCustomerAddressId" }
            };

        protected override string TypeName { get { return "CustomerAddressDeletePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerAddressDeletePayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAddressDeletePayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }

        public CustomerAddressDeletePayloadQueryBuilder WithDeletedCustomerAddressId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deletedCustomerAddressId", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerAddressDeletePayloadQueryBuilder ExceptDeletedCustomerAddressId()
        {
            return ExceptField("deletedCustomerAddressId");
        }
    }

    public class CustomerAddressUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CustomerAddressUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customerAddress", IsComplex = true, QueryBuilderType = typeof(MailingAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerAddressUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerAddressUpdatePayloadQueryBuilder WithCustomerAddress(MailingAddressQueryBuilder mailingAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerAddress", alias, mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAddressUpdatePayloadQueryBuilder ExceptCustomerAddress()
        {
            return ExceptField("customerAddress");
        }

        public CustomerAddressUpdatePayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerAddressUpdatePayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerCreatePayloadQueryBuilder : GraphQlQueryBuilder<CustomerCreatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customer", IsComplex = true, QueryBuilderType = typeof(CustomerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerCreatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerCreatePayloadQueryBuilder WithCustomer(CustomerQueryBuilder customerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customer", alias, customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerCreatePayloadQueryBuilder ExceptCustomer()
        {
            return ExceptField("customer");
        }

        public CustomerCreatePayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerCreatePayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerDefaultAddressUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CustomerDefaultAddressUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customer", IsComplex = true, QueryBuilderType = typeof(CustomerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerDefaultAddressUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerDefaultAddressUpdatePayloadQueryBuilder WithCustomer(CustomerQueryBuilder customerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customer", alias, customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerDefaultAddressUpdatePayloadQueryBuilder ExceptCustomer()
        {
            return ExceptField("customer");
        }

        public CustomerDefaultAddressUpdatePayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerDefaultAddressUpdatePayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerRecoverPayloadQueryBuilder : GraphQlQueryBuilder<CustomerRecoverPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerRecoverPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerRecoverPayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerRecoverPayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerResetByUrlPayloadQueryBuilder : GraphQlQueryBuilder<CustomerResetByUrlPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customer", IsComplex = true, QueryBuilderType = typeof(CustomerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAccessToken", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerResetByUrlPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerResetByUrlPayloadQueryBuilder WithCustomer(CustomerQueryBuilder customerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customer", alias, customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerResetByUrlPayloadQueryBuilder ExceptCustomer()
        {
            return ExceptField("customer");
        }

        public CustomerResetByUrlPayloadQueryBuilder WithCustomerAccessToken(CustomerAccessTokenQueryBuilder customerAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerAccessToken", alias, customerAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerResetByUrlPayloadQueryBuilder ExceptCustomerAccessToken()
        {
            return ExceptField("customerAccessToken");
        }

        public CustomerResetByUrlPayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerResetByUrlPayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerResetPayloadQueryBuilder : GraphQlQueryBuilder<CustomerResetPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customer", IsComplex = true, QueryBuilderType = typeof(CustomerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAccessToken", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerResetPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerResetPayloadQueryBuilder WithCustomer(CustomerQueryBuilder customerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customer", alias, customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerResetPayloadQueryBuilder ExceptCustomer()
        {
            return ExceptField("customer");
        }

        public CustomerResetPayloadQueryBuilder WithCustomerAccessToken(CustomerAccessTokenQueryBuilder customerAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerAccessToken", alias, customerAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerResetPayloadQueryBuilder ExceptCustomerAccessToken()
        {
            return ExceptField("customerAccessToken");
        }

        public CustomerResetPayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerResetPayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerUpdatePayloadQueryBuilder : GraphQlQueryBuilder<CustomerUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "customer", IsComplex = true, QueryBuilderType = typeof(CustomerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAccessToken", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUserErrors", IsComplex = true, QueryBuilderType = typeof(CustomerUserErrorQueryBuilder) }
            };

        protected override string TypeName { get { return "CustomerUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerUpdatePayloadQueryBuilder WithCustomer(CustomerQueryBuilder customerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customer", alias, customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerUpdatePayloadQueryBuilder ExceptCustomer()
        {
            return ExceptField("customer");
        }

        public CustomerUpdatePayloadQueryBuilder WithCustomerAccessToken(CustomerAccessTokenQueryBuilder customerAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerAccessToken", alias, customerAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerUpdatePayloadQueryBuilder ExceptCustomerAccessToken()
        {
            return ExceptField("customerAccessToken");
        }

        public CustomerUpdatePayloadQueryBuilder WithCustomerUserErrors(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customerUserErrors", alias, customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CustomerUpdatePayloadQueryBuilder ExceptCustomerUserErrors()
        {
            return ExceptField("customerUserErrors");
        }
    }

    public class CustomerUserErrorQueryBuilder : GraphQlQueryBuilder<CustomerUserErrorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "code" },
                new GraphQlFieldMetadata { Name = "field", IsComplex = true },
                new GraphQlFieldMetadata { Name = "message" }
            };

        protected override string TypeName { get { return "CustomerUserError"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CustomerUserErrorQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerUserErrorQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public CustomerUserErrorQueryBuilder WithField(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("field", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerUserErrorQueryBuilder ExceptField()
        {
            return ExceptField("field");
        }

        public CustomerUserErrorQueryBuilder WithMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("message", alias, new GraphQlDirective[] { include, skip });
        }

        public CustomerUserErrorQueryBuilder ExceptMessage()
        {
            return ExceptField("message");
        }
    }

    public class DeliveryAddressQueryBuilder : GraphQlQueryBuilder<DeliveryAddressQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        protected override string TypeName { get { return "DeliveryAddress"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeliveryAddressQueryBuilder WithMailingAddressFragment(MailingAddressQueryBuilder mailingAddressQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class DiscountAllocationQueryBuilder : GraphQlQueryBuilder<DiscountAllocationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "allocatedAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "discountApplication", IsComplex = true, QueryBuilderType = typeof(DiscountApplicationQueryBuilder) }
            };

        protected override string TypeName { get { return "DiscountAllocation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DiscountAllocationQueryBuilder WithAllocatedAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("allocatedAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountAllocationQueryBuilder ExceptAllocatedAmount()
        {
            return ExceptField("allocatedAmount");
        }

        public DiscountAllocationQueryBuilder WithDiscountApplication(DiscountApplicationQueryBuilder discountApplicationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountApplication", alias, discountApplicationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountAllocationQueryBuilder ExceptDiscountApplication()
        {
            return ExceptField("discountApplication");
        }
    }

    public class DiscountApplicationQueryBuilder : GraphQlQueryBuilder<DiscountApplicationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "allocationMethod" },
                new GraphQlFieldMetadata { Name = "targetSelection" },
                new GraphQlFieldMetadata { Name = "targetType" },
                new GraphQlFieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(PricingValueQueryBuilder) }
            };

        protected override string TypeName { get { return "DiscountApplication"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DiscountApplicationQueryBuilder WithAllocationMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allocationMethod", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationQueryBuilder ExceptAllocationMethod()
        {
            return ExceptField("allocationMethod");
        }

        public DiscountApplicationQueryBuilder WithTargetSelection(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetSelection", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationQueryBuilder ExceptTargetSelection()
        {
            return ExceptField("targetSelection");
        }

        public DiscountApplicationQueryBuilder WithTargetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetType", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationQueryBuilder ExceptTargetType()
        {
            return ExceptField("targetType");
        }

        public DiscountApplicationQueryBuilder WithValue(PricingValueQueryBuilder pricingValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, pricingValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public DiscountApplicationQueryBuilder WithAutomaticDiscountApplicationFragment(AutomaticDiscountApplicationQueryBuilder automaticDiscountApplicationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(automaticDiscountApplicationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationQueryBuilder WithDiscountCodeApplicationFragment(DiscountCodeApplicationQueryBuilder discountCodeApplicationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(discountCodeApplicationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationQueryBuilder WithManualDiscountApplicationFragment(ManualDiscountApplicationQueryBuilder manualDiscountApplicationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(manualDiscountApplicationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationQueryBuilder WithScriptDiscountApplicationFragment(ScriptDiscountApplicationQueryBuilder scriptDiscountApplicationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(scriptDiscountApplicationQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class DiscountApplicationConnectionQueryBuilder : GraphQlQueryBuilder<DiscountApplicationConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(DiscountApplicationEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(DiscountApplicationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "DiscountApplicationConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DiscountApplicationConnectionQueryBuilder WithEdges(DiscountApplicationEdgeQueryBuilder discountApplicationEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, discountApplicationEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public DiscountApplicationConnectionQueryBuilder WithNodes(DiscountApplicationQueryBuilder discountApplicationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, discountApplicationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public DiscountApplicationConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class DiscountApplicationEdgeQueryBuilder : GraphQlQueryBuilder<DiscountApplicationEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(DiscountApplicationQueryBuilder) }
            };

        protected override string TypeName { get { return "DiscountApplicationEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DiscountApplicationEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public DiscountApplicationEdgeQueryBuilder WithNode(DiscountApplicationQueryBuilder discountApplicationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, discountApplicationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountApplicationEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class DiscountCodeApplicationQueryBuilder : GraphQlQueryBuilder<DiscountCodeApplicationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "allocationMethod" },
                new GraphQlFieldMetadata { Name = "applicable" },
                new GraphQlFieldMetadata { Name = "code" },
                new GraphQlFieldMetadata { Name = "targetSelection" },
                new GraphQlFieldMetadata { Name = "targetType" },
                new GraphQlFieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(PricingValueQueryBuilder) }
            };

        protected override string TypeName { get { return "DiscountCodeApplication"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DiscountCodeApplicationQueryBuilder WithAllocationMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allocationMethod", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountCodeApplicationQueryBuilder ExceptAllocationMethod()
        {
            return ExceptField("allocationMethod");
        }

        public DiscountCodeApplicationQueryBuilder WithApplicable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("applicable", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountCodeApplicationQueryBuilder ExceptApplicable()
        {
            return ExceptField("applicable");
        }

        public DiscountCodeApplicationQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountCodeApplicationQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public DiscountCodeApplicationQueryBuilder WithTargetSelection(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetSelection", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountCodeApplicationQueryBuilder ExceptTargetSelection()
        {
            return ExceptField("targetSelection");
        }

        public DiscountCodeApplicationQueryBuilder WithTargetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetType", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountCodeApplicationQueryBuilder ExceptTargetType()
        {
            return ExceptField("targetType");
        }

        public DiscountCodeApplicationQueryBuilder WithValue(PricingValueQueryBuilder pricingValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, pricingValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountCodeApplicationQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class DisplayableErrorQueryBuilder : GraphQlQueryBuilder<DisplayableErrorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "field", IsComplex = true },
                new GraphQlFieldMetadata { Name = "message" }
            };

        protected override string TypeName { get { return "DisplayableError"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DisplayableErrorQueryBuilder WithField(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("field", alias, new GraphQlDirective[] { include, skip });
        }

        public DisplayableErrorQueryBuilder ExceptField()
        {
            return ExceptField("field");
        }

        public DisplayableErrorQueryBuilder WithMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("message", alias, new GraphQlDirective[] { include, skip });
        }

        public DisplayableErrorQueryBuilder ExceptMessage()
        {
            return ExceptField("message");
        }

        public DisplayableErrorQueryBuilder WithCartUserErrorFragment(CartUserErrorQueryBuilder cartUserErrorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(cartUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DisplayableErrorQueryBuilder WithCheckoutUserErrorFragment(CheckoutUserErrorQueryBuilder checkoutUserErrorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(checkoutUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DisplayableErrorQueryBuilder WithCustomerUserErrorFragment(CustomerUserErrorQueryBuilder customerUserErrorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(customerUserErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DisplayableErrorQueryBuilder WithUserErrorFragment(UserErrorQueryBuilder userErrorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(userErrorQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class DomainQueryBuilder : GraphQlQueryBuilder<DomainQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "host" },
                new GraphQlFieldMetadata { Name = "sslEnabled" },
                new GraphQlFieldMetadata { Name = "url", IsComplex = true }
            };

        protected override string TypeName { get { return "Domain"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DomainQueryBuilder WithHost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("host", alias, new GraphQlDirective[] { include, skip });
        }

        public DomainQueryBuilder ExceptHost()
        {
            return ExceptField("host");
        }

        public DomainQueryBuilder WithSslEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sslEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public DomainQueryBuilder ExceptSslEnabled()
        {
            return ExceptField("sslEnabled");
        }

        public DomainQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public DomainQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public class ExternalVideoQueryBuilder : GraphQlQueryBuilder<ExternalVideoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "alt" },
                new GraphQlFieldMetadata { Name = "embedUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "host" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "mediaContentType" },
                new GraphQlFieldMetadata { Name = "originUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "previewImage", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) }
            };

        protected override string TypeName { get { return "ExternalVideo"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ExternalVideoQueryBuilder WithAlt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("alt", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalVideoQueryBuilder ExceptAlt()
        {
            return ExceptField("alt");
        }

        public ExternalVideoQueryBuilder WithEmbedUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("embedUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalVideoQueryBuilder ExceptEmbedUrl()
        {
            return ExceptField("embedUrl");
        }

        public ExternalVideoQueryBuilder WithHost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("host", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalVideoQueryBuilder ExceptHost()
        {
            return ExceptField("host");
        }

        public ExternalVideoQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalVideoQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ExternalVideoQueryBuilder WithMediaContentType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaContentType", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalVideoQueryBuilder ExceptMediaContentType()
        {
            return ExceptField("mediaContentType");
        }

        public ExternalVideoQueryBuilder WithOriginUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("originUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalVideoQueryBuilder ExceptOriginUrl()
        {
            return ExceptField("originUrl");
        }

        public ExternalVideoQueryBuilder WithPreviewImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("previewImage", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExternalVideoQueryBuilder ExceptPreviewImage()
        {
            return ExceptField("previewImage");
        }
    }

    public class FilterQueryBuilder : GraphQlQueryBuilder<FilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "label" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "values", IsComplex = true, QueryBuilderType = typeof(FilterValueQueryBuilder) }
            };

        protected override string TypeName { get { return "Filter"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FilterQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FilterQueryBuilder WithLabel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("label", alias, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder ExceptLabel()
        {
            return ExceptField("label");
        }

        public FilterQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public FilterQueryBuilder WithValues(FilterValueQueryBuilder filterValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("values", alias, filterValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder ExceptValues()
        {
            return ExceptField("values");
        }
    }

    public class FilterValueQueryBuilder : GraphQlQueryBuilder<FilterValueQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "count" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "input", IsComplex = true },
                new GraphQlFieldMetadata { Name = "label" }
            };

        protected override string TypeName { get { return "FilterValue"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FilterValueQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public FilterValueQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public FilterValueQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FilterValueQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FilterValueQueryBuilder WithInput(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("input", alias, new GraphQlDirective[] { include, skip });
        }

        public FilterValueQueryBuilder ExceptInput()
        {
            return ExceptField("input");
        }

        public FilterValueQueryBuilder WithLabel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("label", alias, new GraphQlDirective[] { include, skip });
        }

        public FilterValueQueryBuilder ExceptLabel()
        {
            return ExceptField("label");
        }
    }

    public class FulfillmentQueryBuilder : GraphQlQueryBuilder<FulfillmentQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "fulfillmentLineItems", IsComplex = true, QueryBuilderType = typeof(FulfillmentLineItemConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "trackingCompany" },
                new GraphQlFieldMetadata { Name = "trackingInfo", IsComplex = true, QueryBuilderType = typeof(FulfillmentTrackingInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "Fulfillment"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FulfillmentQueryBuilder WithFulfillmentLineItems(FulfillmentLineItemConnectionQueryBuilder fulfillmentLineItemConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("fulfillmentLineItems", alias, fulfillmentLineItemConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FulfillmentQueryBuilder ExceptFulfillmentLineItems()
        {
            return ExceptField("fulfillmentLineItems");
        }

        public FulfillmentQueryBuilder WithTrackingCompany(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("trackingCompany", alias, new GraphQlDirective[] { include, skip });
        }

        public FulfillmentQueryBuilder ExceptTrackingCompany()
        {
            return ExceptField("trackingCompany");
        }

        public FulfillmentQueryBuilder WithTrackingInfo(FulfillmentTrackingInfoQueryBuilder fulfillmentTrackingInfoQueryBuilder, QueryBuilderParameter<int?> first = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            return WithObjectField("trackingInfo", alias, fulfillmentTrackingInfoQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FulfillmentQueryBuilder ExceptTrackingInfo()
        {
            return ExceptField("trackingInfo");
        }
    }

    public class FulfillmentLineItemQueryBuilder : GraphQlQueryBuilder<FulfillmentLineItemQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "lineItem", IsComplex = true, QueryBuilderType = typeof(OrderLineItemQueryBuilder) },
                new GraphQlFieldMetadata { Name = "quantity" }
            };

        protected override string TypeName { get { return "FulfillmentLineItem"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FulfillmentLineItemQueryBuilder WithLineItem(OrderLineItemQueryBuilder orderLineItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lineItem", alias, orderLineItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FulfillmentLineItemQueryBuilder ExceptLineItem()
        {
            return ExceptField("lineItem");
        }

        public FulfillmentLineItemQueryBuilder WithQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantity", alias, new GraphQlDirective[] { include, skip });
        }

        public FulfillmentLineItemQueryBuilder ExceptQuantity()
        {
            return ExceptField("quantity");
        }
    }

    public class FulfillmentLineItemConnectionQueryBuilder : GraphQlQueryBuilder<FulfillmentLineItemConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(FulfillmentLineItemEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(FulfillmentLineItemQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "FulfillmentLineItemConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FulfillmentLineItemConnectionQueryBuilder WithEdges(FulfillmentLineItemEdgeQueryBuilder fulfillmentLineItemEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, fulfillmentLineItemEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FulfillmentLineItemConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public FulfillmentLineItemConnectionQueryBuilder WithNodes(FulfillmentLineItemQueryBuilder fulfillmentLineItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, fulfillmentLineItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FulfillmentLineItemConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public FulfillmentLineItemConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FulfillmentLineItemConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class FulfillmentLineItemEdgeQueryBuilder : GraphQlQueryBuilder<FulfillmentLineItemEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(FulfillmentLineItemQueryBuilder) }
            };

        protected override string TypeName { get { return "FulfillmentLineItemEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FulfillmentLineItemEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public FulfillmentLineItemEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public FulfillmentLineItemEdgeQueryBuilder WithNode(FulfillmentLineItemQueryBuilder fulfillmentLineItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, fulfillmentLineItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FulfillmentLineItemEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class FulfillmentTrackingInfoQueryBuilder : GraphQlQueryBuilder<FulfillmentTrackingInfoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "number" },
                new GraphQlFieldMetadata { Name = "url", IsComplex = true }
            };

        protected override string TypeName { get { return "FulfillmentTrackingInfo"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FulfillmentTrackingInfoQueryBuilder WithNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("number", alias, new GraphQlDirective[] { include, skip });
        }

        public FulfillmentTrackingInfoQueryBuilder ExceptNumber()
        {
            return ExceptField("number");
        }

        public FulfillmentTrackingInfoQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public FulfillmentTrackingInfoQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public class GenericFileQueryBuilder : GraphQlQueryBuilder<GenericFileQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "alt" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "mimeType" },
                new GraphQlFieldMetadata { Name = "originalFileSize" },
                new GraphQlFieldMetadata { Name = "previewImage", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "url", IsComplex = true }
            };

        protected override string TypeName { get { return "GenericFile"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GenericFileQueryBuilder WithAlt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("alt", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericFileQueryBuilder ExceptAlt()
        {
            return ExceptField("alt");
        }

        public GenericFileQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericFileQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GenericFileQueryBuilder WithMimeType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mimeType", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericFileQueryBuilder ExceptMimeType()
        {
            return ExceptField("mimeType");
        }

        public GenericFileQueryBuilder WithOriginalFileSize(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("originalFileSize", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericFileQueryBuilder ExceptOriginalFileSize()
        {
            return ExceptField("originalFileSize");
        }

        public GenericFileQueryBuilder WithPreviewImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("previewImage", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericFileQueryBuilder ExceptPreviewImage()
        {
            return ExceptField("previewImage");
        }

        public GenericFileQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericFileQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public class HasMetafieldsQueryBuilder : GraphQlQueryBuilder<HasMetafieldsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "metafield", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafields", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) }
            };

        protected override string TypeName { get { return "HasMetafields"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HasMetafieldsQueryBuilder WithMetafield(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<string> @namespace, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "namespace", ArgumentValue = @namespace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("metafield", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HasMetafieldsQueryBuilder ExceptMetafield()
        {
            return ExceptField("metafield");
        }

        public HasMetafieldsQueryBuilder WithMetafields(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<IEnumerable<HasMetafieldsIdentifier>> identifiers, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "identifiers", ArgumentValue = identifiers} );
            return WithObjectField("metafields", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HasMetafieldsQueryBuilder ExceptMetafields()
        {
            return ExceptField("metafields");
        }

        public HasMetafieldsQueryBuilder WithArticleFragment(ArticleQueryBuilder articleQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(articleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasMetafieldsQueryBuilder WithBlogFragment(BlogQueryBuilder blogQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(blogQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasMetafieldsQueryBuilder WithCollectionFragment(CollectionQueryBuilder collectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasMetafieldsQueryBuilder WithCustomerFragment(CustomerQueryBuilder customerQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasMetafieldsQueryBuilder WithOrderFragment(OrderQueryBuilder orderQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(orderQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasMetafieldsQueryBuilder WithPageFragment(PageQueryBuilder pageQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(pageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasMetafieldsQueryBuilder WithProductFragment(ProductQueryBuilder productQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasMetafieldsQueryBuilder WithProductVariantFragment(ProductVariantQueryBuilder productVariantQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productVariantQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasMetafieldsQueryBuilder WithShopFragment(ShopQueryBuilder shopQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(shopQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ImageQueryBuilder : GraphQlQueryBuilder<ImageQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "altText" },
                new GraphQlFieldMetadata { Name = "height" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "url", IsComplex = true },
                new GraphQlFieldMetadata { Name = "width" }
            };

        protected override string TypeName { get { return "Image"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ImageQueryBuilder WithAltText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("altText", alias, new GraphQlDirective[] { include, skip });
        }

        public ImageQueryBuilder ExceptAltText()
        {
            return ExceptField("altText");
        }

        public ImageQueryBuilder WithHeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("height", alias, new GraphQlDirective[] { include, skip });
        }

        public ImageQueryBuilder ExceptHeight()
        {
            return ExceptField("height");
        }

        public ImageQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ImageQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ImageQueryBuilder WithUrl(QueryBuilderParameter<ImageTransformInput> transform = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (transform != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "transform", ArgumentValue = transform} );

            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ImageQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public ImageQueryBuilder WithWidth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("width", alias, new GraphQlDirective[] { include, skip });
        }

        public ImageQueryBuilder ExceptWidth()
        {
            return ExceptField("width");
        }
    }

    public class ImageConnectionQueryBuilder : GraphQlQueryBuilder<ImageConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(ImageEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "ImageConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ImageConnectionQueryBuilder WithEdges(ImageEdgeQueryBuilder imageEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, imageEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ImageConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public ImageConnectionQueryBuilder WithNodes(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ImageConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ImageConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ImageConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class ImageEdgeQueryBuilder : GraphQlQueryBuilder<ImageEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) }
            };

        protected override string TypeName { get { return "ImageEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ImageEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public ImageEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public ImageEdgeQueryBuilder WithNode(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ImageEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class LanguageQueryBuilder : GraphQlQueryBuilder<LanguageQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "endonymName" },
                new GraphQlFieldMetadata { Name = "isoCode" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "Language"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LanguageQueryBuilder WithEndonymName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endonymName", alias, new GraphQlDirective[] { include, skip });
        }

        public LanguageQueryBuilder ExceptEndonymName()
        {
            return ExceptField("endonymName");
        }

        public LanguageQueryBuilder WithIsoCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isoCode", alias, new GraphQlDirective[] { include, skip });
        }

        public LanguageQueryBuilder ExceptIsoCode()
        {
            return ExceptField("isoCode");
        }

        public LanguageQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LanguageQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class LocalizationQueryBuilder : GraphQlQueryBuilder<LocalizationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "availableCountries", IsComplex = true, QueryBuilderType = typeof(CountryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "availableLanguages", IsComplex = true, QueryBuilderType = typeof(LanguageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "country", IsComplex = true, QueryBuilderType = typeof(CountryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "language", IsComplex = true, QueryBuilderType = typeof(LanguageQueryBuilder) }
            };

        protected override string TypeName { get { return "Localization"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LocalizationQueryBuilder WithAvailableCountries(CountryQueryBuilder countryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("availableCountries", alias, countryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LocalizationQueryBuilder ExceptAvailableCountries()
        {
            return ExceptField("availableCountries");
        }

        public LocalizationQueryBuilder WithAvailableLanguages(LanguageQueryBuilder languageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("availableLanguages", alias, languageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LocalizationQueryBuilder ExceptAvailableLanguages()
        {
            return ExceptField("availableLanguages");
        }

        public LocalizationQueryBuilder WithCountry(CountryQueryBuilder countryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("country", alias, countryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LocalizationQueryBuilder ExceptCountry()
        {
            return ExceptField("country");
        }

        public LocalizationQueryBuilder WithLanguage(LanguageQueryBuilder languageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("language", alias, languageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LocalizationQueryBuilder ExceptLanguage()
        {
            return ExceptField("language");
        }
    }

    public class LocationQueryBuilder : GraphQlQueryBuilder<LocationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(LocationAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "Location"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LocationQueryBuilder WithAddress(LocationAddressQueryBuilder locationAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("address", alias, locationAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LocationQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }

        public LocationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LocationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class LocationAddressQueryBuilder : GraphQlQueryBuilder<LocationAddressQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "address1" },
                new GraphQlFieldMetadata { Name = "address2" },
                new GraphQlFieldMetadata { Name = "city" },
                new GraphQlFieldMetadata { Name = "country" },
                new GraphQlFieldMetadata { Name = "countryCode" },
                new GraphQlFieldMetadata { Name = "formatted", IsComplex = true },
                new GraphQlFieldMetadata { Name = "latitude" },
                new GraphQlFieldMetadata { Name = "longitude" },
                new GraphQlFieldMetadata { Name = "phone" },
                new GraphQlFieldMetadata { Name = "province" },
                new GraphQlFieldMetadata { Name = "provinceCode" },
                new GraphQlFieldMetadata { Name = "zip" }
            };

        protected override string TypeName { get { return "LocationAddress"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LocationAddressQueryBuilder WithAddress1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("address1", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptAddress1()
        {
            return ExceptField("address1");
        }

        public LocationAddressQueryBuilder WithAddress2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("address2", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptAddress2()
        {
            return ExceptField("address2");
        }

        public LocationAddressQueryBuilder WithCity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("city", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptCity()
        {
            return ExceptField("city");
        }

        public LocationAddressQueryBuilder WithCountry(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("country", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptCountry()
        {
            return ExceptField("country");
        }

        public LocationAddressQueryBuilder WithCountryCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryCode", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptCountryCode()
        {
            return ExceptField("countryCode");
        }

        public LocationAddressQueryBuilder WithFormatted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("formatted", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptFormatted()
        {
            return ExceptField("formatted");
        }

        public LocationAddressQueryBuilder WithLatitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("latitude", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptLatitude()
        {
            return ExceptField("latitude");
        }

        public LocationAddressQueryBuilder WithLongitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("longitude", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptLongitude()
        {
            return ExceptField("longitude");
        }

        public LocationAddressQueryBuilder WithPhone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("phone", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptPhone()
        {
            return ExceptField("phone");
        }

        public LocationAddressQueryBuilder WithProvince(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("province", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptProvince()
        {
            return ExceptField("province");
        }

        public LocationAddressQueryBuilder WithProvinceCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("provinceCode", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptProvinceCode()
        {
            return ExceptField("provinceCode");
        }

        public LocationAddressQueryBuilder WithZip(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("zip", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationAddressQueryBuilder ExceptZip()
        {
            return ExceptField("zip");
        }
    }

    public class LocationConnectionQueryBuilder : GraphQlQueryBuilder<LocationConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(LocationEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(LocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "LocationConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LocationConnectionQueryBuilder WithEdges(LocationEdgeQueryBuilder locationEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, locationEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LocationConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public LocationConnectionQueryBuilder WithNodes(LocationQueryBuilder locationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, locationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LocationConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public LocationConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LocationConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class LocationEdgeQueryBuilder : GraphQlQueryBuilder<LocationEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(LocationQueryBuilder) }
            };

        protected override string TypeName { get { return "LocationEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LocationEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public LocationEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public LocationEdgeQueryBuilder WithNode(LocationQueryBuilder locationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, locationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LocationEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class MailingAddressQueryBuilder : GraphQlQueryBuilder<MailingAddressQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "address1" },
                new GraphQlFieldMetadata { Name = "address2" },
                new GraphQlFieldMetadata { Name = "city" },
                new GraphQlFieldMetadata { Name = "company" },
                new GraphQlFieldMetadata { Name = "country" },
                new GraphQlFieldMetadata { Name = "countryCodeV2" },
                new GraphQlFieldMetadata { Name = "firstName" },
                new GraphQlFieldMetadata { Name = "formatted", IsComplex = true },
                new GraphQlFieldMetadata { Name = "formattedArea" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lastName" },
                new GraphQlFieldMetadata { Name = "latitude" },
                new GraphQlFieldMetadata { Name = "longitude" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "phone" },
                new GraphQlFieldMetadata { Name = "province" },
                new GraphQlFieldMetadata { Name = "provinceCode" },
                new GraphQlFieldMetadata { Name = "zip" }
            };

        protected override string TypeName { get { return "MailingAddress"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MailingAddressQueryBuilder WithAddress1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("address1", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptAddress1()
        {
            return ExceptField("address1");
        }

        public MailingAddressQueryBuilder WithAddress2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("address2", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptAddress2()
        {
            return ExceptField("address2");
        }

        public MailingAddressQueryBuilder WithCity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("city", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptCity()
        {
            return ExceptField("city");
        }

        public MailingAddressQueryBuilder WithCompany(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("company", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptCompany()
        {
            return ExceptField("company");
        }

        public MailingAddressQueryBuilder WithCountry(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("country", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptCountry()
        {
            return ExceptField("country");
        }

        public MailingAddressQueryBuilder WithCountryCodeV2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryCodeV2", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptCountryCodeV2()
        {
            return ExceptField("countryCodeV2");
        }

        public MailingAddressQueryBuilder WithFirstName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstName", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptFirstName()
        {
            return ExceptField("firstName");
        }

        public MailingAddressQueryBuilder WithFormatted(QueryBuilderParameter<bool?> withName = null, QueryBuilderParameter<bool?> withCompany = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (withName != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "withName", ArgumentValue = withName} );

            if (withCompany != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "withCompany", ArgumentValue = withCompany} );

            return WithScalarField("formatted", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MailingAddressQueryBuilder ExceptFormatted()
        {
            return ExceptField("formatted");
        }

        public MailingAddressQueryBuilder WithFormattedArea(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("formattedArea", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptFormattedArea()
        {
            return ExceptField("formattedArea");
        }

        public MailingAddressQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MailingAddressQueryBuilder WithLastName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastName", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptLastName()
        {
            return ExceptField("lastName");
        }

        public MailingAddressQueryBuilder WithLatitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("latitude", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptLatitude()
        {
            return ExceptField("latitude");
        }

        public MailingAddressQueryBuilder WithLongitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("longitude", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptLongitude()
        {
            return ExceptField("longitude");
        }

        public MailingAddressQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public MailingAddressQueryBuilder WithPhone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("phone", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptPhone()
        {
            return ExceptField("phone");
        }

        public MailingAddressQueryBuilder WithProvince(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("province", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptProvince()
        {
            return ExceptField("province");
        }

        public MailingAddressQueryBuilder WithProvinceCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("provinceCode", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptProvinceCode()
        {
            return ExceptField("provinceCode");
        }

        public MailingAddressQueryBuilder WithZip(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("zip", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressQueryBuilder ExceptZip()
        {
            return ExceptField("zip");
        }
    }

    public class MailingAddressConnectionQueryBuilder : GraphQlQueryBuilder<MailingAddressConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(MailingAddressEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(MailingAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "MailingAddressConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MailingAddressConnectionQueryBuilder WithEdges(MailingAddressEdgeQueryBuilder mailingAddressEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, mailingAddressEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public MailingAddressConnectionQueryBuilder WithNodes(MailingAddressQueryBuilder mailingAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public MailingAddressConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class MailingAddressEdgeQueryBuilder : GraphQlQueryBuilder<MailingAddressEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(MailingAddressQueryBuilder) }
            };

        protected override string TypeName { get { return "MailingAddressEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MailingAddressEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public MailingAddressEdgeQueryBuilder WithNode(MailingAddressQueryBuilder mailingAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MailingAddressEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class ManualDiscountApplicationQueryBuilder : GraphQlQueryBuilder<ManualDiscountApplicationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "allocationMethod" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "targetSelection" },
                new GraphQlFieldMetadata { Name = "targetType" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(PricingValueQueryBuilder) }
            };

        protected override string TypeName { get { return "ManualDiscountApplication"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ManualDiscountApplicationQueryBuilder WithAllocationMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allocationMethod", alias, new GraphQlDirective[] { include, skip });
        }

        public ManualDiscountApplicationQueryBuilder ExceptAllocationMethod()
        {
            return ExceptField("allocationMethod");
        }

        public ManualDiscountApplicationQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ManualDiscountApplicationQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ManualDiscountApplicationQueryBuilder WithTargetSelection(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetSelection", alias, new GraphQlDirective[] { include, skip });
        }

        public ManualDiscountApplicationQueryBuilder ExceptTargetSelection()
        {
            return ExceptField("targetSelection");
        }

        public ManualDiscountApplicationQueryBuilder WithTargetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetType", alias, new GraphQlDirective[] { include, skip });
        }

        public ManualDiscountApplicationQueryBuilder ExceptTargetType()
        {
            return ExceptField("targetType");
        }

        public ManualDiscountApplicationQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ManualDiscountApplicationQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ManualDiscountApplicationQueryBuilder WithValue(PricingValueQueryBuilder pricingValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, pricingValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ManualDiscountApplicationQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class MediaQueryBuilder : GraphQlQueryBuilder<MediaQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "alt" },
                new GraphQlFieldMetadata { Name = "mediaContentType" },
                new GraphQlFieldMetadata { Name = "previewImage", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) }
            };

        protected override string TypeName { get { return "Media"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaQueryBuilder WithAlt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("alt", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptAlt()
        {
            return ExceptField("alt");
        }

        public MediaQueryBuilder WithMediaContentType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaContentType", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptMediaContentType()
        {
            return ExceptField("mediaContentType");
        }

        public MediaQueryBuilder WithPreviewImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("previewImage", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptPreviewImage()
        {
            return ExceptField("previewImage");
        }

        public MediaQueryBuilder WithExternalVideoFragment(ExternalVideoQueryBuilder externalVideoQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalVideoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder WithMediaImageFragment(MediaImageQueryBuilder mediaImageQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mediaImageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder WithModel3DFragment(Model3DQueryBuilder model3DQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(model3DQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder WithVideoFragment(VideoQueryBuilder videoQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(videoQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class MediaConnectionQueryBuilder : GraphQlQueryBuilder<MediaConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(MediaEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaConnectionQueryBuilder WithEdges(MediaEdgeQueryBuilder mediaEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, mediaEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public MediaConnectionQueryBuilder WithNodes(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public MediaConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class MediaEdgeQueryBuilder : GraphQlQueryBuilder<MediaEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public MediaEdgeQueryBuilder WithNode(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class MediaImageQueryBuilder : GraphQlQueryBuilder<MediaImageQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "alt" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "image", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mediaContentType" },
                new GraphQlFieldMetadata { Name = "previewImage", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaImage"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaImageQueryBuilder WithAlt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("alt", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaImageQueryBuilder ExceptAlt()
        {
            return ExceptField("alt");
        }

        public MediaImageQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaImageQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaImageQueryBuilder WithImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("image", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaImageQueryBuilder ExceptImage()
        {
            return ExceptField("image");
        }

        public MediaImageQueryBuilder WithMediaContentType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaContentType", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaImageQueryBuilder ExceptMediaContentType()
        {
            return ExceptField("mediaContentType");
        }

        public MediaImageQueryBuilder WithPreviewImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("previewImage", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaImageQueryBuilder ExceptPreviewImage()
        {
            return ExceptField("previewImage");
        }
    }

    public class MenuQueryBuilder : GraphQlQueryBuilder<MenuQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(MenuItemQueryBuilder) },
                new GraphQlFieldMetadata { Name = "itemsCount" },
                new GraphQlFieldMetadata { Name = "title" }
            };

        protected override string TypeName { get { return "Menu"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MenuQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public MenuQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public MenuQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MenuQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MenuQueryBuilder WithItems(MenuItemQueryBuilder menuItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, menuItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MenuQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }

        public MenuQueryBuilder WithItemsCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemsCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MenuQueryBuilder ExceptItemsCount()
        {
            return ExceptField("itemsCount");
        }

        public MenuQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public MenuQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }
    }

    public class MenuItemQueryBuilder : GraphQlQueryBuilder<MenuItemQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(MenuItemQueryBuilder) },
                new GraphQlFieldMetadata { Name = "resourceId" },
                new GraphQlFieldMetadata { Name = "tags", IsComplex = true },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "url", IsComplex = true }
            };

        protected override string TypeName { get { return "MenuItem"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MenuItemQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MenuItemQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MenuItemQueryBuilder WithItems(MenuItemQueryBuilder menuItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, menuItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MenuItemQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }

        public MenuItemQueryBuilder WithResourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("resourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public MenuItemQueryBuilder ExceptResourceId()
        {
            return ExceptField("resourceId");
        }

        public MenuItemQueryBuilder WithTags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tags", alias, new GraphQlDirective[] { include, skip });
        }

        public MenuItemQueryBuilder ExceptTags()
        {
            return ExceptField("tags");
        }

        public MenuItemQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public MenuItemQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public MenuItemQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public MenuItemQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public MenuItemQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public MenuItemQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public class MerchandiseQueryBuilder : GraphQlQueryBuilder<MerchandiseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        protected override string TypeName { get { return "Merchandise"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MerchandiseQueryBuilder WithProductVariantFragment(ProductVariantQueryBuilder productVariantQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productVariantQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class MetafieldQueryBuilder : GraphQlQueryBuilder<MetafieldQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "namespace" },
                new GraphQlFieldMetadata { Name = "parentResource", IsComplex = true, QueryBuilderType = typeof(MetafieldParentResourceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reference", IsComplex = true, QueryBuilderType = typeof(MetafieldReferenceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "references", IsComplex = true, QueryBuilderType = typeof(MetafieldReferenceConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "Metafield"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MetafieldQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MetafieldQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public MetafieldQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public MetafieldQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public MetafieldQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MetafieldQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MetafieldQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public MetafieldQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public MetafieldQueryBuilder WithNamespace(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("namespace", alias, new GraphQlDirective[] { include, skip });
        }

        public MetafieldQueryBuilder ExceptNamespace()
        {
            return ExceptField("namespace");
        }

        public MetafieldQueryBuilder WithParentResource(MetafieldParentResourceQueryBuilder metafieldParentResourceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("parentResource", alias, metafieldParentResourceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldQueryBuilder ExceptParentResource()
        {
            return ExceptField("parentResource");
        }

        public MetafieldQueryBuilder WithReference(MetafieldReferenceQueryBuilder metafieldReferenceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("reference", alias, metafieldReferenceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldQueryBuilder ExceptReference()
        {
            return ExceptField("reference");
        }

        public MetafieldQueryBuilder WithReferences(MetafieldReferenceConnectionQueryBuilder metafieldReferenceConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            return WithObjectField("references", alias, metafieldReferenceConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MetafieldQueryBuilder ExceptReferences()
        {
            return ExceptField("references");
        }

        public MetafieldQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public MetafieldQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public MetafieldQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MetafieldQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public MetafieldQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public MetafieldQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class MetafieldParentResourceQueryBuilder : GraphQlQueryBuilder<MetafieldParentResourceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        protected override string TypeName { get { return "MetafieldParentResource"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MetafieldParentResourceQueryBuilder WithArticleFragment(ArticleQueryBuilder articleQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(articleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldParentResourceQueryBuilder WithBlogFragment(BlogQueryBuilder blogQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(blogQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldParentResourceQueryBuilder WithCollectionFragment(CollectionQueryBuilder collectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldParentResourceQueryBuilder WithCustomerFragment(CustomerQueryBuilder customerQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(customerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldParentResourceQueryBuilder WithOrderFragment(OrderQueryBuilder orderQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(orderQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldParentResourceQueryBuilder WithPageFragment(PageQueryBuilder pageQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(pageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldParentResourceQueryBuilder WithProductFragment(ProductQueryBuilder productQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldParentResourceQueryBuilder WithProductVariantFragment(ProductVariantQueryBuilder productVariantQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productVariantQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldParentResourceQueryBuilder WithShopFragment(ShopQueryBuilder shopQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(shopQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class MetafieldReferenceQueryBuilder : GraphQlQueryBuilder<MetafieldReferenceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        protected override string TypeName { get { return "MetafieldReference"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MetafieldReferenceQueryBuilder WithCollectionFragment(CollectionQueryBuilder collectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceQueryBuilder WithGenericFileFragment(GenericFileQueryBuilder genericFileQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceQueryBuilder WithMediaImageFragment(MediaImageQueryBuilder mediaImageQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mediaImageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceQueryBuilder WithPageFragment(PageQueryBuilder pageQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(pageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceQueryBuilder WithProductFragment(ProductQueryBuilder productQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceQueryBuilder WithProductVariantFragment(ProductVariantQueryBuilder productVariantQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productVariantQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceQueryBuilder WithVideoFragment(VideoQueryBuilder videoQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(videoQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class MetafieldReferenceConnectionQueryBuilder : GraphQlQueryBuilder<MetafieldReferenceConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(MetafieldReferenceEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(MetafieldReferenceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "MetafieldReferenceConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MetafieldReferenceConnectionQueryBuilder WithEdges(MetafieldReferenceEdgeQueryBuilder metafieldReferenceEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, metafieldReferenceEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public MetafieldReferenceConnectionQueryBuilder WithNodes(MetafieldReferenceQueryBuilder metafieldReferenceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, metafieldReferenceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public MetafieldReferenceConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class MetafieldReferenceEdgeQueryBuilder : GraphQlQueryBuilder<MetafieldReferenceEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(MetafieldReferenceQueryBuilder) }
            };

        protected override string TypeName { get { return "MetafieldReferenceEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MetafieldReferenceEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public MetafieldReferenceEdgeQueryBuilder WithNode(MetafieldReferenceQueryBuilder metafieldReferenceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, metafieldReferenceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetafieldReferenceEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class Model3DQueryBuilder : GraphQlQueryBuilder<Model3DQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "alt" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "mediaContentType" },
                new GraphQlFieldMetadata { Name = "previewImage", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sources", IsComplex = true, QueryBuilderType = typeof(Model3DSourceQueryBuilder) }
            };

        protected override string TypeName { get { return "Model3d"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public Model3DQueryBuilder WithAlt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("alt", alias, new GraphQlDirective[] { include, skip });
        }

        public Model3DQueryBuilder ExceptAlt()
        {
            return ExceptField("alt");
        }

        public Model3DQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public Model3DQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public Model3DQueryBuilder WithMediaContentType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaContentType", alias, new GraphQlDirective[] { include, skip });
        }

        public Model3DQueryBuilder ExceptMediaContentType()
        {
            return ExceptField("mediaContentType");
        }

        public Model3DQueryBuilder WithPreviewImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("previewImage", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public Model3DQueryBuilder ExceptPreviewImage()
        {
            return ExceptField("previewImage");
        }

        public Model3DQueryBuilder WithSources(Model3DSourceQueryBuilder model3DSourceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("sources", alias, model3DSourceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public Model3DQueryBuilder ExceptSources()
        {
            return ExceptField("sources");
        }
    }

    public class Model3DSourceQueryBuilder : GraphQlQueryBuilder<Model3DSourceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "filesize" },
                new GraphQlFieldMetadata { Name = "format" },
                new GraphQlFieldMetadata { Name = "mimeType" },
                new GraphQlFieldMetadata { Name = "url" }
            };

        protected override string TypeName { get { return "Model3dSource"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public Model3DSourceQueryBuilder WithFilesize(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("filesize", alias, new GraphQlDirective[] { include, skip });
        }

        public Model3DSourceQueryBuilder ExceptFilesize()
        {
            return ExceptField("filesize");
        }

        public Model3DSourceQueryBuilder WithFormat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("format", alias, new GraphQlDirective[] { include, skip });
        }

        public Model3DSourceQueryBuilder ExceptFormat()
        {
            return ExceptField("format");
        }

        public Model3DSourceQueryBuilder WithMimeType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mimeType", alias, new GraphQlDirective[] { include, skip });
        }

        public Model3DSourceQueryBuilder ExceptMimeType()
        {
            return ExceptField("mimeType");
        }

        public Model3DSourceQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public Model3DSourceQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public class MoneyV2QueryBuilder : GraphQlQueryBuilder<MoneyV2QueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "amount", IsComplex = true },
                new GraphQlFieldMetadata { Name = "currencyCode" }
            };

        protected override string TypeName { get { return "MoneyV2"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MoneyV2QueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public MoneyV2QueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public MoneyV2QueryBuilder WithCurrencyCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currencyCode", alias, new GraphQlDirective[] { include, skip });
        }

        public MoneyV2QueryBuilder ExceptCurrencyCode()
        {
            return ExceptField("currencyCode");
        }
    }

    public class MutationQueryBuilder : GraphQlQueryBuilder<MutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cartAttributesUpdate", IsComplex = true, QueryBuilderType = typeof(CartAttributesUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cartBuyerIdentityUpdate", IsComplex = true, QueryBuilderType = typeof(CartBuyerIdentityUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cartCreate", IsComplex = true, QueryBuilderType = typeof(CartCreatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cartDiscountCodesUpdate", IsComplex = true, QueryBuilderType = typeof(CartDiscountCodesUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cartLinesAdd", IsComplex = true, QueryBuilderType = typeof(CartLinesAddPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cartLinesRemove", IsComplex = true, QueryBuilderType = typeof(CartLinesRemovePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cartLinesUpdate", IsComplex = true, QueryBuilderType = typeof(CartLinesUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cartNoteUpdate", IsComplex = true, QueryBuilderType = typeof(CartNoteUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cartSelectedDeliveryOptionsUpdate", IsComplex = true, QueryBuilderType = typeof(CartSelectedDeliveryOptionsUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutAttributesUpdateV2", IsComplex = true, QueryBuilderType = typeof(CheckoutAttributesUpdateV2PayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutCompleteFree", IsComplex = true, QueryBuilderType = typeof(CheckoutCompleteFreePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutCompleteWithCreditCardV2", IsComplex = true, QueryBuilderType = typeof(CheckoutCompleteWithCreditCardV2PayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutCompleteWithTokenizedPaymentV3", IsComplex = true, QueryBuilderType = typeof(CheckoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutCreate", IsComplex = true, QueryBuilderType = typeof(CheckoutCreatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutCustomerAssociateV2", IsComplex = true, QueryBuilderType = typeof(CheckoutCustomerAssociateV2PayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutCustomerDisassociateV2", IsComplex = true, QueryBuilderType = typeof(CheckoutCustomerDisassociateV2PayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutDiscountCodeApplyV2", IsComplex = true, QueryBuilderType = typeof(CheckoutDiscountCodeApplyV2PayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutDiscountCodeRemove", IsComplex = true, QueryBuilderType = typeof(CheckoutDiscountCodeRemovePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutEmailUpdateV2", IsComplex = true, QueryBuilderType = typeof(CheckoutEmailUpdateV2PayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutGiftCardRemoveV2", IsComplex = true, QueryBuilderType = typeof(CheckoutGiftCardRemoveV2PayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutGiftCardsAppend", IsComplex = true, QueryBuilderType = typeof(CheckoutGiftCardsAppendPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutLineItemsAdd", IsComplex = true, QueryBuilderType = typeof(CheckoutLineItemsAddPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutLineItemsRemove", IsComplex = true, QueryBuilderType = typeof(CheckoutLineItemsRemovePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutLineItemsReplace", IsComplex = true, QueryBuilderType = typeof(CheckoutLineItemsReplacePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutLineItemsUpdate", IsComplex = true, QueryBuilderType = typeof(CheckoutLineItemsUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutShippingAddressUpdateV2", IsComplex = true, QueryBuilderType = typeof(CheckoutShippingAddressUpdateV2PayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkoutShippingLineUpdate", IsComplex = true, QueryBuilderType = typeof(CheckoutShippingLineUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAccessTokenCreate", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenCreatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAccessTokenCreateWithMultipass", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenCreateWithMultipassPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAccessTokenDelete", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenDeletePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAccessTokenRenew", IsComplex = true, QueryBuilderType = typeof(CustomerAccessTokenRenewPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerActivate", IsComplex = true, QueryBuilderType = typeof(CustomerActivatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerActivateByUrl", IsComplex = true, QueryBuilderType = typeof(CustomerActivateByUrlPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAddressCreate", IsComplex = true, QueryBuilderType = typeof(CustomerAddressCreatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAddressDelete", IsComplex = true, QueryBuilderType = typeof(CustomerAddressDeletePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerAddressUpdate", IsComplex = true, QueryBuilderType = typeof(CustomerAddressUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerCreate", IsComplex = true, QueryBuilderType = typeof(CustomerCreatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerDefaultAddressUpdate", IsComplex = true, QueryBuilderType = typeof(CustomerDefaultAddressUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerRecover", IsComplex = true, QueryBuilderType = typeof(CustomerRecoverPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerReset", IsComplex = true, QueryBuilderType = typeof(CustomerResetPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerResetByUrl", IsComplex = true, QueryBuilderType = typeof(CustomerResetByUrlPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerUpdate", IsComplex = true, QueryBuilderType = typeof(CustomerUpdatePayloadQueryBuilder) }
            };

        protected override string TypeName { get { return "Mutation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MutationQueryBuilder(string operationName = null) : base("mutation", operationName)
        {
        }

        public MutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public MutationQueryBuilder WithCartAttributesUpdate(CartAttributesUpdatePayloadQueryBuilder cartAttributesUpdatePayloadQueryBuilder, QueryBuilderParameter<IEnumerable<AttributeInput>> attributes, QueryBuilderParameter<Guid> cartId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "attributes", ArgumentValue = attributes} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cartId", ArgumentValue = cartId} );
            return WithObjectField("cartAttributesUpdate", alias, cartAttributesUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCartAttributesUpdate()
        {
            return ExceptField("cartAttributesUpdate");
        }

        public MutationQueryBuilder WithCartBuyerIdentityUpdate(CartBuyerIdentityUpdatePayloadQueryBuilder cartBuyerIdentityUpdatePayloadQueryBuilder, QueryBuilderParameter<Guid> cartId, QueryBuilderParameter<CartBuyerIdentityInput> buyerIdentity, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cartId", ArgumentValue = cartId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "buyerIdentity", ArgumentValue = buyerIdentity} );
            return WithObjectField("cartBuyerIdentityUpdate", alias, cartBuyerIdentityUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCartBuyerIdentityUpdate()
        {
            return ExceptField("cartBuyerIdentityUpdate");
        }

        public MutationQueryBuilder WithCartCreate(CartCreatePayloadQueryBuilder cartCreatePayloadQueryBuilder, QueryBuilderParameter<CartInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );

            return WithObjectField("cartCreate", alias, cartCreatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCartCreate()
        {
            return ExceptField("cartCreate");
        }

        public MutationQueryBuilder WithCartDiscountCodesUpdate(CartDiscountCodesUpdatePayloadQueryBuilder cartDiscountCodesUpdatePayloadQueryBuilder, QueryBuilderParameter<Guid> cartId, QueryBuilderParameter<IEnumerable<string>> discountCodes = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cartId", ArgumentValue = cartId} );
            if (discountCodes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "discountCodes", ArgumentValue = discountCodes} );

            return WithObjectField("cartDiscountCodesUpdate", alias, cartDiscountCodesUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCartDiscountCodesUpdate()
        {
            return ExceptField("cartDiscountCodesUpdate");
        }

        public MutationQueryBuilder WithCartLinesAdd(CartLinesAddPayloadQueryBuilder cartLinesAddPayloadQueryBuilder, QueryBuilderParameter<IEnumerable<CartLineInput>> lines, QueryBuilderParameter<Guid> cartId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "lines", ArgumentValue = lines} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cartId", ArgumentValue = cartId} );
            return WithObjectField("cartLinesAdd", alias, cartLinesAddPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCartLinesAdd()
        {
            return ExceptField("cartLinesAdd");
        }

        public MutationQueryBuilder WithCartLinesRemove(CartLinesRemovePayloadQueryBuilder cartLinesRemovePayloadQueryBuilder, QueryBuilderParameter<Guid> cartId, QueryBuilderParameter<IEnumerable<Guid>> lineIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cartId", ArgumentValue = cartId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "lineIds", ArgumentValue = lineIds} );
            return WithObjectField("cartLinesRemove", alias, cartLinesRemovePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCartLinesRemove()
        {
            return ExceptField("cartLinesRemove");
        }

        public MutationQueryBuilder WithCartLinesUpdate(CartLinesUpdatePayloadQueryBuilder cartLinesUpdatePayloadQueryBuilder, QueryBuilderParameter<Guid> cartId, QueryBuilderParameter<IEnumerable<CartLineUpdateInput>> lines, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cartId", ArgumentValue = cartId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "lines", ArgumentValue = lines} );
            return WithObjectField("cartLinesUpdate", alias, cartLinesUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCartLinesUpdate()
        {
            return ExceptField("cartLinesUpdate");
        }

        public MutationQueryBuilder WithCartNoteUpdate(CartNoteUpdatePayloadQueryBuilder cartNoteUpdatePayloadQueryBuilder, QueryBuilderParameter<Guid> cartId, QueryBuilderParameter<string> note = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cartId", ArgumentValue = cartId} );
            if (note != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "note", ArgumentValue = note} );

            return WithObjectField("cartNoteUpdate", alias, cartNoteUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCartNoteUpdate()
        {
            return ExceptField("cartNoteUpdate");
        }

        public MutationQueryBuilder WithCartSelectedDeliveryOptionsUpdate(CartSelectedDeliveryOptionsUpdatePayloadQueryBuilder cartSelectedDeliveryOptionsUpdatePayloadQueryBuilder, QueryBuilderParameter<Guid> cartId, QueryBuilderParameter<IEnumerable<CartSelectedDeliveryOptionInput>> selectedDeliveryOptions, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cartId", ArgumentValue = cartId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "selectedDeliveryOptions", ArgumentValue = selectedDeliveryOptions} );
            return WithObjectField("cartSelectedDeliveryOptionsUpdate", alias, cartSelectedDeliveryOptionsUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCartSelectedDeliveryOptionsUpdate()
        {
            return ExceptField("cartSelectedDeliveryOptionsUpdate");
        }

        public MutationQueryBuilder WithCheckoutAttributesUpdateV2(CheckoutAttributesUpdateV2PayloadQueryBuilder checkoutAttributesUpdateV2PayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, QueryBuilderParameter<CheckoutAttributesUpdateV2Input> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("checkoutAttributesUpdateV2", alias, checkoutAttributesUpdateV2PayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutAttributesUpdateV2()
        {
            return ExceptField("checkoutAttributesUpdateV2");
        }

        public MutationQueryBuilder WithCheckoutCompleteFree(CheckoutCompleteFreePayloadQueryBuilder checkoutCompleteFreePayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            return WithObjectField("checkoutCompleteFree", alias, checkoutCompleteFreePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutCompleteFree()
        {
            return ExceptField("checkoutCompleteFree");
        }

        public MutationQueryBuilder WithCheckoutCompleteWithCreditCardV2(CheckoutCompleteWithCreditCardV2PayloadQueryBuilder checkoutCompleteWithCreditCardV2PayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, QueryBuilderParameter<CreditCardPaymentInputV2> payment, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "payment", ArgumentValue = payment} );
            return WithObjectField("checkoutCompleteWithCreditCardV2", alias, checkoutCompleteWithCreditCardV2PayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutCompleteWithCreditCardV2()
        {
            return ExceptField("checkoutCompleteWithCreditCardV2");
        }

        public MutationQueryBuilder WithCheckoutCompleteWithTokenizedPaymentV3(CheckoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder checkoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, QueryBuilderParameter<TokenizedPaymentInputV3> payment, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "payment", ArgumentValue = payment} );
            return WithObjectField("checkoutCompleteWithTokenizedPaymentV3", alias, checkoutCompleteWithTokenizedPaymentV3PayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutCompleteWithTokenizedPaymentV3()
        {
            return ExceptField("checkoutCompleteWithTokenizedPaymentV3");
        }

        public MutationQueryBuilder WithCheckoutCreate(CheckoutCreatePayloadQueryBuilder checkoutCreatePayloadQueryBuilder, QueryBuilderParameter<CheckoutCreateInput> input, QueryBuilderParameter<string> queueToken = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            if (queueToken != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "queueToken", ArgumentValue = queueToken} );

            return WithObjectField("checkoutCreate", alias, checkoutCreatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutCreate()
        {
            return ExceptField("checkoutCreate");
        }

        public MutationQueryBuilder WithCheckoutCustomerAssociateV2(CheckoutCustomerAssociateV2PayloadQueryBuilder checkoutCustomerAssociateV2PayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, QueryBuilderParameter<string> customerAccessToken, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customerAccessToken", ArgumentValue = customerAccessToken} );
            return WithObjectField("checkoutCustomerAssociateV2", alias, checkoutCustomerAssociateV2PayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutCustomerAssociateV2()
        {
            return ExceptField("checkoutCustomerAssociateV2");
        }

        public MutationQueryBuilder WithCheckoutCustomerDisassociateV2(CheckoutCustomerDisassociateV2PayloadQueryBuilder checkoutCustomerDisassociateV2PayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            return WithObjectField("checkoutCustomerDisassociateV2", alias, checkoutCustomerDisassociateV2PayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutCustomerDisassociateV2()
        {
            return ExceptField("checkoutCustomerDisassociateV2");
        }

        public MutationQueryBuilder WithCheckoutDiscountCodeApplyV2(CheckoutDiscountCodeApplyV2PayloadQueryBuilder checkoutDiscountCodeApplyV2PayloadQueryBuilder, QueryBuilderParameter<string> discountCode, QueryBuilderParameter<Guid> checkoutId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "discountCode", ArgumentValue = discountCode} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            return WithObjectField("checkoutDiscountCodeApplyV2", alias, checkoutDiscountCodeApplyV2PayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutDiscountCodeApplyV2()
        {
            return ExceptField("checkoutDiscountCodeApplyV2");
        }

        public MutationQueryBuilder WithCheckoutDiscountCodeRemove(CheckoutDiscountCodeRemovePayloadQueryBuilder checkoutDiscountCodeRemovePayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            return WithObjectField("checkoutDiscountCodeRemove", alias, checkoutDiscountCodeRemovePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutDiscountCodeRemove()
        {
            return ExceptField("checkoutDiscountCodeRemove");
        }

        public MutationQueryBuilder WithCheckoutEmailUpdateV2(CheckoutEmailUpdateV2PayloadQueryBuilder checkoutEmailUpdateV2PayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, QueryBuilderParameter<string> email, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "email", ArgumentValue = email} );
            return WithObjectField("checkoutEmailUpdateV2", alias, checkoutEmailUpdateV2PayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutEmailUpdateV2()
        {
            return ExceptField("checkoutEmailUpdateV2");
        }

        public MutationQueryBuilder WithCheckoutGiftCardRemoveV2(CheckoutGiftCardRemoveV2PayloadQueryBuilder checkoutGiftCardRemoveV2PayloadQueryBuilder, QueryBuilderParameter<Guid> appliedGiftCardId, QueryBuilderParameter<Guid> checkoutId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "appliedGiftCardId", ArgumentValue = appliedGiftCardId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            return WithObjectField("checkoutGiftCardRemoveV2", alias, checkoutGiftCardRemoveV2PayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutGiftCardRemoveV2()
        {
            return ExceptField("checkoutGiftCardRemoveV2");
        }

        public MutationQueryBuilder WithCheckoutGiftCardsAppend(CheckoutGiftCardsAppendPayloadQueryBuilder checkoutGiftCardsAppendPayloadQueryBuilder, QueryBuilderParameter<IEnumerable<string>> giftCardCodes, QueryBuilderParameter<Guid> checkoutId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "giftCardCodes", ArgumentValue = giftCardCodes} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            return WithObjectField("checkoutGiftCardsAppend", alias, checkoutGiftCardsAppendPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutGiftCardsAppend()
        {
            return ExceptField("checkoutGiftCardsAppend");
        }

        public MutationQueryBuilder WithCheckoutLineItemsAdd(CheckoutLineItemsAddPayloadQueryBuilder checkoutLineItemsAddPayloadQueryBuilder, QueryBuilderParameter<IEnumerable<CheckoutLineItemInput>> lineItems, QueryBuilderParameter<Guid> checkoutId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "lineItems", ArgumentValue = lineItems} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            return WithObjectField("checkoutLineItemsAdd", alias, checkoutLineItemsAddPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutLineItemsAdd()
        {
            return ExceptField("checkoutLineItemsAdd");
        }

        public MutationQueryBuilder WithCheckoutLineItemsRemove(CheckoutLineItemsRemovePayloadQueryBuilder checkoutLineItemsRemovePayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, QueryBuilderParameter<IEnumerable<Guid>> lineItemIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "lineItemIds", ArgumentValue = lineItemIds} );
            return WithObjectField("checkoutLineItemsRemove", alias, checkoutLineItemsRemovePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutLineItemsRemove()
        {
            return ExceptField("checkoutLineItemsRemove");
        }

        public MutationQueryBuilder WithCheckoutLineItemsReplace(CheckoutLineItemsReplacePayloadQueryBuilder checkoutLineItemsReplacePayloadQueryBuilder, QueryBuilderParameter<IEnumerable<CheckoutLineItemInput>> lineItems, QueryBuilderParameter<Guid> checkoutId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "lineItems", ArgumentValue = lineItems} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            return WithObjectField("checkoutLineItemsReplace", alias, checkoutLineItemsReplacePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutLineItemsReplace()
        {
            return ExceptField("checkoutLineItemsReplace");
        }

        public MutationQueryBuilder WithCheckoutLineItemsUpdate(CheckoutLineItemsUpdatePayloadQueryBuilder checkoutLineItemsUpdatePayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, QueryBuilderParameter<IEnumerable<CheckoutLineItemUpdateInput>> lineItems, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "lineItems", ArgumentValue = lineItems} );
            return WithObjectField("checkoutLineItemsUpdate", alias, checkoutLineItemsUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutLineItemsUpdate()
        {
            return ExceptField("checkoutLineItemsUpdate");
        }

        public MutationQueryBuilder WithCheckoutShippingAddressUpdateV2(CheckoutShippingAddressUpdateV2PayloadQueryBuilder checkoutShippingAddressUpdateV2PayloadQueryBuilder, QueryBuilderParameter<MailingAddressInput> shippingAddress, QueryBuilderParameter<Guid> checkoutId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "shippingAddress", ArgumentValue = shippingAddress} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            return WithObjectField("checkoutShippingAddressUpdateV2", alias, checkoutShippingAddressUpdateV2PayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutShippingAddressUpdateV2()
        {
            return ExceptField("checkoutShippingAddressUpdateV2");
        }

        public MutationQueryBuilder WithCheckoutShippingLineUpdate(CheckoutShippingLineUpdatePayloadQueryBuilder checkoutShippingLineUpdatePayloadQueryBuilder, QueryBuilderParameter<Guid> checkoutId, QueryBuilderParameter<string> shippingRateHandle, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "checkoutId", ArgumentValue = checkoutId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "shippingRateHandle", ArgumentValue = shippingRateHandle} );
            return WithObjectField("checkoutShippingLineUpdate", alias, checkoutShippingLineUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCheckoutShippingLineUpdate()
        {
            return ExceptField("checkoutShippingLineUpdate");
        }

        public MutationQueryBuilder WithCustomerAccessTokenCreate(CustomerAccessTokenCreatePayloadQueryBuilder customerAccessTokenCreatePayloadQueryBuilder, QueryBuilderParameter<CustomerAccessTokenCreateInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("customerAccessTokenCreate", alias, customerAccessTokenCreatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerAccessTokenCreate()
        {
            return ExceptField("customerAccessTokenCreate");
        }

        public MutationQueryBuilder WithCustomerAccessTokenCreateWithMultipass(CustomerAccessTokenCreateWithMultipassPayloadQueryBuilder customerAccessTokenCreateWithMultipassPayloadQueryBuilder, QueryBuilderParameter<string> multipassToken, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "multipassToken", ArgumentValue = multipassToken} );
            return WithObjectField("customerAccessTokenCreateWithMultipass", alias, customerAccessTokenCreateWithMultipassPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerAccessTokenCreateWithMultipass()
        {
            return ExceptField("customerAccessTokenCreateWithMultipass");
        }

        public MutationQueryBuilder WithCustomerAccessTokenDelete(CustomerAccessTokenDeletePayloadQueryBuilder customerAccessTokenDeletePayloadQueryBuilder, QueryBuilderParameter<string> customerAccessToken, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customerAccessToken", ArgumentValue = customerAccessToken} );
            return WithObjectField("customerAccessTokenDelete", alias, customerAccessTokenDeletePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerAccessTokenDelete()
        {
            return ExceptField("customerAccessTokenDelete");
        }

        public MutationQueryBuilder WithCustomerAccessTokenRenew(CustomerAccessTokenRenewPayloadQueryBuilder customerAccessTokenRenewPayloadQueryBuilder, QueryBuilderParameter<string> customerAccessToken, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customerAccessToken", ArgumentValue = customerAccessToken} );
            return WithObjectField("customerAccessTokenRenew", alias, customerAccessTokenRenewPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerAccessTokenRenew()
        {
            return ExceptField("customerAccessTokenRenew");
        }

        public MutationQueryBuilder WithCustomerActivate(CustomerActivatePayloadQueryBuilder customerActivatePayloadQueryBuilder, QueryBuilderParameter<Guid> id, QueryBuilderParameter<CustomerActivateInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("customerActivate", alias, customerActivatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerActivate()
        {
            return ExceptField("customerActivate");
        }

        public MutationQueryBuilder WithCustomerActivateByUrl(CustomerActivateByUrlPayloadQueryBuilder customerActivateByUrlPayloadQueryBuilder, QueryBuilderParameter<object> activationUrl, QueryBuilderParameter<string> password, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "activationUrl", ArgumentValue = activationUrl} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "password", ArgumentValue = password} );
            return WithObjectField("customerActivateByUrl", alias, customerActivateByUrlPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerActivateByUrl()
        {
            return ExceptField("customerActivateByUrl");
        }

        public MutationQueryBuilder WithCustomerAddressCreate(CustomerAddressCreatePayloadQueryBuilder customerAddressCreatePayloadQueryBuilder, QueryBuilderParameter<string> customerAccessToken, QueryBuilderParameter<MailingAddressInput> address, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customerAccessToken", ArgumentValue = customerAccessToken} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "address", ArgumentValue = address} );
            return WithObjectField("customerAddressCreate", alias, customerAddressCreatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerAddressCreate()
        {
            return ExceptField("customerAddressCreate");
        }

        public MutationQueryBuilder WithCustomerAddressDelete(CustomerAddressDeletePayloadQueryBuilder customerAddressDeletePayloadQueryBuilder, QueryBuilderParameter<Guid> id, QueryBuilderParameter<string> customerAccessToken, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customerAccessToken", ArgumentValue = customerAccessToken} );
            return WithObjectField("customerAddressDelete", alias, customerAddressDeletePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerAddressDelete()
        {
            return ExceptField("customerAddressDelete");
        }

        public MutationQueryBuilder WithCustomerAddressUpdate(CustomerAddressUpdatePayloadQueryBuilder customerAddressUpdatePayloadQueryBuilder, QueryBuilderParameter<string> customerAccessToken, QueryBuilderParameter<Guid> id, QueryBuilderParameter<MailingAddressInput> address, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customerAccessToken", ArgumentValue = customerAccessToken} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "address", ArgumentValue = address} );
            return WithObjectField("customerAddressUpdate", alias, customerAddressUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerAddressUpdate()
        {
            return ExceptField("customerAddressUpdate");
        }

        public MutationQueryBuilder WithCustomerCreate(CustomerCreatePayloadQueryBuilder customerCreatePayloadQueryBuilder, QueryBuilderParameter<CustomerCreateInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("customerCreate", alias, customerCreatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerCreate()
        {
            return ExceptField("customerCreate");
        }

        public MutationQueryBuilder WithCustomerDefaultAddressUpdate(CustomerDefaultAddressUpdatePayloadQueryBuilder customerDefaultAddressUpdatePayloadQueryBuilder, QueryBuilderParameter<string> customerAccessToken, QueryBuilderParameter<Guid> addressId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customerAccessToken", ArgumentValue = customerAccessToken} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "addressId", ArgumentValue = addressId} );
            return WithObjectField("customerDefaultAddressUpdate", alias, customerDefaultAddressUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerDefaultAddressUpdate()
        {
            return ExceptField("customerDefaultAddressUpdate");
        }

        public MutationQueryBuilder WithCustomerRecover(CustomerRecoverPayloadQueryBuilder customerRecoverPayloadQueryBuilder, QueryBuilderParameter<string> email, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "email", ArgumentValue = email} );
            return WithObjectField("customerRecover", alias, customerRecoverPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerRecover()
        {
            return ExceptField("customerRecover");
        }

        public MutationQueryBuilder WithCustomerReset(CustomerResetPayloadQueryBuilder customerResetPayloadQueryBuilder, QueryBuilderParameter<Guid> id, QueryBuilderParameter<CustomerResetInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("customerReset", alias, customerResetPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerReset()
        {
            return ExceptField("customerReset");
        }

        public MutationQueryBuilder WithCustomerResetByUrl(CustomerResetByUrlPayloadQueryBuilder customerResetByUrlPayloadQueryBuilder, QueryBuilderParameter<object> resetUrl, QueryBuilderParameter<string> password, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resetUrl", ArgumentValue = resetUrl} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "password", ArgumentValue = password} );
            return WithObjectField("customerResetByUrl", alias, customerResetByUrlPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerResetByUrl()
        {
            return ExceptField("customerResetByUrl");
        }

        public MutationQueryBuilder WithCustomerUpdate(CustomerUpdatePayloadQueryBuilder customerUpdatePayloadQueryBuilder, QueryBuilderParameter<string> customerAccessToken, QueryBuilderParameter<CustomerUpdateInput> customer, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customerAccessToken", ArgumentValue = customerAccessToken} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customer", ArgumentValue = customer} );
            return WithObjectField("customerUpdate", alias, customerUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCustomerUpdate()
        {
            return ExceptField("customerUpdate");
        }
    }

    public class NodeQueryBuilder : GraphQlQueryBuilder<NodeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" }
            };

        protected override string TypeName { get { return "Node"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NodeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public NodeQueryBuilder WithAppliedGiftCardFragment(AppliedGiftCardQueryBuilder appliedGiftCardQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(appliedGiftCardQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithArticleFragment(ArticleQueryBuilder articleQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(articleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithBlogFragment(BlogQueryBuilder blogQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(blogQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithCartFragment(CartQueryBuilder cartQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(cartQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithCartLineFragment(CartLineQueryBuilder cartLineQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(cartLineQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithCheckoutFragment(CheckoutQueryBuilder checkoutQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithCheckoutLineItemFragment(CheckoutLineItemQueryBuilder checkoutLineItemQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(checkoutLineItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithCollectionFragment(CollectionQueryBuilder collectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithCommentFragment(CommentQueryBuilder commentQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(commentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithExternalVideoFragment(ExternalVideoQueryBuilder externalVideoQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalVideoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithGenericFileFragment(GenericFileQueryBuilder genericFileQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithLocationFragment(LocationQueryBuilder locationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(locationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithMailingAddressFragment(MailingAddressQueryBuilder mailingAddressQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithMediaImageFragment(MediaImageQueryBuilder mediaImageQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mediaImageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithMenuFragment(MenuQueryBuilder menuQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(menuQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithMenuItemFragment(MenuItemQueryBuilder menuItemQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(menuItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithMetafieldFragment(MetafieldQueryBuilder metafieldQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(metafieldQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithModel3DFragment(Model3DQueryBuilder model3DQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(model3DQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithOrderFragment(OrderQueryBuilder orderQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(orderQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithPageFragment(PageQueryBuilder pageQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(pageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithPaymentFragment(PaymentQueryBuilder paymentQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(paymentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithProductFragment(ProductQueryBuilder productQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithProductOptionFragment(ProductOptionQueryBuilder productOptionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productOptionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithProductVariantFragment(ProductVariantQueryBuilder productVariantQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productVariantQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithShopFragment(ShopQueryBuilder shopQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(shopQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithShopPolicyFragment(ShopPolicyQueryBuilder shopPolicyQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(shopPolicyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithUrlRedirectFragment(UrlRedirectQueryBuilder urlRedirectQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(urlRedirectQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithVideoFragment(VideoQueryBuilder videoQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(videoQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class OnlineStorePublishableQueryBuilder : GraphQlQueryBuilder<OnlineStorePublishableQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "onlineStoreUrl", IsComplex = true }
            };

        protected override string TypeName { get { return "OnlineStorePublishable"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OnlineStorePublishableQueryBuilder WithOnlineStoreUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("onlineStoreUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public OnlineStorePublishableQueryBuilder ExceptOnlineStoreUrl()
        {
            return ExceptField("onlineStoreUrl");
        }

        public OnlineStorePublishableQueryBuilder WithArticleFragment(ArticleQueryBuilder articleQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(articleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OnlineStorePublishableQueryBuilder WithBlogFragment(BlogQueryBuilder blogQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(blogQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OnlineStorePublishableQueryBuilder WithCollectionFragment(CollectionQueryBuilder collectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OnlineStorePublishableQueryBuilder WithPageFragment(PageQueryBuilder pageQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(pageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OnlineStorePublishableQueryBuilder WithProductFragment(ProductQueryBuilder productQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(productQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class OrderQueryBuilder : GraphQlQueryBuilder<OrderQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cancelReason" },
                new GraphQlFieldMetadata { Name = "canceledAt", IsComplex = true },
                new GraphQlFieldMetadata { Name = "currencyCode" },
                new GraphQlFieldMetadata { Name = "currentSubtotalPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "currentTotalDuties", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "currentTotalPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "currentTotalTax", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "customerLocale" },
                new GraphQlFieldMetadata { Name = "customerUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "discountApplications", IsComplex = true, QueryBuilderType = typeof(DiscountApplicationConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "edited" },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "financialStatus" },
                new GraphQlFieldMetadata { Name = "fulfillmentStatus" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lineItems", IsComplex = true, QueryBuilderType = typeof(OrderLineItemConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafield", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafields", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "orderNumber" },
                new GraphQlFieldMetadata { Name = "originalTotalDuties", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "originalTotalPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "phone" },
                new GraphQlFieldMetadata { Name = "processedAt", IsComplex = true },
                new GraphQlFieldMetadata { Name = "shippingAddress", IsComplex = true, QueryBuilderType = typeof(MailingAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "shippingDiscountAllocations", IsComplex = true, QueryBuilderType = typeof(DiscountAllocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "statusUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "subtotalPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "successfulFulfillments", IsComplex = true, QueryBuilderType = typeof(FulfillmentQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalRefunded", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalShippingPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalTax", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "Order"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OrderQueryBuilder WithCancelReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cancelReason", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptCancelReason()
        {
            return ExceptField("cancelReason");
        }

        public OrderQueryBuilder WithCanceledAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("canceledAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptCanceledAt()
        {
            return ExceptField("canceledAt");
        }

        public OrderQueryBuilder WithCurrencyCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currencyCode", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptCurrencyCode()
        {
            return ExceptField("currencyCode");
        }

        public OrderQueryBuilder WithCurrentSubtotalPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("currentSubtotalPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptCurrentSubtotalPrice()
        {
            return ExceptField("currentSubtotalPrice");
        }

        public OrderQueryBuilder WithCurrentTotalDuties(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("currentTotalDuties", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptCurrentTotalDuties()
        {
            return ExceptField("currentTotalDuties");
        }

        public OrderQueryBuilder WithCurrentTotalPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("currentTotalPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptCurrentTotalPrice()
        {
            return ExceptField("currentTotalPrice");
        }

        public OrderQueryBuilder WithCurrentTotalTax(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("currentTotalTax", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptCurrentTotalTax()
        {
            return ExceptField("currentTotalTax");
        }

        public OrderQueryBuilder WithCustomerLocale(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("customerLocale", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptCustomerLocale()
        {
            return ExceptField("customerLocale");
        }

        public OrderQueryBuilder WithCustomerUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("customerUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptCustomerUrl()
        {
            return ExceptField("customerUrl");
        }

        public OrderQueryBuilder WithDiscountApplications(DiscountApplicationConnectionQueryBuilder discountApplicationConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("discountApplications", alias, discountApplicationConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrderQueryBuilder ExceptDiscountApplications()
        {
            return ExceptField("discountApplications");
        }

        public OrderQueryBuilder WithEdited(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("edited", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptEdited()
        {
            return ExceptField("edited");
        }

        public OrderQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public OrderQueryBuilder WithFinancialStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("financialStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptFinancialStatus()
        {
            return ExceptField("financialStatus");
        }

        public OrderQueryBuilder WithFulfillmentStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fulfillmentStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptFulfillmentStatus()
        {
            return ExceptField("fulfillmentStatus");
        }

        public OrderQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public OrderQueryBuilder WithLineItems(OrderLineItemConnectionQueryBuilder orderLineItemConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("lineItems", alias, orderLineItemConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrderQueryBuilder ExceptLineItems()
        {
            return ExceptField("lineItems");
        }

        public OrderQueryBuilder WithMetafield(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<string> @namespace, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "namespace", ArgumentValue = @namespace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("metafield", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrderQueryBuilder ExceptMetafield()
        {
            return ExceptField("metafield");
        }

        public OrderQueryBuilder WithMetafields(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<IEnumerable<HasMetafieldsIdentifier>> identifiers, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "identifiers", ArgumentValue = identifiers} );
            return WithObjectField("metafields", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrderQueryBuilder ExceptMetafields()
        {
            return ExceptField("metafields");
        }

        public OrderQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public OrderQueryBuilder WithOrderNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("orderNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptOrderNumber()
        {
            return ExceptField("orderNumber");
        }

        public OrderQueryBuilder WithOriginalTotalDuties(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("originalTotalDuties", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptOriginalTotalDuties()
        {
            return ExceptField("originalTotalDuties");
        }

        public OrderQueryBuilder WithOriginalTotalPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("originalTotalPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptOriginalTotalPrice()
        {
            return ExceptField("originalTotalPrice");
        }

        public OrderQueryBuilder WithPhone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("phone", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptPhone()
        {
            return ExceptField("phone");
        }

        public OrderQueryBuilder WithProcessedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("processedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptProcessedAt()
        {
            return ExceptField("processedAt");
        }

        public OrderQueryBuilder WithShippingAddress(MailingAddressQueryBuilder mailingAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingAddress", alias, mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptShippingAddress()
        {
            return ExceptField("shippingAddress");
        }

        public OrderQueryBuilder WithShippingDiscountAllocations(DiscountAllocationQueryBuilder discountAllocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingDiscountAllocations", alias, discountAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptShippingDiscountAllocations()
        {
            return ExceptField("shippingDiscountAllocations");
        }

        public OrderQueryBuilder WithStatusUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statusUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptStatusUrl()
        {
            return ExceptField("statusUrl");
        }

        public OrderQueryBuilder WithSubtotalPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("subtotalPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptSubtotalPrice()
        {
            return ExceptField("subtotalPrice");
        }

        public OrderQueryBuilder WithSuccessfulFulfillments(FulfillmentQueryBuilder fulfillmentQueryBuilder, QueryBuilderParameter<int?> first = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            return WithObjectField("successfulFulfillments", alias, fulfillmentQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrderQueryBuilder ExceptSuccessfulFulfillments()
        {
            return ExceptField("successfulFulfillments");
        }

        public OrderQueryBuilder WithTotalPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptTotalPrice()
        {
            return ExceptField("totalPrice");
        }

        public OrderQueryBuilder WithTotalRefunded(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalRefunded", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptTotalRefunded()
        {
            return ExceptField("totalRefunded");
        }

        public OrderQueryBuilder WithTotalShippingPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalShippingPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptTotalShippingPrice()
        {
            return ExceptField("totalShippingPrice");
        }

        public OrderQueryBuilder WithTotalTax(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalTax", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderQueryBuilder ExceptTotalTax()
        {
            return ExceptField("totalTax");
        }
    }

    public class OrderConnectionQueryBuilder : GraphQlQueryBuilder<OrderConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(OrderEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(OrderQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount", IsComplex = true }
            };

        protected override string TypeName { get { return "OrderConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OrderConnectionQueryBuilder WithEdges(OrderEdgeQueryBuilder orderEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, orderEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public OrderConnectionQueryBuilder WithNodes(OrderQueryBuilder orderQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, orderQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public OrderConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public OrderConnectionQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderConnectionQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class OrderEdgeQueryBuilder : GraphQlQueryBuilder<OrderEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(OrderQueryBuilder) }
            };

        protected override string TypeName { get { return "OrderEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OrderEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public OrderEdgeQueryBuilder WithNode(OrderQueryBuilder orderQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, orderQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class OrderLineItemQueryBuilder : GraphQlQueryBuilder<OrderLineItemQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "currentQuantity" },
                new GraphQlFieldMetadata { Name = "customAttributes", IsComplex = true, QueryBuilderType = typeof(AttributeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "discountAllocations", IsComplex = true, QueryBuilderType = typeof(DiscountAllocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "discountedTotalPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "originalTotalPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "quantity" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "variant", IsComplex = true, QueryBuilderType = typeof(ProductVariantQueryBuilder) }
            };

        protected override string TypeName { get { return "OrderLineItem"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OrderLineItemQueryBuilder WithCurrentQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentQuantity", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemQueryBuilder ExceptCurrentQuantity()
        {
            return ExceptField("currentQuantity");
        }

        public OrderLineItemQueryBuilder WithCustomAttributes(AttributeQueryBuilder attributeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customAttributes", alias, attributeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemQueryBuilder ExceptCustomAttributes()
        {
            return ExceptField("customAttributes");
        }

        public OrderLineItemQueryBuilder WithDiscountAllocations(DiscountAllocationQueryBuilder discountAllocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAllocations", alias, discountAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemQueryBuilder ExceptDiscountAllocations()
        {
            return ExceptField("discountAllocations");
        }

        public OrderLineItemQueryBuilder WithDiscountedTotalPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountedTotalPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemQueryBuilder ExceptDiscountedTotalPrice()
        {
            return ExceptField("discountedTotalPrice");
        }

        public OrderLineItemQueryBuilder WithOriginalTotalPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("originalTotalPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemQueryBuilder ExceptOriginalTotalPrice()
        {
            return ExceptField("originalTotalPrice");
        }

        public OrderLineItemQueryBuilder WithQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantity", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemQueryBuilder ExceptQuantity()
        {
            return ExceptField("quantity");
        }

        public OrderLineItemQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public OrderLineItemQueryBuilder WithVariant(ProductVariantQueryBuilder productVariantQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("variant", alias, productVariantQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemQueryBuilder ExceptVariant()
        {
            return ExceptField("variant");
        }
    }

    public class OrderLineItemConnectionQueryBuilder : GraphQlQueryBuilder<OrderLineItemConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(OrderLineItemEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(OrderLineItemQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "OrderLineItemConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OrderLineItemConnectionQueryBuilder WithEdges(OrderLineItemEdgeQueryBuilder orderLineItemEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, orderLineItemEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public OrderLineItemConnectionQueryBuilder WithNodes(OrderLineItemQueryBuilder orderLineItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, orderLineItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public OrderLineItemConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class OrderLineItemEdgeQueryBuilder : GraphQlQueryBuilder<OrderLineItemEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(OrderLineItemQueryBuilder) }
            };

        protected override string TypeName { get { return "OrderLineItemEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OrderLineItemEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public OrderLineItemEdgeQueryBuilder WithNode(OrderLineItemQueryBuilder orderLineItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, orderLineItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrderLineItemEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class PageQueryBuilder : GraphQlQueryBuilder<PageQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "body", IsComplex = true },
                new GraphQlFieldMetadata { Name = "bodySummary" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "metafield", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafields", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "onlineStoreUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "seo", IsComplex = true, QueryBuilderType = typeof(SeoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "updatedAt" }
            };

        protected override string TypeName { get { return "Page"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageQueryBuilder WithBody(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("body", alias, new GraphQlDirective[] { include, skip });
        }

        public PageQueryBuilder ExceptBody()
        {
            return ExceptField("body");
        }

        public PageQueryBuilder WithBodySummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bodySummary", alias, new GraphQlDirective[] { include, skip });
        }

        public PageQueryBuilder ExceptBodySummary()
        {
            return ExceptField("bodySummary");
        }

        public PageQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PageQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public PageQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public PageQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public PageQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PageQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PageQueryBuilder WithMetafield(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<string> @namespace, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "namespace", ArgumentValue = @namespace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("metafield", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptMetafield()
        {
            return ExceptField("metafield");
        }

        public PageQueryBuilder WithMetafields(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<IEnumerable<HasMetafieldsIdentifier>> identifiers, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "identifiers", ArgumentValue = identifiers} );
            return WithObjectField("metafields", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptMetafields()
        {
            return ExceptField("metafields");
        }

        public PageQueryBuilder WithOnlineStoreUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("onlineStoreUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public PageQueryBuilder ExceptOnlineStoreUrl()
        {
            return ExceptField("onlineStoreUrl");
        }

        public PageQueryBuilder WithSeo(SeoQueryBuilder seoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("seo", alias, seoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryBuilder ExceptSeo()
        {
            return ExceptField("seo");
        }

        public PageQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public PageQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public PageQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PageQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }
    }

    public class PageConnectionQueryBuilder : GraphQlQueryBuilder<PageConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(PageEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(PageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "PageConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageConnectionQueryBuilder WithEdges(PageEdgeQueryBuilder pageEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, pageEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public PageConnectionQueryBuilder WithNodes(PageQueryBuilder pageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, pageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public PageConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class PageEdgeQueryBuilder : GraphQlQueryBuilder<PageEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(PageQueryBuilder) }
            };

        protected override string TypeName { get { return "PageEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public PageEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public PageEdgeQueryBuilder WithNode(PageQueryBuilder pageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, pageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class PageInfoQueryBuilder : GraphQlQueryBuilder<PageInfoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "endCursor" },
                new GraphQlFieldMetadata { Name = "hasNextPage" },
                new GraphQlFieldMetadata { Name = "hasPreviousPage" },
                new GraphQlFieldMetadata { Name = "startCursor" }
            };

        protected override string TypeName { get { return "PageInfo"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageInfoQueryBuilder WithEndCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endCursor", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptEndCursor()
        {
            return ExceptField("endCursor");
        }

        public PageInfoQueryBuilder WithHasNextPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasNextPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptHasNextPage()
        {
            return ExceptField("hasNextPage");
        }

        public PageInfoQueryBuilder WithHasPreviousPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasPreviousPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptHasPreviousPage()
        {
            return ExceptField("hasPreviousPage");
        }

        public PageInfoQueryBuilder WithStartCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startCursor", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptStartCursor()
        {
            return ExceptField("startCursor");
        }
    }

    public class PaymentQueryBuilder : GraphQlQueryBuilder<PaymentQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "amount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "billingAddress", IsComplex = true, QueryBuilderType = typeof(MailingAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkout", IsComplex = true, QueryBuilderType = typeof(CheckoutQueryBuilder) },
                new GraphQlFieldMetadata { Name = "creditCard", IsComplex = true, QueryBuilderType = typeof(CreditCardQueryBuilder) },
                new GraphQlFieldMetadata { Name = "errorMessage" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "idempotencyKey" },
                new GraphQlFieldMetadata { Name = "nextActionUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "ready" },
                new GraphQlFieldMetadata { Name = "test" },
                new GraphQlFieldMetadata { Name = "transaction", IsComplex = true, QueryBuilderType = typeof(TransactionQueryBuilder) }
            };

        protected override string TypeName { get { return "Payment"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PaymentQueryBuilder WithAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("amount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public PaymentQueryBuilder WithBillingAddress(MailingAddressQueryBuilder mailingAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("billingAddress", alias, mailingAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptBillingAddress()
        {
            return ExceptField("billingAddress");
        }

        public PaymentQueryBuilder WithCheckout(CheckoutQueryBuilder checkoutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkout", alias, checkoutQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptCheckout()
        {
            return ExceptField("checkout");
        }

        public PaymentQueryBuilder WithCreditCard(CreditCardQueryBuilder creditCardQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("creditCard", alias, creditCardQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptCreditCard()
        {
            return ExceptField("creditCard");
        }

        public PaymentQueryBuilder WithErrorMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("errorMessage", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptErrorMessage()
        {
            return ExceptField("errorMessage");
        }

        public PaymentQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PaymentQueryBuilder WithIdempotencyKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("idempotencyKey", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptIdempotencyKey()
        {
            return ExceptField("idempotencyKey");
        }

        public PaymentQueryBuilder WithNextActionUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nextActionUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptNextActionUrl()
        {
            return ExceptField("nextActionUrl");
        }

        public PaymentQueryBuilder WithReady(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ready", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptReady()
        {
            return ExceptField("ready");
        }

        public PaymentQueryBuilder WithTest(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("test", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptTest()
        {
            return ExceptField("test");
        }

        public PaymentQueryBuilder WithTransaction(TransactionQueryBuilder transactionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("transaction", alias, transactionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentQueryBuilder ExceptTransaction()
        {
            return ExceptField("transaction");
        }
    }

    public class PaymentSettingsQueryBuilder : GraphQlQueryBuilder<PaymentSettingsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "acceptedCardBrands", IsComplex = true },
                new GraphQlFieldMetadata { Name = "cardVaultUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "countryCode" },
                new GraphQlFieldMetadata { Name = "currencyCode" },
                new GraphQlFieldMetadata { Name = "enabledPresentmentCurrencies", IsComplex = true },
                new GraphQlFieldMetadata { Name = "shopifyPaymentsAccountId" },
                new GraphQlFieldMetadata { Name = "supportedDigitalWallets", IsComplex = true }
            };

        protected override string TypeName { get { return "PaymentSettings"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PaymentSettingsQueryBuilder WithAcceptedCardBrands(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("acceptedCardBrands", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentSettingsQueryBuilder ExceptAcceptedCardBrands()
        {
            return ExceptField("acceptedCardBrands");
        }

        public PaymentSettingsQueryBuilder WithCardVaultUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cardVaultUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentSettingsQueryBuilder ExceptCardVaultUrl()
        {
            return ExceptField("cardVaultUrl");
        }

        public PaymentSettingsQueryBuilder WithCountryCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryCode", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentSettingsQueryBuilder ExceptCountryCode()
        {
            return ExceptField("countryCode");
        }

        public PaymentSettingsQueryBuilder WithCurrencyCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currencyCode", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentSettingsQueryBuilder ExceptCurrencyCode()
        {
            return ExceptField("currencyCode");
        }

        public PaymentSettingsQueryBuilder WithEnabledPresentmentCurrencies(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("enabledPresentmentCurrencies", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentSettingsQueryBuilder ExceptEnabledPresentmentCurrencies()
        {
            return ExceptField("enabledPresentmentCurrencies");
        }

        public PaymentSettingsQueryBuilder WithShopifyPaymentsAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shopifyPaymentsAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentSettingsQueryBuilder ExceptShopifyPaymentsAccountId()
        {
            return ExceptField("shopifyPaymentsAccountId");
        }

        public PaymentSettingsQueryBuilder WithSupportedDigitalWallets(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("supportedDigitalWallets", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentSettingsQueryBuilder ExceptSupportedDigitalWallets()
        {
            return ExceptField("supportedDigitalWallets");
        }
    }

    public class PricingPercentageValueQueryBuilder : GraphQlQueryBuilder<PricingPercentageValueQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "percentage" }
            };

        protected override string TypeName { get { return "PricingPercentageValue"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PricingPercentageValueQueryBuilder WithPercentage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("percentage", alias, new GraphQlDirective[] { include, skip });
        }

        public PricingPercentageValueQueryBuilder ExceptPercentage()
        {
            return ExceptField("percentage");
        }
    }

    public class PricingValueQueryBuilder : GraphQlQueryBuilder<PricingValueQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        protected override string TypeName { get { return "PricingValue"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PricingValueQueryBuilder WithMoneyV2Fragment(MoneyV2QueryBuilder moneyV2QueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PricingValueQueryBuilder WithPricingPercentageValueFragment(PricingPercentageValueQueryBuilder pricingPercentageValueQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(pricingPercentageValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ProductQueryBuilder : GraphQlQueryBuilder<ProductQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "availableForSale" },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "compareAtPriceRange", IsComplex = true, QueryBuilderType = typeof(ProductPriceRangeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "descriptionHtml", IsComplex = true },
                new GraphQlFieldMetadata { Name = "featuredImage", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "images", IsComplex = true, QueryBuilderType = typeof(ImageConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isGiftCard" },
                new GraphQlFieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafield", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafields", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "onlineStoreUrl", IsComplex = true },
                new GraphQlFieldMetadata { Name = "options", IsComplex = true, QueryBuilderType = typeof(ProductOptionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "priceRange", IsComplex = true, QueryBuilderType = typeof(ProductPriceRangeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "productType" },
                new GraphQlFieldMetadata { Name = "publishedAt", IsComplex = true },
                new GraphQlFieldMetadata { Name = "requiresSellingPlan" },
                new GraphQlFieldMetadata { Name = "sellingPlanGroups", IsComplex = true, QueryBuilderType = typeof(SellingPlanGroupConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "seo", IsComplex = true, QueryBuilderType = typeof(SeoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tags", IsComplex = true },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "totalInventory" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "variantBySelectedOptions", IsComplex = true, QueryBuilderType = typeof(ProductVariantQueryBuilder) },
                new GraphQlFieldMetadata { Name = "variants", IsComplex = true, QueryBuilderType = typeof(ProductVariantConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "vendor" }
            };

        protected override string TypeName { get { return "Product"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProductQueryBuilder WithAvailableForSale(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("availableForSale", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptAvailableForSale()
        {
            return ExceptField("availableForSale");
        }

        public ProductQueryBuilder WithCollections(CollectionConnectionQueryBuilder collectionConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("collections", alias, collectionConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public ProductQueryBuilder WithCompareAtPriceRange(ProductPriceRangeQueryBuilder productPriceRangeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("compareAtPriceRange", alias, productPriceRangeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptCompareAtPriceRange()
        {
            return ExceptField("compareAtPriceRange");
        }

        public ProductQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ProductQueryBuilder WithDescription(QueryBuilderParameter<int?> truncateAt = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (truncateAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "truncateAt", ArgumentValue = truncateAt} );

            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ProductQueryBuilder WithDescriptionHtml(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("descriptionHtml", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptDescriptionHtml()
        {
            return ExceptField("descriptionHtml");
        }

        public ProductQueryBuilder WithFeaturedImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("featuredImage", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptFeaturedImage()
        {
            return ExceptField("featuredImage");
        }

        public ProductQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public ProductQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ProductQueryBuilder WithImages(ImageConnectionQueryBuilder imageConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<ProductImageSortKeys?> sortKey = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            return WithObjectField("images", alias, imageConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptImages()
        {
            return ExceptField("images");
        }

        public ProductQueryBuilder WithIsGiftCard(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isGiftCard", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptIsGiftCard()
        {
            return ExceptField("isGiftCard");
        }

        public ProductQueryBuilder WithMedia(MediaConnectionQueryBuilder mediaConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<ProductMediaSortKeys?> sortKey = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            return WithObjectField("media", alias, mediaConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public ProductQueryBuilder WithMetafield(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<string> @namespace, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "namespace", ArgumentValue = @namespace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("metafield", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptMetafield()
        {
            return ExceptField("metafield");
        }

        public ProductQueryBuilder WithMetafields(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<IEnumerable<HasMetafieldsIdentifier>> identifiers, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "identifiers", ArgumentValue = identifiers} );
            return WithObjectField("metafields", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptMetafields()
        {
            return ExceptField("metafields");
        }

        public ProductQueryBuilder WithOnlineStoreUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("onlineStoreUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptOnlineStoreUrl()
        {
            return ExceptField("onlineStoreUrl");
        }

        public ProductQueryBuilder WithOptions(ProductOptionQueryBuilder productOptionQueryBuilder, QueryBuilderParameter<int?> first = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            return WithObjectField("options", alias, productOptionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptOptions()
        {
            return ExceptField("options");
        }

        public ProductQueryBuilder WithPriceRange(ProductPriceRangeQueryBuilder productPriceRangeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("priceRange", alias, productPriceRangeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptPriceRange()
        {
            return ExceptField("priceRange");
        }

        public ProductQueryBuilder WithProductType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("productType", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptProductType()
        {
            return ExceptField("productType");
        }

        public ProductQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }

        public ProductQueryBuilder WithRequiresSellingPlan(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requiresSellingPlan", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptRequiresSellingPlan()
        {
            return ExceptField("requiresSellingPlan");
        }

        public ProductQueryBuilder WithSellingPlanGroups(SellingPlanGroupConnectionQueryBuilder sellingPlanGroupConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("sellingPlanGroups", alias, sellingPlanGroupConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptSellingPlanGroups()
        {
            return ExceptField("sellingPlanGroups");
        }

        public ProductQueryBuilder WithSeo(SeoQueryBuilder seoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("seo", alias, seoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptSeo()
        {
            return ExceptField("seo");
        }

        public ProductQueryBuilder WithTags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tags", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptTags()
        {
            return ExceptField("tags");
        }

        public ProductQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ProductQueryBuilder WithTotalInventory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalInventory", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptTotalInventory()
        {
            return ExceptField("totalInventory");
        }

        public ProductQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ProductQueryBuilder WithVariantBySelectedOptions(ProductVariantQueryBuilder productVariantQueryBuilder, QueryBuilderParameter<IEnumerable<SelectedOptionInput>> selectedOptions, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "selectedOptions", ArgumentValue = selectedOptions} );
            return WithObjectField("variantBySelectedOptions", alias, productVariantQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptVariantBySelectedOptions()
        {
            return ExceptField("variantBySelectedOptions");
        }

        public ProductQueryBuilder WithVariants(ProductVariantConnectionQueryBuilder productVariantConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<ProductVariantSortKeys?> sortKey = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            return WithObjectField("variants", alias, productVariantConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptVariants()
        {
            return ExceptField("variants");
        }

        public ProductQueryBuilder WithVendor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("vendor", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptVendor()
        {
            return ExceptField("vendor");
        }
    }

    public class ProductConnectionQueryBuilder : GraphQlQueryBuilder<ProductConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(ProductEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "filters", IsComplex = true, QueryBuilderType = typeof(FilterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ProductQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "ProductConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProductConnectionQueryBuilder WithEdges(ProductEdgeQueryBuilder productEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, productEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public ProductConnectionQueryBuilder WithFilters(FilterQueryBuilder filterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("filters", alias, filterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptFilters()
        {
            return ExceptField("filters");
        }

        public ProductConnectionQueryBuilder WithNodes(ProductQueryBuilder productQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ProductConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class ProductEdgeQueryBuilder : GraphQlQueryBuilder<ProductEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ProductQueryBuilder) }
            };

        protected override string TypeName { get { return "ProductEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProductEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public ProductEdgeQueryBuilder WithNode(ProductQueryBuilder productQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class ProductOptionQueryBuilder : GraphQlQueryBuilder<ProductOptionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "values", IsComplex = true }
            };

        protected override string TypeName { get { return "ProductOption"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProductOptionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductOptionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ProductOptionQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductOptionQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ProductOptionQueryBuilder WithValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("values", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductOptionQueryBuilder ExceptValues()
        {
            return ExceptField("values");
        }
    }

    public class ProductPriceRangeQueryBuilder : GraphQlQueryBuilder<ProductPriceRangeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "maxVariantPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "minVariantPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "ProductPriceRange"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProductPriceRangeQueryBuilder WithMaxVariantPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("maxVariantPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceRangeQueryBuilder ExceptMaxVariantPrice()
        {
            return ExceptField("maxVariantPrice");
        }

        public ProductPriceRangeQueryBuilder WithMinVariantPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("minVariantPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceRangeQueryBuilder ExceptMinVariantPrice()
        {
            return ExceptField("minVariantPrice");
        }
    }

    public class ProductVariantQueryBuilder : GraphQlQueryBuilder<ProductVariantQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "availableForSale" },
                new GraphQlFieldMetadata { Name = "barcode" },
                new GraphQlFieldMetadata { Name = "compareAtPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "currentlyNotInStock" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "image", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafield", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafields", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "price", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "product", IsComplex = true, QueryBuilderType = typeof(ProductQueryBuilder) },
                new GraphQlFieldMetadata { Name = "quantityAvailable" },
                new GraphQlFieldMetadata { Name = "requiresShipping" },
                new GraphQlFieldMetadata { Name = "selectedOptions", IsComplex = true, QueryBuilderType = typeof(SelectedOptionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sellingPlanAllocations", IsComplex = true, QueryBuilderType = typeof(SellingPlanAllocationConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sku" },
                new GraphQlFieldMetadata { Name = "storeAvailability", IsComplex = true, QueryBuilderType = typeof(StoreAvailabilityConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "unitPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "unitPriceMeasurement", IsComplex = true, QueryBuilderType = typeof(UnitPriceMeasurementQueryBuilder) },
                new GraphQlFieldMetadata { Name = "weight" },
                new GraphQlFieldMetadata { Name = "weightUnit" }
            };

        protected override string TypeName { get { return "ProductVariant"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProductVariantQueryBuilder WithAvailableForSale(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("availableForSale", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptAvailableForSale()
        {
            return ExceptField("availableForSale");
        }

        public ProductVariantQueryBuilder WithBarcode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("barcode", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptBarcode()
        {
            return ExceptField("barcode");
        }

        public ProductVariantQueryBuilder WithCompareAtPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("compareAtPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptCompareAtPrice()
        {
            return ExceptField("compareAtPrice");
        }

        public ProductVariantQueryBuilder WithCurrentlyNotInStock(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentlyNotInStock", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptCurrentlyNotInStock()
        {
            return ExceptField("currentlyNotInStock");
        }

        public ProductVariantQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ProductVariantQueryBuilder WithImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("image", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptImage()
        {
            return ExceptField("image");
        }

        public ProductVariantQueryBuilder WithMetafield(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<string> @namespace, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "namespace", ArgumentValue = @namespace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("metafield", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductVariantQueryBuilder ExceptMetafield()
        {
            return ExceptField("metafield");
        }

        public ProductVariantQueryBuilder WithMetafields(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<IEnumerable<HasMetafieldsIdentifier>> identifiers, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "identifiers", ArgumentValue = identifiers} );
            return WithObjectField("metafields", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductVariantQueryBuilder ExceptMetafields()
        {
            return ExceptField("metafields");
        }

        public ProductVariantQueryBuilder WithPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("price", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }

        public ProductVariantQueryBuilder WithProduct(ProductQueryBuilder productQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("product", alias, productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptProduct()
        {
            return ExceptField("product");
        }

        public ProductVariantQueryBuilder WithQuantityAvailable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantityAvailable", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptQuantityAvailable()
        {
            return ExceptField("quantityAvailable");
        }

        public ProductVariantQueryBuilder WithRequiresShipping(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requiresShipping", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptRequiresShipping()
        {
            return ExceptField("requiresShipping");
        }

        public ProductVariantQueryBuilder WithSelectedOptions(SelectedOptionQueryBuilder selectedOptionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("selectedOptions", alias, selectedOptionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptSelectedOptions()
        {
            return ExceptField("selectedOptions");
        }

        public ProductVariantQueryBuilder WithSellingPlanAllocations(SellingPlanAllocationConnectionQueryBuilder sellingPlanAllocationConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("sellingPlanAllocations", alias, sellingPlanAllocationConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductVariantQueryBuilder ExceptSellingPlanAllocations()
        {
            return ExceptField("sellingPlanAllocations");
        }

        public ProductVariantQueryBuilder WithSku(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sku", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptSku()
        {
            return ExceptField("sku");
        }

        public ProductVariantQueryBuilder WithStoreAvailability(StoreAvailabilityConnectionQueryBuilder storeAvailabilityConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("storeAvailability", alias, storeAvailabilityConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductVariantQueryBuilder ExceptStoreAvailability()
        {
            return ExceptField("storeAvailability");
        }

        public ProductVariantQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ProductVariantQueryBuilder WithUnitPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("unitPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptUnitPrice()
        {
            return ExceptField("unitPrice");
        }

        public ProductVariantQueryBuilder WithUnitPriceMeasurement(UnitPriceMeasurementQueryBuilder unitPriceMeasurementQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("unitPriceMeasurement", alias, unitPriceMeasurementQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptUnitPriceMeasurement()
        {
            return ExceptField("unitPriceMeasurement");
        }

        public ProductVariantQueryBuilder WithWeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weight", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptWeight()
        {
            return ExceptField("weight");
        }

        public ProductVariantQueryBuilder WithWeightUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weightUnit", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantQueryBuilder ExceptWeightUnit()
        {
            return ExceptField("weightUnit");
        }
    }

    public class ProductVariantConnectionQueryBuilder : GraphQlQueryBuilder<ProductVariantConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(ProductVariantEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ProductVariantQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "ProductVariantConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProductVariantConnectionQueryBuilder WithEdges(ProductVariantEdgeQueryBuilder productVariantEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, productVariantEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public ProductVariantConnectionQueryBuilder WithNodes(ProductVariantQueryBuilder productVariantQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, productVariantQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ProductVariantConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class ProductVariantEdgeQueryBuilder : GraphQlQueryBuilder<ProductVariantEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ProductVariantQueryBuilder) }
            };

        protected override string TypeName { get { return "ProductVariantEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProductVariantEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public ProductVariantEdgeQueryBuilder WithNode(ProductVariantQueryBuilder productVariantQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, productVariantQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductVariantEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class QueryRootQueryBuilder : GraphQlQueryBuilder<QueryRootQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "articles", IsComplex = true, QueryBuilderType = typeof(ArticleConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "blog", IsComplex = true, QueryBuilderType = typeof(BlogQueryBuilder) },
                new GraphQlFieldMetadata { Name = "blogs", IsComplex = true, QueryBuilderType = typeof(BlogConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collection", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customer", IsComplex = true, QueryBuilderType = typeof(CustomerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "localization", IsComplex = true, QueryBuilderType = typeof(LocalizationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "locations", IsComplex = true, QueryBuilderType = typeof(LocationConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "menu", IsComplex = true, QueryBuilderType = typeof(MenuQueryBuilder) },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(NodeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(NodeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "page", IsComplex = true, QueryBuilderType = typeof(PageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pages", IsComplex = true, QueryBuilderType = typeof(PageConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "product", IsComplex = true, QueryBuilderType = typeof(ProductQueryBuilder) },
                new GraphQlFieldMetadata { Name = "productRecommendations", IsComplex = true, QueryBuilderType = typeof(ProductQueryBuilder) },
                new GraphQlFieldMetadata { Name = "productTags", IsComplex = true, QueryBuilderType = typeof(StringConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "productTypes", IsComplex = true, QueryBuilderType = typeof(StringConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "products", IsComplex = true, QueryBuilderType = typeof(ProductConnectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "publicApiVersions", IsComplex = true, QueryBuilderType = typeof(ApiVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "shop", IsComplex = true, QueryBuilderType = typeof(ShopQueryBuilder) },
                new GraphQlFieldMetadata { Name = "urlRedirects", IsComplex = true, QueryBuilderType = typeof(UrlRedirectConnectionQueryBuilder) }
            };

        protected override string TypeName { get { return "QueryRoot"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public QueryRootQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryRootQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryRootQueryBuilder WithArticles(ArticleConnectionQueryBuilder articleConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<ArticleSortKeys?> sortKey = null, QueryBuilderParameter<string> query = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            if (query != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "query", ArgumentValue = query} );

            return WithObjectField("articles", alias, articleConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptArticles()
        {
            return ExceptField("articles");
        }

        public QueryRootQueryBuilder WithBlog(BlogQueryBuilder blogQueryBuilder, QueryBuilderParameter<Guid?> id = null, QueryBuilderParameter<string> handle = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (handle != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "handle", ArgumentValue = handle} );

            return WithObjectField("blog", alias, blogQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptBlog()
        {
            return ExceptField("blog");
        }

        public QueryRootQueryBuilder WithBlogs(BlogConnectionQueryBuilder blogConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<BlogSortKeys?> sortKey = null, QueryBuilderParameter<string> query = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            if (query != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "query", ArgumentValue = query} );

            return WithObjectField("blogs", alias, blogConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptBlogs()
        {
            return ExceptField("blogs");
        }

        public QueryRootQueryBuilder WithCart(CartQueryBuilder cartQueryBuilder, QueryBuilderParameter<Guid> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("cart", alias, cartQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public QueryRootQueryBuilder WithCollection(CollectionQueryBuilder collectionQueryBuilder, QueryBuilderParameter<Guid?> id = null, QueryBuilderParameter<string> handle = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (handle != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "handle", ArgumentValue = handle} );

            return WithObjectField("collection", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptCollection()
        {
            return ExceptField("collection");
        }

        public QueryRootQueryBuilder WithCollections(CollectionConnectionQueryBuilder collectionConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<CollectionSortKeys?> sortKey = null, QueryBuilderParameter<string> query = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            if (query != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "query", ArgumentValue = query} );

            return WithObjectField("collections", alias, collectionConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public QueryRootQueryBuilder WithCustomer(CustomerQueryBuilder customerQueryBuilder, QueryBuilderParameter<string> customerAccessToken, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customerAccessToken", ArgumentValue = customerAccessToken} );
            return WithObjectField("customer", alias, customerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptCustomer()
        {
            return ExceptField("customer");
        }

        public QueryRootQueryBuilder WithLocalization(LocalizationQueryBuilder localizationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("localization", alias, localizationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryRootQueryBuilder ExceptLocalization()
        {
            return ExceptField("localization");
        }

        public QueryRootQueryBuilder WithLocations(LocationConnectionQueryBuilder locationConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<LocationSortKeys?> sortKey = null, QueryBuilderParameter<GeoCoordinateInput> near = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            if (near != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "near", ArgumentValue = near} );

            return WithObjectField("locations", alias, locationConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptLocations()
        {
            return ExceptField("locations");
        }

        public QueryRootQueryBuilder WithMenu(MenuQueryBuilder menuQueryBuilder, QueryBuilderParameter<string> handle, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "handle", ArgumentValue = handle} );
            return WithObjectField("menu", alias, menuQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptMenu()
        {
            return ExceptField("menu");
        }

        public QueryRootQueryBuilder WithNode(NodeQueryBuilder nodeQueryBuilder, QueryBuilderParameter<Guid> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("node", alias, nodeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }

        public QueryRootQueryBuilder WithNodes(NodeQueryBuilder nodeQueryBuilder, QueryBuilderParameter<IEnumerable<Guid>> ids, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "ids", ArgumentValue = ids} );
            return WithObjectField("nodes", alias, nodeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public QueryRootQueryBuilder WithPage(PageQueryBuilder pageQueryBuilder, QueryBuilderParameter<Guid?> id = null, QueryBuilderParameter<string> handle = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (handle != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "handle", ArgumentValue = handle} );

            return WithObjectField("page", alias, pageQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptPage()
        {
            return ExceptField("page");
        }

        public QueryRootQueryBuilder WithPages(PageConnectionQueryBuilder pageConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<PageSortKeys?> sortKey = null, QueryBuilderParameter<string> query = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            if (query != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "query", ArgumentValue = query} );

            return WithObjectField("pages", alias, pageConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptPages()
        {
            return ExceptField("pages");
        }

        public QueryRootQueryBuilder WithProduct(ProductQueryBuilder productQueryBuilder, QueryBuilderParameter<Guid?> id = null, QueryBuilderParameter<string> handle = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (handle != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "handle", ArgumentValue = handle} );

            return WithObjectField("product", alias, productQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptProduct()
        {
            return ExceptField("product");
        }

        public QueryRootQueryBuilder WithProductRecommendations(ProductQueryBuilder productQueryBuilder, QueryBuilderParameter<Guid> productId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "productId", ArgumentValue = productId} );
            return WithObjectField("productRecommendations", alias, productQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptProductRecommendations()
        {
            return ExceptField("productRecommendations");
        }

        public QueryRootQueryBuilder WithProductTags(StringConnectionQueryBuilder stringConnectionQueryBuilder, QueryBuilderParameter<int> first, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );
            return WithObjectField("productTags", alias, stringConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptProductTags()
        {
            return ExceptField("productTags");
        }

        public QueryRootQueryBuilder WithProductTypes(StringConnectionQueryBuilder stringConnectionQueryBuilder, QueryBuilderParameter<int> first, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );
            return WithObjectField("productTypes", alias, stringConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptProductTypes()
        {
            return ExceptField("productTypes");
        }

        public QueryRootQueryBuilder WithProducts(ProductConnectionQueryBuilder productConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, QueryBuilderParameter<ProductSortKeys?> sortKey = null, QueryBuilderParameter<string> query = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            if (sortKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sortKey", ArgumentValue = sortKey} );

            if (query != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "query", ArgumentValue = query} );

            return WithObjectField("products", alias, productConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptProducts()
        {
            return ExceptField("products");
        }

        public QueryRootQueryBuilder WithPublicApiVersions(ApiVersionQueryBuilder apiVersionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("publicApiVersions", alias, apiVersionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryRootQueryBuilder ExceptPublicApiVersions()
        {
            return ExceptField("publicApiVersions");
        }

        public QueryRootQueryBuilder WithShop(ShopQueryBuilder shopQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shop", alias, shopQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryRootQueryBuilder ExceptShop()
        {
            return ExceptField("shop");
        }

        public QueryRootQueryBuilder WithUrlRedirects(UrlRedirectConnectionQueryBuilder urlRedirectConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("urlRedirects", alias, urlRedirectConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryRootQueryBuilder ExceptUrlRedirects()
        {
            return ExceptField("urlRedirects");
        }
    }

    public class SeoQueryBuilder : GraphQlQueryBuilder<SeoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "title" }
            };

        protected override string TypeName { get { return "SEO"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SeoQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public SeoQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public SeoQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public SeoQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }
    }

    public class ScriptDiscountApplicationQueryBuilder : GraphQlQueryBuilder<ScriptDiscountApplicationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "allocationMethod" },
                new GraphQlFieldMetadata { Name = "targetSelection" },
                new GraphQlFieldMetadata { Name = "targetType" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(PricingValueQueryBuilder) }
            };

        protected override string TypeName { get { return "ScriptDiscountApplication"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ScriptDiscountApplicationQueryBuilder WithAllocationMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allocationMethod", alias, new GraphQlDirective[] { include, skip });
        }

        public ScriptDiscountApplicationQueryBuilder ExceptAllocationMethod()
        {
            return ExceptField("allocationMethod");
        }

        public ScriptDiscountApplicationQueryBuilder WithTargetSelection(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetSelection", alias, new GraphQlDirective[] { include, skip });
        }

        public ScriptDiscountApplicationQueryBuilder ExceptTargetSelection()
        {
            return ExceptField("targetSelection");
        }

        public ScriptDiscountApplicationQueryBuilder WithTargetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetType", alias, new GraphQlDirective[] { include, skip });
        }

        public ScriptDiscountApplicationQueryBuilder ExceptTargetType()
        {
            return ExceptField("targetType");
        }

        public ScriptDiscountApplicationQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ScriptDiscountApplicationQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ScriptDiscountApplicationQueryBuilder WithValue(PricingValueQueryBuilder pricingValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, pricingValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ScriptDiscountApplicationQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class SelectedOptionQueryBuilder : GraphQlQueryBuilder<SelectedOptionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "SelectedOption"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SelectedOptionQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SelectedOptionQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SelectedOptionQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public SelectedOptionQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class SellingPlanQueryBuilder : GraphQlQueryBuilder<SellingPlanQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkoutCharge", IsComplex = true, QueryBuilderType = typeof(SellingPlanCheckoutChargeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "options", IsComplex = true, QueryBuilderType = typeof(SellingPlanOptionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "priceAdjustments", IsComplex = true, QueryBuilderType = typeof(SellingPlanPriceAdjustmentQueryBuilder) },
                new GraphQlFieldMetadata { Name = "recurringDeliveries" }
            };

        protected override string TypeName { get { return "SellingPlan"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanQueryBuilder WithCheckoutCharge(SellingPlanCheckoutChargeQueryBuilder sellingPlanCheckoutChargeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutCharge", alias, sellingPlanCheckoutChargeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanQueryBuilder ExceptCheckoutCharge()
        {
            return ExceptField("checkoutCharge");
        }

        public SellingPlanQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public SellingPlanQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SellingPlanQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SellingPlanQueryBuilder WithOptions(SellingPlanOptionQueryBuilder sellingPlanOptionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("options", alias, sellingPlanOptionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanQueryBuilder ExceptOptions()
        {
            return ExceptField("options");
        }

        public SellingPlanQueryBuilder WithPriceAdjustments(SellingPlanPriceAdjustmentQueryBuilder sellingPlanPriceAdjustmentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("priceAdjustments", alias, sellingPlanPriceAdjustmentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanQueryBuilder ExceptPriceAdjustments()
        {
            return ExceptField("priceAdjustments");
        }

        public SellingPlanQueryBuilder WithRecurringDeliveries(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("recurringDeliveries", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanQueryBuilder ExceptRecurringDeliveries()
        {
            return ExceptField("recurringDeliveries");
        }
    }

    public class SellingPlanAllocationQueryBuilder : GraphQlQueryBuilder<SellingPlanAllocationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "checkoutChargeAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "priceAdjustments", IsComplex = true, QueryBuilderType = typeof(SellingPlanAllocationPriceAdjustmentQueryBuilder) },
                new GraphQlFieldMetadata { Name = "remainingBalanceChargeAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "sellingPlan", IsComplex = true, QueryBuilderType = typeof(SellingPlanQueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanAllocation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanAllocationQueryBuilder WithCheckoutChargeAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkoutChargeAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationQueryBuilder ExceptCheckoutChargeAmount()
        {
            return ExceptField("checkoutChargeAmount");
        }

        public SellingPlanAllocationQueryBuilder WithPriceAdjustments(SellingPlanAllocationPriceAdjustmentQueryBuilder sellingPlanAllocationPriceAdjustmentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("priceAdjustments", alias, sellingPlanAllocationPriceAdjustmentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationQueryBuilder ExceptPriceAdjustments()
        {
            return ExceptField("priceAdjustments");
        }

        public SellingPlanAllocationQueryBuilder WithRemainingBalanceChargeAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("remainingBalanceChargeAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationQueryBuilder ExceptRemainingBalanceChargeAmount()
        {
            return ExceptField("remainingBalanceChargeAmount");
        }

        public SellingPlanAllocationQueryBuilder WithSellingPlan(SellingPlanQueryBuilder sellingPlanQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("sellingPlan", alias, sellingPlanQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationQueryBuilder ExceptSellingPlan()
        {
            return ExceptField("sellingPlan");
        }
    }

    public class SellingPlanAllocationConnectionQueryBuilder : GraphQlQueryBuilder<SellingPlanAllocationConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(SellingPlanAllocationEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(SellingPlanAllocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanAllocationConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanAllocationConnectionQueryBuilder WithEdges(SellingPlanAllocationEdgeQueryBuilder sellingPlanAllocationEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, sellingPlanAllocationEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public SellingPlanAllocationConnectionQueryBuilder WithNodes(SellingPlanAllocationQueryBuilder sellingPlanAllocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, sellingPlanAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public SellingPlanAllocationConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class SellingPlanAllocationEdgeQueryBuilder : GraphQlQueryBuilder<SellingPlanAllocationEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(SellingPlanAllocationQueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanAllocationEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanAllocationEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public SellingPlanAllocationEdgeQueryBuilder WithNode(SellingPlanAllocationQueryBuilder sellingPlanAllocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, sellingPlanAllocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class SellingPlanAllocationPriceAdjustmentQueryBuilder : GraphQlQueryBuilder<SellingPlanAllocationPriceAdjustmentQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "compareAtPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "perDeliveryPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "price", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "unitPrice", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanAllocationPriceAdjustment"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanAllocationPriceAdjustmentQueryBuilder WithCompareAtPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("compareAtPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationPriceAdjustmentQueryBuilder ExceptCompareAtPrice()
        {
            return ExceptField("compareAtPrice");
        }

        public SellingPlanAllocationPriceAdjustmentQueryBuilder WithPerDeliveryPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("perDeliveryPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationPriceAdjustmentQueryBuilder ExceptPerDeliveryPrice()
        {
            return ExceptField("perDeliveryPrice");
        }

        public SellingPlanAllocationPriceAdjustmentQueryBuilder WithPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("price", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationPriceAdjustmentQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }

        public SellingPlanAllocationPriceAdjustmentQueryBuilder WithUnitPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("unitPrice", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanAllocationPriceAdjustmentQueryBuilder ExceptUnitPrice()
        {
            return ExceptField("unitPrice");
        }
    }

    public class SellingPlanCheckoutChargeQueryBuilder : GraphQlQueryBuilder<SellingPlanCheckoutChargeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(SellingPlanCheckoutChargeValueQueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanCheckoutCharge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanCheckoutChargeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanCheckoutChargeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public SellingPlanCheckoutChargeQueryBuilder WithValue(SellingPlanCheckoutChargeValueQueryBuilder sellingPlanCheckoutChargeValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, sellingPlanCheckoutChargeValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanCheckoutChargeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class SellingPlanCheckoutChargePercentageValueQueryBuilder : GraphQlQueryBuilder<SellingPlanCheckoutChargePercentageValueQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "percentage" }
            };

        protected override string TypeName { get { return "SellingPlanCheckoutChargePercentageValue"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanCheckoutChargePercentageValueQueryBuilder WithPercentage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("percentage", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanCheckoutChargePercentageValueQueryBuilder ExceptPercentage()
        {
            return ExceptField("percentage");
        }
    }

    public class SellingPlanCheckoutChargeValueQueryBuilder : GraphQlQueryBuilder<SellingPlanCheckoutChargeValueQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        protected override string TypeName { get { return "SellingPlanCheckoutChargeValue"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanCheckoutChargeValueQueryBuilder WithMoneyV2Fragment(MoneyV2QueryBuilder moneyV2QueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanCheckoutChargeValueQueryBuilder WithSellingPlanCheckoutChargePercentageValueFragment(SellingPlanCheckoutChargePercentageValueQueryBuilder sellingPlanCheckoutChargePercentageValueQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(sellingPlanCheckoutChargePercentageValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class SellingPlanConnectionQueryBuilder : GraphQlQueryBuilder<SellingPlanConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(SellingPlanEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(SellingPlanQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanConnectionQueryBuilder WithEdges(SellingPlanEdgeQueryBuilder sellingPlanEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, sellingPlanEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public SellingPlanConnectionQueryBuilder WithNodes(SellingPlanQueryBuilder sellingPlanQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, sellingPlanQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public SellingPlanConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class SellingPlanEdgeQueryBuilder : GraphQlQueryBuilder<SellingPlanEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(SellingPlanQueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public SellingPlanEdgeQueryBuilder WithNode(SellingPlanQueryBuilder sellingPlanQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, sellingPlanQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class SellingPlanFixedAmountPriceAdjustmentQueryBuilder : GraphQlQueryBuilder<SellingPlanFixedAmountPriceAdjustmentQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "adjustmentAmount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanFixedAmountPriceAdjustment"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanFixedAmountPriceAdjustmentQueryBuilder WithAdjustmentAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("adjustmentAmount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanFixedAmountPriceAdjustmentQueryBuilder ExceptAdjustmentAmount()
        {
            return ExceptField("adjustmentAmount");
        }
    }

    public class SellingPlanFixedPriceAdjustmentQueryBuilder : GraphQlQueryBuilder<SellingPlanFixedPriceAdjustmentQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "price", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanFixedPriceAdjustment"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanFixedPriceAdjustmentQueryBuilder WithPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("price", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanFixedPriceAdjustmentQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }
    }

    public class SellingPlanGroupQueryBuilder : GraphQlQueryBuilder<SellingPlanGroupQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "appName" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "options", IsComplex = true, QueryBuilderType = typeof(SellingPlanGroupOptionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sellingPlans", IsComplex = true, QueryBuilderType = typeof(SellingPlanConnectionQueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanGroup"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanGroupQueryBuilder WithAppName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("appName", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanGroupQueryBuilder ExceptAppName()
        {
            return ExceptField("appName");
        }

        public SellingPlanGroupQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanGroupQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SellingPlanGroupQueryBuilder WithOptions(SellingPlanGroupOptionQueryBuilder sellingPlanGroupOptionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("options", alias, sellingPlanGroupOptionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanGroupQueryBuilder ExceptOptions()
        {
            return ExceptField("options");
        }

        public SellingPlanGroupQueryBuilder WithSellingPlans(SellingPlanConnectionQueryBuilder sellingPlanConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<string> before = null, QueryBuilderParameter<bool?> reverse = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (reverse != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reverse", ArgumentValue = reverse} );

            return WithObjectField("sellingPlans", alias, sellingPlanConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SellingPlanGroupQueryBuilder ExceptSellingPlans()
        {
            return ExceptField("sellingPlans");
        }
    }

    public class SellingPlanGroupConnectionQueryBuilder : GraphQlQueryBuilder<SellingPlanGroupConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(SellingPlanGroupEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(SellingPlanGroupQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanGroupConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanGroupConnectionQueryBuilder WithEdges(SellingPlanGroupEdgeQueryBuilder sellingPlanGroupEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, sellingPlanGroupEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanGroupConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public SellingPlanGroupConnectionQueryBuilder WithNodes(SellingPlanGroupQueryBuilder sellingPlanGroupQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, sellingPlanGroupQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanGroupConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public SellingPlanGroupConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanGroupConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class SellingPlanGroupEdgeQueryBuilder : GraphQlQueryBuilder<SellingPlanGroupEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(SellingPlanGroupQueryBuilder) }
            };

        protected override string TypeName { get { return "SellingPlanGroupEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanGroupEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanGroupEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public SellingPlanGroupEdgeQueryBuilder WithNode(SellingPlanGroupQueryBuilder sellingPlanGroupQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, sellingPlanGroupQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanGroupEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class SellingPlanGroupOptionQueryBuilder : GraphQlQueryBuilder<SellingPlanGroupOptionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "values", IsComplex = true }
            };

        protected override string TypeName { get { return "SellingPlanGroupOption"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanGroupOptionQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanGroupOptionQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SellingPlanGroupOptionQueryBuilder WithValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("values", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanGroupOptionQueryBuilder ExceptValues()
        {
            return ExceptField("values");
        }
    }

    public class SellingPlanOptionQueryBuilder : GraphQlQueryBuilder<SellingPlanOptionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "SellingPlanOption"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanOptionQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanOptionQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SellingPlanOptionQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanOptionQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class SellingPlanPercentagePriceAdjustmentQueryBuilder : GraphQlQueryBuilder<SellingPlanPercentagePriceAdjustmentQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "adjustmentPercentage" }
            };

        protected override string TypeName { get { return "SellingPlanPercentagePriceAdjustment"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanPercentagePriceAdjustmentQueryBuilder WithAdjustmentPercentage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("adjustmentPercentage", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanPercentagePriceAdjustmentQueryBuilder ExceptAdjustmentPercentage()
        {
            return ExceptField("adjustmentPercentage");
        }
    }

    public class SellingPlanPriceAdjustmentQueryBuilder : GraphQlQueryBuilder<SellingPlanPriceAdjustmentQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "adjustmentValue", IsComplex = true, QueryBuilderType = typeof(SellingPlanPriceAdjustmentValueQueryBuilder) },
                new GraphQlFieldMetadata { Name = "orderCount" }
            };

        protected override string TypeName { get { return "SellingPlanPriceAdjustment"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanPriceAdjustmentQueryBuilder WithAdjustmentValue(SellingPlanPriceAdjustmentValueQueryBuilder sellingPlanPriceAdjustmentValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("adjustmentValue", alias, sellingPlanPriceAdjustmentValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanPriceAdjustmentQueryBuilder ExceptAdjustmentValue()
        {
            return ExceptField("adjustmentValue");
        }

        public SellingPlanPriceAdjustmentQueryBuilder WithOrderCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("orderCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanPriceAdjustmentQueryBuilder ExceptOrderCount()
        {
            return ExceptField("orderCount");
        }
    }

    public class SellingPlanPriceAdjustmentValueQueryBuilder : GraphQlQueryBuilder<SellingPlanPriceAdjustmentValueQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        protected override string TypeName { get { return "SellingPlanPriceAdjustmentValue"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SellingPlanPriceAdjustmentValueQueryBuilder WithSellingPlanFixedAmountPriceAdjustmentFragment(SellingPlanFixedAmountPriceAdjustmentQueryBuilder sellingPlanFixedAmountPriceAdjustmentQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(sellingPlanFixedAmountPriceAdjustmentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanPriceAdjustmentValueQueryBuilder WithSellingPlanFixedPriceAdjustmentFragment(SellingPlanFixedPriceAdjustmentQueryBuilder sellingPlanFixedPriceAdjustmentQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(sellingPlanFixedPriceAdjustmentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SellingPlanPriceAdjustmentValueQueryBuilder WithSellingPlanPercentagePriceAdjustmentFragment(SellingPlanPercentagePriceAdjustmentQueryBuilder sellingPlanPercentagePriceAdjustmentQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(sellingPlanPercentagePriceAdjustmentQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ShippingRateQueryBuilder : GraphQlQueryBuilder<ShippingRateQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "price", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "title" }
            };

        protected override string TypeName { get { return "ShippingRate"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ShippingRateQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public ShippingRateQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public ShippingRateQueryBuilder WithPrice(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("price", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShippingRateQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }

        public ShippingRateQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ShippingRateQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }
    }

    public class ShopQueryBuilder : GraphQlQueryBuilder<ShopQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "brand", IsComplex = true, QueryBuilderType = typeof(BrandQueryBuilder) },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "metafield", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metafields", IsComplex = true, QueryBuilderType = typeof(MetafieldQueryBuilder) },
                new GraphQlFieldMetadata { Name = "moneyFormat" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "paymentSettings", IsComplex = true, QueryBuilderType = typeof(PaymentSettingsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "primaryDomain", IsComplex = true, QueryBuilderType = typeof(DomainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "privacyPolicy", IsComplex = true, QueryBuilderType = typeof(ShopPolicyQueryBuilder) },
                new GraphQlFieldMetadata { Name = "refundPolicy", IsComplex = true, QueryBuilderType = typeof(ShopPolicyQueryBuilder) },
                new GraphQlFieldMetadata { Name = "shippingPolicy", IsComplex = true, QueryBuilderType = typeof(ShopPolicyQueryBuilder) },
                new GraphQlFieldMetadata { Name = "shipsToCountries", IsComplex = true },
                new GraphQlFieldMetadata { Name = "subscriptionPolicy", IsComplex = true, QueryBuilderType = typeof(ShopPolicyWithDefaultQueryBuilder) },
                new GraphQlFieldMetadata { Name = "termsOfService", IsComplex = true, QueryBuilderType = typeof(ShopPolicyQueryBuilder) }
            };

        protected override string TypeName { get { return "Shop"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ShopQueryBuilder WithBrand(BrandQueryBuilder brandQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("brand", alias, brandQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptBrand()
        {
            return ExceptField("brand");
        }

        public ShopQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ShopQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ShopQueryBuilder WithMetafield(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<string> @namespace, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "namespace", ArgumentValue = @namespace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("metafield", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ShopQueryBuilder ExceptMetafield()
        {
            return ExceptField("metafield");
        }

        public ShopQueryBuilder WithMetafields(MetafieldQueryBuilder metafieldQueryBuilder, QueryBuilderParameter<IEnumerable<HasMetafieldsIdentifier>> identifiers, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "identifiers", ArgumentValue = identifiers} );
            return WithObjectField("metafields", alias, metafieldQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ShopQueryBuilder ExceptMetafields()
        {
            return ExceptField("metafields");
        }

        public ShopQueryBuilder WithMoneyFormat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("moneyFormat", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptMoneyFormat()
        {
            return ExceptField("moneyFormat");
        }

        public ShopQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ShopQueryBuilder WithPaymentSettings(PaymentSettingsQueryBuilder paymentSettingsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("paymentSettings", alias, paymentSettingsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptPaymentSettings()
        {
            return ExceptField("paymentSettings");
        }

        public ShopQueryBuilder WithPrimaryDomain(DomainQueryBuilder domainQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("primaryDomain", alias, domainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptPrimaryDomain()
        {
            return ExceptField("primaryDomain");
        }

        public ShopQueryBuilder WithPrivacyPolicy(ShopPolicyQueryBuilder shopPolicyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("privacyPolicy", alias, shopPolicyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptPrivacyPolicy()
        {
            return ExceptField("privacyPolicy");
        }

        public ShopQueryBuilder WithRefundPolicy(ShopPolicyQueryBuilder shopPolicyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("refundPolicy", alias, shopPolicyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptRefundPolicy()
        {
            return ExceptField("refundPolicy");
        }

        public ShopQueryBuilder WithShippingPolicy(ShopPolicyQueryBuilder shopPolicyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingPolicy", alias, shopPolicyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptShippingPolicy()
        {
            return ExceptField("shippingPolicy");
        }

        public ShopQueryBuilder WithShipsToCountries(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shipsToCountries", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptShipsToCountries()
        {
            return ExceptField("shipsToCountries");
        }

        public ShopQueryBuilder WithSubscriptionPolicy(ShopPolicyWithDefaultQueryBuilder shopPolicyWithDefaultQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("subscriptionPolicy", alias, shopPolicyWithDefaultQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptSubscriptionPolicy()
        {
            return ExceptField("subscriptionPolicy");
        }

        public ShopQueryBuilder WithTermsOfService(ShopPolicyQueryBuilder shopPolicyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("termsOfService", alias, shopPolicyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShopQueryBuilder ExceptTermsOfService()
        {
            return ExceptField("termsOfService");
        }
    }

    public class ShopPolicyQueryBuilder : GraphQlQueryBuilder<ShopPolicyQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "body" },
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "url", IsComplex = true }
            };

        protected override string TypeName { get { return "ShopPolicy"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ShopPolicyQueryBuilder WithBody(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("body", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopPolicyQueryBuilder ExceptBody()
        {
            return ExceptField("body");
        }

        public ShopPolicyQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopPolicyQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public ShopPolicyQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopPolicyQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ShopPolicyQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopPolicyQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ShopPolicyQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopPolicyQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public class ShopPolicyWithDefaultQueryBuilder : GraphQlQueryBuilder<ShopPolicyWithDefaultQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "body" },
                new GraphQlFieldMetadata { Name = "handle" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "url", IsComplex = true }
            };

        protected override string TypeName { get { return "ShopPolicyWithDefault"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ShopPolicyWithDefaultQueryBuilder WithBody(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("body", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopPolicyWithDefaultQueryBuilder ExceptBody()
        {
            return ExceptField("body");
        }

        public ShopPolicyWithDefaultQueryBuilder WithHandle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("handle", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopPolicyWithDefaultQueryBuilder ExceptHandle()
        {
            return ExceptField("handle");
        }

        public ShopPolicyWithDefaultQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopPolicyWithDefaultQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ShopPolicyWithDefaultQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopPolicyWithDefaultQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ShopPolicyWithDefaultQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public ShopPolicyWithDefaultQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public class StoreAvailabilityQueryBuilder : GraphQlQueryBuilder<StoreAvailabilityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "available" },
                new GraphQlFieldMetadata { Name = "location", IsComplex = true, QueryBuilderType = typeof(LocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pickUpTime" }
            };

        protected override string TypeName { get { return "StoreAvailability"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StoreAvailabilityQueryBuilder WithAvailable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("available", alias, new GraphQlDirective[] { include, skip });
        }

        public StoreAvailabilityQueryBuilder ExceptAvailable()
        {
            return ExceptField("available");
        }

        public StoreAvailabilityQueryBuilder WithLocation(LocationQueryBuilder locationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("location", alias, locationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StoreAvailabilityQueryBuilder ExceptLocation()
        {
            return ExceptField("location");
        }

        public StoreAvailabilityQueryBuilder WithPickUpTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickUpTime", alias, new GraphQlDirective[] { include, skip });
        }

        public StoreAvailabilityQueryBuilder ExceptPickUpTime()
        {
            return ExceptField("pickUpTime");
        }
    }

    public class StoreAvailabilityConnectionQueryBuilder : GraphQlQueryBuilder<StoreAvailabilityConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(StoreAvailabilityEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(StoreAvailabilityQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "StoreAvailabilityConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StoreAvailabilityConnectionQueryBuilder WithEdges(StoreAvailabilityEdgeQueryBuilder storeAvailabilityEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, storeAvailabilityEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StoreAvailabilityConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public StoreAvailabilityConnectionQueryBuilder WithNodes(StoreAvailabilityQueryBuilder storeAvailabilityQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, storeAvailabilityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StoreAvailabilityConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public StoreAvailabilityConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StoreAvailabilityConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class StoreAvailabilityEdgeQueryBuilder : GraphQlQueryBuilder<StoreAvailabilityEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(StoreAvailabilityQueryBuilder) }
            };

        protected override string TypeName { get { return "StoreAvailabilityEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StoreAvailabilityEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public StoreAvailabilityEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public StoreAvailabilityEdgeQueryBuilder WithNode(StoreAvailabilityQueryBuilder storeAvailabilityQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, storeAvailabilityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StoreAvailabilityEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class StringConnectionQueryBuilder : GraphQlQueryBuilder<StringConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(StringEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "StringConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StringConnectionQueryBuilder WithEdges(StringEdgeQueryBuilder stringEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, stringEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StringConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public StringConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StringConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class StringEdgeQueryBuilder : GraphQlQueryBuilder<StringEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node" }
            };

        protected override string TypeName { get { return "StringEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StringEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public StringEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public StringEdgeQueryBuilder WithNode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("node", alias, new GraphQlDirective[] { include, skip });
        }

        public StringEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class TransactionQueryBuilder : GraphQlQueryBuilder<TransactionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "amount", IsComplex = true, QueryBuilderType = typeof(MoneyV2QueryBuilder) },
                new GraphQlFieldMetadata { Name = "kind" },
                new GraphQlFieldMetadata { Name = "statusV2" },
                new GraphQlFieldMetadata { Name = "test" }
            };

        protected override string TypeName { get { return "Transaction"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TransactionQueryBuilder WithAmount(MoneyV2QueryBuilder moneyV2QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("amount", alias, moneyV2QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TransactionQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public TransactionQueryBuilder WithKind(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kind", alias, new GraphQlDirective[] { include, skip });
        }

        public TransactionQueryBuilder ExceptKind()
        {
            return ExceptField("kind");
        }

        public TransactionQueryBuilder WithStatusV2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statusV2", alias, new GraphQlDirective[] { include, skip });
        }

        public TransactionQueryBuilder ExceptStatusV2()
        {
            return ExceptField("statusV2");
        }

        public TransactionQueryBuilder WithTest(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("test", alias, new GraphQlDirective[] { include, skip });
        }

        public TransactionQueryBuilder ExceptTest()
        {
            return ExceptField("test");
        }
    }

    public class UnitPriceMeasurementQueryBuilder : GraphQlQueryBuilder<UnitPriceMeasurementQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "measuredType" },
                new GraphQlFieldMetadata { Name = "quantityUnit" },
                new GraphQlFieldMetadata { Name = "quantityValue" },
                new GraphQlFieldMetadata { Name = "referenceUnit" },
                new GraphQlFieldMetadata { Name = "referenceValue" }
            };

        protected override string TypeName { get { return "UnitPriceMeasurement"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UnitPriceMeasurementQueryBuilder WithMeasuredType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("measuredType", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitPriceMeasurementQueryBuilder ExceptMeasuredType()
        {
            return ExceptField("measuredType");
        }

        public UnitPriceMeasurementQueryBuilder WithQuantityUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantityUnit", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitPriceMeasurementQueryBuilder ExceptQuantityUnit()
        {
            return ExceptField("quantityUnit");
        }

        public UnitPriceMeasurementQueryBuilder WithQuantityValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantityValue", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitPriceMeasurementQueryBuilder ExceptQuantityValue()
        {
            return ExceptField("quantityValue");
        }

        public UnitPriceMeasurementQueryBuilder WithReferenceUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("referenceUnit", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitPriceMeasurementQueryBuilder ExceptReferenceUnit()
        {
            return ExceptField("referenceUnit");
        }

        public UnitPriceMeasurementQueryBuilder WithReferenceValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("referenceValue", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitPriceMeasurementQueryBuilder ExceptReferenceValue()
        {
            return ExceptField("referenceValue");
        }
    }

    public class UrlRedirectQueryBuilder : GraphQlQueryBuilder<UrlRedirectQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "path" },
                new GraphQlFieldMetadata { Name = "target" }
            };

        protected override string TypeName { get { return "UrlRedirect"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UrlRedirectQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public UrlRedirectQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public UrlRedirectQueryBuilder WithPath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("path", alias, new GraphQlDirective[] { include, skip });
        }

        public UrlRedirectQueryBuilder ExceptPath()
        {
            return ExceptField("path");
        }

        public UrlRedirectQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public UrlRedirectQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }
    }

    public class UrlRedirectConnectionQueryBuilder : GraphQlQueryBuilder<UrlRedirectConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(UrlRedirectEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(UrlRedirectQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "UrlRedirectConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UrlRedirectConnectionQueryBuilder WithEdges(UrlRedirectEdgeQueryBuilder urlRedirectEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, urlRedirectEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UrlRedirectConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public UrlRedirectConnectionQueryBuilder WithNodes(UrlRedirectQueryBuilder urlRedirectQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, urlRedirectQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UrlRedirectConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public UrlRedirectConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UrlRedirectConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class UrlRedirectEdgeQueryBuilder : GraphQlQueryBuilder<UrlRedirectEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(UrlRedirectQueryBuilder) }
            };

        protected override string TypeName { get { return "UrlRedirectEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UrlRedirectEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public UrlRedirectEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public UrlRedirectEdgeQueryBuilder WithNode(UrlRedirectQueryBuilder urlRedirectQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, urlRedirectQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UrlRedirectEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class UserErrorQueryBuilder : GraphQlQueryBuilder<UserErrorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "field", IsComplex = true },
                new GraphQlFieldMetadata { Name = "message" }
            };

        protected override string TypeName { get { return "UserError"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserErrorQueryBuilder WithField(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("field", alias, new GraphQlDirective[] { include, skip });
        }

        public UserErrorQueryBuilder ExceptField()
        {
            return ExceptField("field");
        }

        public UserErrorQueryBuilder WithMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("message", alias, new GraphQlDirective[] { include, skip });
        }

        public UserErrorQueryBuilder ExceptMessage()
        {
            return ExceptField("message");
        }
    }

    public class VideoQueryBuilder : GraphQlQueryBuilder<VideoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "alt" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "mediaContentType" },
                new GraphQlFieldMetadata { Name = "previewImage", IsComplex = true, QueryBuilderType = typeof(ImageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sources", IsComplex = true, QueryBuilderType = typeof(VideoSourceQueryBuilder) }
            };

        protected override string TypeName { get { return "Video"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public VideoQueryBuilder WithAlt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("alt", alias, new GraphQlDirective[] { include, skip });
        }

        public VideoQueryBuilder ExceptAlt()
        {
            return ExceptField("alt");
        }

        public VideoQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public VideoQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public VideoQueryBuilder WithMediaContentType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaContentType", alias, new GraphQlDirective[] { include, skip });
        }

        public VideoQueryBuilder ExceptMediaContentType()
        {
            return ExceptField("mediaContentType");
        }

        public VideoQueryBuilder WithPreviewImage(ImageQueryBuilder imageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("previewImage", alias, imageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public VideoQueryBuilder ExceptPreviewImage()
        {
            return ExceptField("previewImage");
        }

        public VideoQueryBuilder WithSources(VideoSourceQueryBuilder videoSourceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("sources", alias, videoSourceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public VideoQueryBuilder ExceptSources()
        {
            return ExceptField("sources");
        }
    }

    public class VideoSourceQueryBuilder : GraphQlQueryBuilder<VideoSourceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "format" },
                new GraphQlFieldMetadata { Name = "height" },
                new GraphQlFieldMetadata { Name = "mimeType" },
                new GraphQlFieldMetadata { Name = "url" },
                new GraphQlFieldMetadata { Name = "width" }
            };

        protected override string TypeName { get { return "VideoSource"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public VideoSourceQueryBuilder WithFormat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("format", alias, new GraphQlDirective[] { include, skip });
        }

        public VideoSourceQueryBuilder ExceptFormat()
        {
            return ExceptField("format");
        }

        public VideoSourceQueryBuilder WithHeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("height", alias, new GraphQlDirective[] { include, skip });
        }

        public VideoSourceQueryBuilder ExceptHeight()
        {
            return ExceptField("height");
        }

        public VideoSourceQueryBuilder WithMimeType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mimeType", alias, new GraphQlDirective[] { include, skip });
        }

        public VideoSourceQueryBuilder ExceptMimeType()
        {
            return ExceptField("mimeType");
        }

        public VideoSourceQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public VideoSourceQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public VideoSourceQueryBuilder WithWidth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("width", alias, new GraphQlDirective[] { include, skip });
        }

        public VideoSourceQueryBuilder ExceptWidth()
        {
            return ExceptField("width");
        }
    }
    #endregion

    #region input classes
    public class AttributeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _key;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_key.Name != null) yield return _key;
            if (_value.Name != null) yield return _value;
        }
    }

    public class CartBuyerIdentityInput : IGraphQlInputObject
    {
        private InputPropertyInfo _email;
        private InputPropertyInfo _phone;
        private InputPropertyInfo _countryCode;
        private InputPropertyInfo _customerAccessToken;
        private InputPropertyInfo _deliveryAddressPreferences;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Phone
        {
            get { return (QueryBuilderParameter<string>)_phone.Value; }
            set { _phone = new InputPropertyInfo { Name = "phone", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CountryCode?>))]
        #endif
        public QueryBuilderParameter<CountryCode?> CountryCode
        {
            get { return (QueryBuilderParameter<CountryCode?>)_countryCode.Value; }
            set { _countryCode = new InputPropertyInfo { Name = "countryCode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> CustomerAccessToken
        {
            get { return (QueryBuilderParameter<string>)_customerAccessToken.Value; }
            set { _customerAccessToken = new InputPropertyInfo { Name = "customerAccessToken", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DeliveryAddressInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<DeliveryAddressInput>> DeliveryAddressPreferences
        {
            get { return (QueryBuilderParameter<ICollection<DeliveryAddressInput>>)_deliveryAddressPreferences.Value; }
            set { _deliveryAddressPreferences = new InputPropertyInfo { Name = "deliveryAddressPreferences", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_email.Name != null) yield return _email;
            if (_phone.Name != null) yield return _phone;
            if (_countryCode.Name != null) yield return _countryCode;
            if (_customerAccessToken.Name != null) yield return _customerAccessToken;
            if (_deliveryAddressPreferences.Name != null) yield return _deliveryAddressPreferences;
        }
    }

    public class CartInput : IGraphQlInputObject
    {
        private InputPropertyInfo _attributes;
        private InputPropertyInfo _lines;
        private InputPropertyInfo _discountCodes;
        private InputPropertyInfo _note;
        private InputPropertyInfo _buyerIdentity;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AttributeInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AttributeInput>> Attributes
        {
            get { return (QueryBuilderParameter<ICollection<AttributeInput>>)_attributes.Value; }
            set { _attributes = new InputPropertyInfo { Name = "attributes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CartLineInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<CartLineInput>> Lines
        {
            get { return (QueryBuilderParameter<ICollection<CartLineInput>>)_lines.Value; }
            set { _lines = new InputPropertyInfo { Name = "lines", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> DiscountCodes
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_discountCodes.Value; }
            set { _discountCodes = new InputPropertyInfo { Name = "discountCodes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Note
        {
            get { return (QueryBuilderParameter<string>)_note.Value; }
            set { _note = new InputPropertyInfo { Name = "note", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CartBuyerIdentityInput>))]
        #endif
        public QueryBuilderParameter<CartBuyerIdentityInput> BuyerIdentity
        {
            get { return (QueryBuilderParameter<CartBuyerIdentityInput>)_buyerIdentity.Value; }
            set { _buyerIdentity = new InputPropertyInfo { Name = "buyerIdentity", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_attributes.Name != null) yield return _attributes;
            if (_lines.Name != null) yield return _lines;
            if (_discountCodes.Name != null) yield return _discountCodes;
            if (_note.Name != null) yield return _note;
            if (_buyerIdentity.Name != null) yield return _buyerIdentity;
        }
    }

    public class CartLineInput : IGraphQlInputObject
    {
        private InputPropertyInfo _attributes;
        private InputPropertyInfo _quantity;
        private InputPropertyInfo _merchandiseId;
        private InputPropertyInfo _sellingPlanId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AttributeInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AttributeInput>> Attributes
        {
            get { return (QueryBuilderParameter<ICollection<AttributeInput>>)_attributes.Value; }
            set { _attributes = new InputPropertyInfo { Name = "attributes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Quantity
        {
            get { return (QueryBuilderParameter<int?>)_quantity.Value; }
            set { _quantity = new InputPropertyInfo { Name = "quantity", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?> MerchandiseId
        {
            get { return (QueryBuilderParameter<Guid?>)_merchandiseId.Value; }
            set { _merchandiseId = new InputPropertyInfo { Name = "merchandiseId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?> SellingPlanId
        {
            get { return (QueryBuilderParameter<Guid?>)_sellingPlanId.Value; }
            set { _sellingPlanId = new InputPropertyInfo { Name = "sellingPlanId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_attributes.Name != null) yield return _attributes;
            if (_quantity.Name != null) yield return _quantity;
            if (_merchandiseId.Name != null) yield return _merchandiseId;
            if (_sellingPlanId.Name != null) yield return _sellingPlanId;
        }
    }

    public class CartLineUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _quantity;
        private InputPropertyInfo _merchandiseId;
        private InputPropertyInfo _attributes;
        private InputPropertyInfo _sellingPlanId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?> Id
        {
            get { return (QueryBuilderParameter<Guid?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Quantity
        {
            get { return (QueryBuilderParameter<int?>)_quantity.Value; }
            set { _quantity = new InputPropertyInfo { Name = "quantity", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?> MerchandiseId
        {
            get { return (QueryBuilderParameter<Guid?>)_merchandiseId.Value; }
            set { _merchandiseId = new InputPropertyInfo { Name = "merchandiseId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AttributeInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AttributeInput>> Attributes
        {
            get { return (QueryBuilderParameter<ICollection<AttributeInput>>)_attributes.Value; }
            set { _attributes = new InputPropertyInfo { Name = "attributes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?> SellingPlanId
        {
            get { return (QueryBuilderParameter<Guid?>)_sellingPlanId.Value; }
            set { _sellingPlanId = new InputPropertyInfo { Name = "sellingPlanId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_quantity.Name != null) yield return _quantity;
            if (_merchandiseId.Name != null) yield return _merchandiseId;
            if (_attributes.Name != null) yield return _attributes;
            if (_sellingPlanId.Name != null) yield return _sellingPlanId;
        }
    }

    public class CartSelectedDeliveryOptionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _deliveryGroupId;
        private InputPropertyInfo _deliveryOptionHandle;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?> DeliveryGroupId
        {
            get { return (QueryBuilderParameter<Guid?>)_deliveryGroupId.Value; }
            set { _deliveryGroupId = new InputPropertyInfo { Name = "deliveryGroupId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DeliveryOptionHandle
        {
            get { return (QueryBuilderParameter<string>)_deliveryOptionHandle.Value; }
            set { _deliveryOptionHandle = new InputPropertyInfo { Name = "deliveryOptionHandle", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_deliveryGroupId.Name != null) yield return _deliveryGroupId;
            if (_deliveryOptionHandle.Name != null) yield return _deliveryOptionHandle;
        }
    }

    public class CheckoutAttributesUpdateV2Input : IGraphQlInputObject
    {
        private InputPropertyInfo _note;
        private InputPropertyInfo _customAttributes;
        private InputPropertyInfo _allowPartialAddresses;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Note
        {
            get { return (QueryBuilderParameter<string>)_note.Value; }
            set { _note = new InputPropertyInfo { Name = "note", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AttributeInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AttributeInput>> CustomAttributes
        {
            get { return (QueryBuilderParameter<ICollection<AttributeInput>>)_customAttributes.Value; }
            set { _customAttributes = new InputPropertyInfo { Name = "customAttributes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> AllowPartialAddresses
        {
            get { return (QueryBuilderParameter<bool?>)_allowPartialAddresses.Value; }
            set { _allowPartialAddresses = new InputPropertyInfo { Name = "allowPartialAddresses", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_note.Name != null) yield return _note;
            if (_customAttributes.Name != null) yield return _customAttributes;
            if (_allowPartialAddresses.Name != null) yield return _allowPartialAddresses;
        }
    }

    public class CheckoutBuyerIdentityInput : IGraphQlInputObject
    {
        private InputPropertyInfo _countryCode;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CountryCode?>))]
        #endif
        public QueryBuilderParameter<CountryCode?> CountryCode
        {
            get { return (QueryBuilderParameter<CountryCode?>)_countryCode.Value; }
            set { _countryCode = new InputPropertyInfo { Name = "countryCode", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_countryCode.Name != null) yield return _countryCode;
        }
    }

    public class CheckoutCreateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _email;
        private InputPropertyInfo _lineItems;
        private InputPropertyInfo _shippingAddress;
        private InputPropertyInfo _note;
        private InputPropertyInfo _customAttributes;
        private InputPropertyInfo _allowPartialAddresses;
        private InputPropertyInfo _buyerIdentity;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CheckoutLineItemInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<CheckoutLineItemInput>> LineItems
        {
            get { return (QueryBuilderParameter<ICollection<CheckoutLineItemInput>>)_lineItems.Value; }
            set { _lineItems = new InputPropertyInfo { Name = "lineItems", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MailingAddressInput>))]
        #endif
        public QueryBuilderParameter<MailingAddressInput> ShippingAddress
        {
            get { return (QueryBuilderParameter<MailingAddressInput>)_shippingAddress.Value; }
            set { _shippingAddress = new InputPropertyInfo { Name = "shippingAddress", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Note
        {
            get { return (QueryBuilderParameter<string>)_note.Value; }
            set { _note = new InputPropertyInfo { Name = "note", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AttributeInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AttributeInput>> CustomAttributes
        {
            get { return (QueryBuilderParameter<ICollection<AttributeInput>>)_customAttributes.Value; }
            set { _customAttributes = new InputPropertyInfo { Name = "customAttributes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> AllowPartialAddresses
        {
            get { return (QueryBuilderParameter<bool?>)_allowPartialAddresses.Value; }
            set { _allowPartialAddresses = new InputPropertyInfo { Name = "allowPartialAddresses", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CheckoutBuyerIdentityInput>))]
        #endif
        public QueryBuilderParameter<CheckoutBuyerIdentityInput> BuyerIdentity
        {
            get { return (QueryBuilderParameter<CheckoutBuyerIdentityInput>)_buyerIdentity.Value; }
            set { _buyerIdentity = new InputPropertyInfo { Name = "buyerIdentity", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_email.Name != null) yield return _email;
            if (_lineItems.Name != null) yield return _lineItems;
            if (_shippingAddress.Name != null) yield return _shippingAddress;
            if (_note.Name != null) yield return _note;
            if (_customAttributes.Name != null) yield return _customAttributes;
            if (_allowPartialAddresses.Name != null) yield return _allowPartialAddresses;
            if (_buyerIdentity.Name != null) yield return _buyerIdentity;
        }
    }

    public class CheckoutLineItemInput : IGraphQlInputObject
    {
        private InputPropertyInfo _customAttributes;
        private InputPropertyInfo _quantity;
        private InputPropertyInfo _variantId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AttributeInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AttributeInput>> CustomAttributes
        {
            get { return (QueryBuilderParameter<ICollection<AttributeInput>>)_customAttributes.Value; }
            set { _customAttributes = new InputPropertyInfo { Name = "customAttributes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Quantity
        {
            get { return (QueryBuilderParameter<int?>)_quantity.Value; }
            set { _quantity = new InputPropertyInfo { Name = "quantity", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?> VariantId
        {
            get { return (QueryBuilderParameter<Guid?>)_variantId.Value; }
            set { _variantId = new InputPropertyInfo { Name = "variantId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_customAttributes.Name != null) yield return _customAttributes;
            if (_quantity.Name != null) yield return _quantity;
            if (_variantId.Name != null) yield return _variantId;
        }
    }

    public class CheckoutLineItemUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _variantId;
        private InputPropertyInfo _quantity;
        private InputPropertyInfo _customAttributes;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?> Id
        {
            get { return (QueryBuilderParameter<Guid?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?> VariantId
        {
            get { return (QueryBuilderParameter<Guid?>)_variantId.Value; }
            set { _variantId = new InputPropertyInfo { Name = "variantId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Quantity
        {
            get { return (QueryBuilderParameter<int?>)_quantity.Value; }
            set { _quantity = new InputPropertyInfo { Name = "quantity", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AttributeInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AttributeInput>> CustomAttributes
        {
            get { return (QueryBuilderParameter<ICollection<AttributeInput>>)_customAttributes.Value; }
            set { _customAttributes = new InputPropertyInfo { Name = "customAttributes", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_variantId.Name != null) yield return _variantId;
            if (_quantity.Name != null) yield return _quantity;
            if (_customAttributes.Name != null) yield return _customAttributes;
        }
    }

    public class CreditCardPaymentInputV2 : IGraphQlInputObject
    {
        private InputPropertyInfo _paymentAmount;
        private InputPropertyInfo _idempotencyKey;
        private InputPropertyInfo _billingAddress;
        private InputPropertyInfo _vaultId;
        private InputPropertyInfo _test;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MoneyInput>))]
        #endif
        public QueryBuilderParameter<MoneyInput> PaymentAmount
        {
            get { return (QueryBuilderParameter<MoneyInput>)_paymentAmount.Value; }
            set { _paymentAmount = new InputPropertyInfo { Name = "paymentAmount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdempotencyKey
        {
            get { return (QueryBuilderParameter<string>)_idempotencyKey.Value; }
            set { _idempotencyKey = new InputPropertyInfo { Name = "idempotencyKey", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MailingAddressInput>))]
        #endif
        public QueryBuilderParameter<MailingAddressInput> BillingAddress
        {
            get { return (QueryBuilderParameter<MailingAddressInput>)_billingAddress.Value; }
            set { _billingAddress = new InputPropertyInfo { Name = "billingAddress", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> VaultId
        {
            get { return (QueryBuilderParameter<string>)_vaultId.Value; }
            set { _vaultId = new InputPropertyInfo { Name = "vaultId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Test
        {
            get { return (QueryBuilderParameter<bool?>)_test.Value; }
            set { _test = new InputPropertyInfo { Name = "test", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_paymentAmount.Name != null) yield return _paymentAmount;
            if (_idempotencyKey.Name != null) yield return _idempotencyKey;
            if (_billingAddress.Name != null) yield return _billingAddress;
            if (_vaultId.Name != null) yield return _vaultId;
            if (_test.Name != null) yield return _test;
        }
    }

    public class CustomerAccessTokenCreateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _email;
        private InputPropertyInfo _password;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_email.Name != null) yield return _email;
            if (_password.Name != null) yield return _password;
        }
    }

    public class CustomerActivateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _activationToken;
        private InputPropertyInfo _password;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ActivationToken
        {
            get { return (QueryBuilderParameter<string>)_activationToken.Value; }
            set { _activationToken = new InputPropertyInfo { Name = "activationToken", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_activationToken.Name != null) yield return _activationToken;
            if (_password.Name != null) yield return _password;
        }
    }

    public class CustomerCreateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _firstName;
        private InputPropertyInfo _lastName;
        private InputPropertyInfo _email;
        private InputPropertyInfo _phone;
        private InputPropertyInfo _password;
        private InputPropertyInfo _acceptsMarketing;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FirstName
        {
            get { return (QueryBuilderParameter<string>)_firstName.Value; }
            set { _firstName = new InputPropertyInfo { Name = "firstName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LastName
        {
            get { return (QueryBuilderParameter<string>)_lastName.Value; }
            set { _lastName = new InputPropertyInfo { Name = "lastName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Phone
        {
            get { return (QueryBuilderParameter<string>)_phone.Value; }
            set { _phone = new InputPropertyInfo { Name = "phone", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> AcceptsMarketing
        {
            get { return (QueryBuilderParameter<bool?>)_acceptsMarketing.Value; }
            set { _acceptsMarketing = new InputPropertyInfo { Name = "acceptsMarketing", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_firstName.Name != null) yield return _firstName;
            if (_lastName.Name != null) yield return _lastName;
            if (_email.Name != null) yield return _email;
            if (_phone.Name != null) yield return _phone;
            if (_password.Name != null) yield return _password;
            if (_acceptsMarketing.Name != null) yield return _acceptsMarketing;
        }
    }

    public class CustomerResetInput : IGraphQlInputObject
    {
        private InputPropertyInfo _resetToken;
        private InputPropertyInfo _password;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ResetToken
        {
            get { return (QueryBuilderParameter<string>)_resetToken.Value; }
            set { _resetToken = new InputPropertyInfo { Name = "resetToken", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_resetToken.Name != null) yield return _resetToken;
            if (_password.Name != null) yield return _password;
        }
    }

    public class CustomerUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _firstName;
        private InputPropertyInfo _lastName;
        private InputPropertyInfo _email;
        private InputPropertyInfo _phone;
        private InputPropertyInfo _password;
        private InputPropertyInfo _acceptsMarketing;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FirstName
        {
            get { return (QueryBuilderParameter<string>)_firstName.Value; }
            set { _firstName = new InputPropertyInfo { Name = "firstName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LastName
        {
            get { return (QueryBuilderParameter<string>)_lastName.Value; }
            set { _lastName = new InputPropertyInfo { Name = "lastName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Phone
        {
            get { return (QueryBuilderParameter<string>)_phone.Value; }
            set { _phone = new InputPropertyInfo { Name = "phone", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> AcceptsMarketing
        {
            get { return (QueryBuilderParameter<bool?>)_acceptsMarketing.Value; }
            set { _acceptsMarketing = new InputPropertyInfo { Name = "acceptsMarketing", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_firstName.Name != null) yield return _firstName;
            if (_lastName.Name != null) yield return _lastName;
            if (_email.Name != null) yield return _email;
            if (_phone.Name != null) yield return _phone;
            if (_password.Name != null) yield return _password;
            if (_acceptsMarketing.Name != null) yield return _acceptsMarketing;
        }
    }

    public class DeliveryAddressInput : IGraphQlInputObject
    {
        private InputPropertyInfo _deliveryAddress;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MailingAddressInput>))]
        #endif
        public QueryBuilderParameter<MailingAddressInput> DeliveryAddress
        {
            get { return (QueryBuilderParameter<MailingAddressInput>)_deliveryAddress.Value; }
            set { _deliveryAddress = new InputPropertyInfo { Name = "deliveryAddress", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_deliveryAddress.Name != null) yield return _deliveryAddress;
        }
    }

    public class GeoCoordinateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _latitude;
        private InputPropertyInfo _longitude;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Latitude
        {
            get { return (QueryBuilderParameter<decimal?>)_latitude.Value; }
            set { _latitude = new InputPropertyInfo { Name = "latitude", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Longitude
        {
            get { return (QueryBuilderParameter<decimal?>)_longitude.Value; }
            set { _longitude = new InputPropertyInfo { Name = "longitude", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_latitude.Name != null) yield return _latitude;
            if (_longitude.Name != null) yield return _longitude;
        }
    }

    public class HasMetafieldsIdentifier : IGraphQlInputObject
    {
        private InputPropertyInfo _namespace;
        private InputPropertyInfo _key;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Namespace
        {
            get { return (QueryBuilderParameter<string>)_namespace.Value; }
            set { _namespace = new InputPropertyInfo { Name = "namespace", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_namespace.Name != null) yield return _namespace;
            if (_key.Name != null) yield return _key;
        }
    }

    public class ImageTransformInput : IGraphQlInputObject
    {
        private InputPropertyInfo _crop;
        private InputPropertyInfo _maxWidth;
        private InputPropertyInfo _maxHeight;
        private InputPropertyInfo _scale;
        private InputPropertyInfo _preferredContentType;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CropRegion?>))]
        #endif
        public QueryBuilderParameter<CropRegion?> Crop
        {
            get { return (QueryBuilderParameter<CropRegion?>)_crop.Value; }
            set { _crop = new InputPropertyInfo { Name = "crop", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxWidth
        {
            get { return (QueryBuilderParameter<int?>)_maxWidth.Value; }
            set { _maxWidth = new InputPropertyInfo { Name = "maxWidth", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxHeight
        {
            get { return (QueryBuilderParameter<int?>)_maxHeight.Value; }
            set { _maxHeight = new InputPropertyInfo { Name = "maxHeight", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Scale
        {
            get { return (QueryBuilderParameter<int?>)_scale.Value; }
            set { _scale = new InputPropertyInfo { Name = "scale", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ImageContentType?>))]
        #endif
        public QueryBuilderParameter<ImageContentType?> PreferredContentType
        {
            get { return (QueryBuilderParameter<ImageContentType?>)_preferredContentType.Value; }
            set { _preferredContentType = new InputPropertyInfo { Name = "preferredContentType", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_crop.Name != null) yield return _crop;
            if (_maxWidth.Name != null) yield return _maxWidth;
            if (_maxHeight.Name != null) yield return _maxHeight;
            if (_scale.Name != null) yield return _scale;
            if (_preferredContentType.Name != null) yield return _preferredContentType;
        }
    }

    public class MailingAddressInput : IGraphQlInputObject
    {
        private InputPropertyInfo _address1;
        private InputPropertyInfo _address2;
        private InputPropertyInfo _city;
        private InputPropertyInfo _company;
        private InputPropertyInfo _country;
        private InputPropertyInfo _firstName;
        private InputPropertyInfo _lastName;
        private InputPropertyInfo _phone;
        private InputPropertyInfo _province;
        private InputPropertyInfo _zip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Address1
        {
            get { return (QueryBuilderParameter<string>)_address1.Value; }
            set { _address1 = new InputPropertyInfo { Name = "address1", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Address2
        {
            get { return (QueryBuilderParameter<string>)_address2.Value; }
            set { _address2 = new InputPropertyInfo { Name = "address2", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> City
        {
            get { return (QueryBuilderParameter<string>)_city.Value; }
            set { _city = new InputPropertyInfo { Name = "city", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Company
        {
            get { return (QueryBuilderParameter<string>)_company.Value; }
            set { _company = new InputPropertyInfo { Name = "company", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Country
        {
            get { return (QueryBuilderParameter<string>)_country.Value; }
            set { _country = new InputPropertyInfo { Name = "country", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FirstName
        {
            get { return (QueryBuilderParameter<string>)_firstName.Value; }
            set { _firstName = new InputPropertyInfo { Name = "firstName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LastName
        {
            get { return (QueryBuilderParameter<string>)_lastName.Value; }
            set { _lastName = new InputPropertyInfo { Name = "lastName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Phone
        {
            get { return (QueryBuilderParameter<string>)_phone.Value; }
            set { _phone = new InputPropertyInfo { Name = "phone", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Province
        {
            get { return (QueryBuilderParameter<string>)_province.Value; }
            set { _province = new InputPropertyInfo { Name = "province", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Zip
        {
            get { return (QueryBuilderParameter<string>)_zip.Value; }
            set { _zip = new InputPropertyInfo { Name = "zip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_address1.Name != null) yield return _address1;
            if (_address2.Name != null) yield return _address2;
            if (_city.Name != null) yield return _city;
            if (_company.Name != null) yield return _company;
            if (_country.Name != null) yield return _country;
            if (_firstName.Name != null) yield return _firstName;
            if (_lastName.Name != null) yield return _lastName;
            if (_phone.Name != null) yield return _phone;
            if (_province.Name != null) yield return _province;
            if (_zip.Name != null) yield return _zip;
        }
    }

    public class MetafieldFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _namespace;
        private InputPropertyInfo _key;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Namespace
        {
            get { return (QueryBuilderParameter<string>)_namespace.Value; }
            set { _namespace = new InputPropertyInfo { Name = "namespace", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_namespace.Name != null) yield return _namespace;
            if (_key.Name != null) yield return _key;
            if (_value.Name != null) yield return _value;
        }
    }

    public class MoneyInput : IGraphQlInputObject
    {
        private InputPropertyInfo _amount;
        private InputPropertyInfo _currencyCode;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Amount
        {
            get { return (QueryBuilderParameter<object>)_amount.Value; }
            set { _amount = new InputPropertyInfo { Name = "amount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CurrencyCode?>))]
        #endif
        public QueryBuilderParameter<CurrencyCode?> CurrencyCode
        {
            get { return (QueryBuilderParameter<CurrencyCode?>)_currencyCode.Value; }
            set { _currencyCode = new InputPropertyInfo { Name = "currencyCode", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_amount.Name != null) yield return _amount;
            if (_currencyCode.Name != null) yield return _currencyCode;
        }
    }

    public class PriceRangeFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _min;
        private InputPropertyInfo _max;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Min
        {
            get { return (QueryBuilderParameter<decimal?>)_min.Value; }
            set { _min = new InputPropertyInfo { Name = "min", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Max
        {
            get { return (QueryBuilderParameter<decimal?>)_max.Value; }
            set { _max = new InputPropertyInfo { Name = "max", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_min.Name != null) yield return _min;
            if (_max.Name != null) yield return _max;
        }
    }

    public class ProductFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _available;
        private InputPropertyInfo _variantOption;
        private InputPropertyInfo _productType;
        private InputPropertyInfo _productVendor;
        private InputPropertyInfo _price;
        private InputPropertyInfo _productMetafield;
        private InputPropertyInfo _variantMetafield;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Available
        {
            get { return (QueryBuilderParameter<bool?>)_available.Value; }
            set { _available = new InputPropertyInfo { Name = "available", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<VariantOptionFilter>))]
        #endif
        public QueryBuilderParameter<VariantOptionFilter> VariantOption
        {
            get { return (QueryBuilderParameter<VariantOptionFilter>)_variantOption.Value; }
            set { _variantOption = new InputPropertyInfo { Name = "variantOption", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ProductType
        {
            get { return (QueryBuilderParameter<string>)_productType.Value; }
            set { _productType = new InputPropertyInfo { Name = "productType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ProductVendor
        {
            get { return (QueryBuilderParameter<string>)_productVendor.Value; }
            set { _productVendor = new InputPropertyInfo { Name = "productVendor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PriceRangeFilter>))]
        #endif
        public QueryBuilderParameter<PriceRangeFilter> Price
        {
            get { return (QueryBuilderParameter<PriceRangeFilter>)_price.Value; }
            set { _price = new InputPropertyInfo { Name = "price", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MetafieldFilter>))]
        #endif
        public QueryBuilderParameter<MetafieldFilter> ProductMetafield
        {
            get { return (QueryBuilderParameter<MetafieldFilter>)_productMetafield.Value; }
            set { _productMetafield = new InputPropertyInfo { Name = "productMetafield", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MetafieldFilter>))]
        #endif
        public QueryBuilderParameter<MetafieldFilter> VariantMetafield
        {
            get { return (QueryBuilderParameter<MetafieldFilter>)_variantMetafield.Value; }
            set { _variantMetafield = new InputPropertyInfo { Name = "variantMetafield", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_available.Name != null) yield return _available;
            if (_variantOption.Name != null) yield return _variantOption;
            if (_productType.Name != null) yield return _productType;
            if (_productVendor.Name != null) yield return _productVendor;
            if (_price.Name != null) yield return _price;
            if (_productMetafield.Name != null) yield return _productMetafield;
            if (_variantMetafield.Name != null) yield return _variantMetafield;
        }
    }

    public class SelectedOptionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_value.Name != null) yield return _value;
        }
    }

    public class TokenizedPaymentInputV3 : IGraphQlInputObject
    {
        private InputPropertyInfo _paymentAmount;
        private InputPropertyInfo _idempotencyKey;
        private InputPropertyInfo _billingAddress;
        private InputPropertyInfo _paymentData;
        private InputPropertyInfo _test;
        private InputPropertyInfo _identifier;
        private InputPropertyInfo _type;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MoneyInput>))]
        #endif
        public QueryBuilderParameter<MoneyInput> PaymentAmount
        {
            get { return (QueryBuilderParameter<MoneyInput>)_paymentAmount.Value; }
            set { _paymentAmount = new InputPropertyInfo { Name = "paymentAmount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdempotencyKey
        {
            get { return (QueryBuilderParameter<string>)_idempotencyKey.Value; }
            set { _idempotencyKey = new InputPropertyInfo { Name = "idempotencyKey", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MailingAddressInput>))]
        #endif
        public QueryBuilderParameter<MailingAddressInput> BillingAddress
        {
            get { return (QueryBuilderParameter<MailingAddressInput>)_billingAddress.Value; }
            set { _billingAddress = new InputPropertyInfo { Name = "billingAddress", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PaymentData
        {
            get { return (QueryBuilderParameter<string>)_paymentData.Value; }
            set { _paymentData = new InputPropertyInfo { Name = "paymentData", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Test
        {
            get { return (QueryBuilderParameter<bool?>)_test.Value; }
            set { _test = new InputPropertyInfo { Name = "test", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Identifier
        {
            get { return (QueryBuilderParameter<string>)_identifier.Value; }
            set { _identifier = new InputPropertyInfo { Name = "identifier", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PaymentTokenType?>))]
        #endif
        public QueryBuilderParameter<PaymentTokenType?> Type
        {
            get { return (QueryBuilderParameter<PaymentTokenType?>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_paymentAmount.Name != null) yield return _paymentAmount;
            if (_idempotencyKey.Name != null) yield return _idempotencyKey;
            if (_billingAddress.Name != null) yield return _billingAddress;
            if (_paymentData.Name != null) yield return _paymentData;
            if (_test.Name != null) yield return _test;
            if (_identifier.Name != null) yield return _identifier;
            if (_type.Name != null) yield return _type;
        }
    }

    public class VariantOptionFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_value.Name != null) yield return _value;
        }
    }
    #endregion

    #region data classes
    public class ApiVersion
    {
        public string DisplayName { get; set; }
        public string Handle { get; set; }
        public bool? Supported { get; set; }
    }

    [GraphQlObjectType("AppliedGiftCard")]
    public class AppliedGiftCard : INode
    {
        public MoneyV2 AmountUsed { get; set; }
        public MoneyV2 Balance { get; set; }
        public Guid? Id { get; set; }
        public string LastCharacters { get; set; }
        public MoneyV2 PresentmentAmountUsed { get; set; }
    }

    [GraphQlObjectType("Article")]
    public class Article : IHasMetafields, INode, IOnlineStorePublishable
    {
        public ArticleAuthor AuthorV2 { get; set; }
        public Blog Blog { get; set; }
        public CommentConnection Comments { get; set; }
        public string Content { get; set; }
        public object ContentHtml { get; set; }
        public string Excerpt { get; set; }
        public object ExcerptHtml { get; set; }
        public string Handle { get; set; }
        public Guid? Id { get; set; }
        public Image Image { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public object OnlineStoreUrl { get; set; }
        public object PublishedAt { get; set; }
        public Seo Seo { get; set; }
        public ICollection<string> Tags { get; set; }
        public string Title { get; set; }
    }

    public class ArticleAuthor
    {
        public string Bio { get; set; }
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Name { get; set; }
    }

    public class ArticleConnection
    {
        public ICollection<ArticleEdge> Edges { get; set; }
        public ICollection<Article> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class ArticleEdge
    {
        public string Cursor { get; set; }
        public Article Node { get; set; }
    }

    public class Attribute
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("AutomaticDiscountApplication")]
    public class AutomaticDiscountApplication : IDiscountApplication
    {
        public DiscountApplicationAllocationMethod? AllocationMethod { get; set; }
        public DiscountApplicationTargetSelection? TargetSelection { get; set; }
        public DiscountApplicationTargetType? TargetType { get; set; }
        public string Title { get; set; }
        public PricingValue Value { get; set; }
    }

    public class AvailableShippingRates
    {
        public bool? Ready { get; set; }
        public ICollection<ShippingRate> ShippingRates { get; set; }
    }

    [GraphQlObjectType("Blog")]
    public class Blog : IHasMetafields, INode, IOnlineStorePublishable
    {
        public Article ArticleByHandle { get; set; }
        public ArticleConnection Articles { get; set; }
        public ICollection<ArticleAuthor> Authors { get; set; }
        public string Handle { get; set; }
        public Guid? Id { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public object OnlineStoreUrl { get; set; }
        public Seo Seo { get; set; }
        public string Title { get; set; }
    }

    public class BlogConnection
    {
        public ICollection<BlogEdge> Edges { get; set; }
        public ICollection<Blog> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class BlogEdge
    {
        public string Cursor { get; set; }
        public Blog Node { get; set; }
    }

    public class Brand
    {
        public BrandColors Colors { get; set; }
        public MediaImage CoverImage { get; set; }
        public MediaImage Logo { get; set; }
        public string ShortDescription { get; set; }
        public string Slogan { get; set; }
        public MediaImage SquareLogo { get; set; }
    }

    public class BrandColorGroup
    {
        public object Background { get; set; }
        public object Foreground { get; set; }
    }

    public class BrandColors
    {
        public ICollection<BrandColorGroup> Primary { get; set; }
        public ICollection<BrandColorGroup> Secondary { get; set; }
    }

    [GraphQlObjectType("Cart")]
    public class Cart : INode
    {
        public Attribute Attribute { get; set; }
        public ICollection<Attribute> Attributes { get; set; }
        public CartBuyerIdentity BuyerIdentity { get; set; }
        public object CheckoutUrl { get; set; }
        public CartCost Cost { get; set; }
        public DateTimeOffset? CreatedAt { get; set; }
        public CartDeliveryGroupConnection DeliveryGroups { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<ICartDiscountAllocation> DiscountAllocations { get; set; }
        public ICollection<CartDiscountCode> DiscountCodes { get; set; }
        public Guid? Id { get; set; }
        public CartLineConnection Lines { get; set; }
        public string Note { get; set; }
        public int? TotalQuantity { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
    }

    public class CartAttributesUpdatePayload
    {
        public Cart Cart { get; set; }
        public ICollection<CartUserError> UserErrors { get; set; }
    }

    [GraphQlObjectType("CartAutomaticDiscountAllocation")]
    public class CartAutomaticDiscountAllocation : ICartDiscountAllocation
    {
        public MoneyV2 DiscountedAmount { get; set; }
        public string Title { get; set; }
    }

    public class CartBuyerIdentity
    {
        public CountryCode? CountryCode { get; set; }
        public Customer Customer { get; set; }
        public ICollection<DeliveryAddress> DeliveryAddressPreferences { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
    }

    public class CartBuyerIdentityUpdatePayload
    {
        public Cart Cart { get; set; }
        public ICollection<CartUserError> UserErrors { get; set; }
    }

    [GraphQlObjectType("CartCodeDiscountAllocation")]
    public class CartCodeDiscountAllocation : ICartDiscountAllocation
    {
        public string Code { get; set; }
        public MoneyV2 DiscountedAmount { get; set; }
    }

    public class CartCost
    {
        public MoneyV2 CheckoutChargeAmount { get; set; }
        public MoneyV2 SubtotalAmount { get; set; }
        public bool? SubtotalAmountEstimated { get; set; }
        public MoneyV2 TotalAmount { get; set; }
        public bool? TotalAmountEstimated { get; set; }
        public MoneyV2 TotalDutyAmount { get; set; }
        public bool? TotalDutyAmountEstimated { get; set; }
        public MoneyV2 TotalTaxAmount { get; set; }
        public bool? TotalTaxAmountEstimated { get; set; }
    }

    public class CartCreatePayload
    {
        public Cart Cart { get; set; }
        public ICollection<CartUserError> UserErrors { get; set; }
    }

    [GraphQlObjectType("CartCustomDiscountAllocation")]
    public class CartCustomDiscountAllocation : ICartDiscountAllocation
    {
        public MoneyV2 DiscountedAmount { get; set; }
        public string Title { get; set; }
    }

    public class CartDeliveryGroup
    {
        public CartLineConnection CartLines { get; set; }
        public MailingAddress DeliveryAddress { get; set; }
        public ICollection<CartDeliveryOption> DeliveryOptions { get; set; }
        public Guid? Id { get; set; }
        public CartDeliveryOption SelectedDeliveryOption { get; set; }
    }

    public class CartDeliveryGroupConnection
    {
        public ICollection<CartDeliveryGroupEdge> Edges { get; set; }
        public ICollection<CartDeliveryGroup> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class CartDeliveryGroupEdge
    {
        public string Cursor { get; set; }
        public CartDeliveryGroup Node { get; set; }
    }

    public class CartDeliveryOption
    {
        public string Code { get; set; }
        public DeliveryMethodType? DeliveryMethodType { get; set; }
        public string Description { get; set; }
        public MoneyV2 EstimatedCost { get; set; }
        public string Handle { get; set; }
        public string Title { get; set; }
    }

    public interface ICartDiscountAllocation
    {
        MoneyV2 DiscountedAmount { get; set; }
    }

    public class CartDiscountCode
    {
        public bool? Applicable { get; set; }
        public string Code { get; set; }
    }

    public class CartDiscountCodesUpdatePayload
    {
        public Cart Cart { get; set; }
        public ICollection<CartUserError> UserErrors { get; set; }
    }

    public class CartEstimatedCost
    {
        public MoneyV2 CheckoutChargeAmount { get; set; }
        public MoneyV2 SubtotalAmount { get; set; }
        public MoneyV2 TotalAmount { get; set; }
        public MoneyV2 TotalDutyAmount { get; set; }
        public MoneyV2 TotalTaxAmount { get; set; }
    }

    [GraphQlObjectType("CartLine")]
    public class CartLine : INode
    {
        public Attribute Attribute { get; set; }
        public ICollection<Attribute> Attributes { get; set; }
        public CartLineCost Cost { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<ICartDiscountAllocation> DiscountAllocations { get; set; }
        public Guid? Id { get; set; }
        public Merchandise Merchandise { get; set; }
        public int? Quantity { get; set; }
        public SellingPlanAllocation SellingPlanAllocation { get; set; }
    }

    public class CartLineConnection
    {
        public ICollection<CartLineEdge> Edges { get; set; }
        public ICollection<CartLine> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class CartLineCost
    {
        public MoneyV2 AmountPerQuantity { get; set; }
        public MoneyV2 CompareAtAmountPerQuantity { get; set; }
        public MoneyV2 SubtotalAmount { get; set; }
        public MoneyV2 TotalAmount { get; set; }
    }

    public class CartLineEdge
    {
        public string Cursor { get; set; }
        public CartLine Node { get; set; }
    }

    public class CartLineEstimatedCost
    {
        public MoneyV2 Amount { get; set; }
        public MoneyV2 CompareAtAmount { get; set; }
        public MoneyV2 SubtotalAmount { get; set; }
        public MoneyV2 TotalAmount { get; set; }
    }

    public class CartLinesAddPayload
    {
        public Cart Cart { get; set; }
        public ICollection<CartUserError> UserErrors { get; set; }
    }

    public class CartLinesRemovePayload
    {
        public Cart Cart { get; set; }
        public ICollection<CartUserError> UserErrors { get; set; }
    }

    public class CartLinesUpdatePayload
    {
        public Cart Cart { get; set; }
        public ICollection<CartUserError> UserErrors { get; set; }
    }

    public class CartNoteUpdatePayload
    {
        public Cart Cart { get; set; }
        public ICollection<CartUserError> UserErrors { get; set; }
    }

    public class CartSelectedDeliveryOptionsUpdatePayload
    {
        public Cart Cart { get; set; }
        public ICollection<CartUserError> UserErrors { get; set; }
    }

    [GraphQlObjectType("CartUserError")]
    public class CartUserError : IDisplayableError
    {
        public CartErrorCode? Code { get; set; }
        public ICollection<string> Field { get; set; }
        public string Message { get; set; }
    }

    [GraphQlObjectType("Checkout")]
    public class Checkout : INode
    {
        public ICollection<AppliedGiftCard> AppliedGiftCards { get; set; }
        public AvailableShippingRates AvailableShippingRates { get; set; }
        public CheckoutBuyerIdentity BuyerIdentity { get; set; }
        public object CompletedAt { get; set; }
        public DateTimeOffset? CreatedAt { get; set; }
        public CurrencyCode? CurrencyCode { get; set; }
        public ICollection<Attribute> CustomAttributes { get; set; }
        public DiscountApplicationConnection DiscountApplications { get; set; }
        public string Email { get; set; }
        public Guid? Id { get; set; }
        public CheckoutLineItemConnection LineItems { get; set; }
        public MoneyV2 LineItemsSubtotalPrice { get; set; }
        public string Note { get; set; }
        public Order Order { get; set; }
        public object OrderStatusUrl { get; set; }
        public MoneyV2 PaymentDue { get; set; }
        public bool? Ready { get; set; }
        public bool? RequiresShipping { get; set; }
        public MailingAddress ShippingAddress { get; set; }
        public ICollection<DiscountAllocation> ShippingDiscountAllocations { get; set; }
        public ShippingRate ShippingLine { get; set; }
        public MoneyV2 SubtotalPrice { get; set; }
        public bool? TaxExempt { get; set; }
        public bool? TaxesIncluded { get; set; }
        public MoneyV2 TotalDuties { get; set; }
        public MoneyV2 TotalPrice { get; set; }
        public MoneyV2 TotalTax { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
        public object WebUrl { get; set; }
    }

    public class CheckoutAttributesUpdateV2Payload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutBuyerIdentity
    {
        public CountryCode? CountryCode { get; set; }
    }

    public class CheckoutCompleteFreePayload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutCompleteWithCreditCardV2Payload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
        public Payment Payment { get; set; }
    }

    public class CheckoutCompleteWithTokenizedPaymentV3Payload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
        public Payment Payment { get; set; }
    }

    public class CheckoutCreatePayload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
        public string QueueToken { get; set; }
    }

    public class CheckoutCustomerAssociateV2Payload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
        public Customer Customer { get; set; }
    }

    public class CheckoutCustomerDisassociateV2Payload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutDiscountCodeApplyV2Payload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutDiscountCodeRemovePayload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutEmailUpdateV2Payload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutGiftCardRemoveV2Payload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutGiftCardsAppendPayload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    [GraphQlObjectType("CheckoutLineItem")]
    public class CheckoutLineItem : INode
    {
        public ICollection<Attribute> CustomAttributes { get; set; }
        public ICollection<DiscountAllocation> DiscountAllocations { get; set; }
        public Guid? Id { get; set; }
        public int? Quantity { get; set; }
        public string Title { get; set; }
        public MoneyV2 UnitPrice { get; set; }
        public ProductVariant Variant { get; set; }
    }

    public class CheckoutLineItemConnection
    {
        public ICollection<CheckoutLineItemEdge> Edges { get; set; }
        public ICollection<CheckoutLineItem> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class CheckoutLineItemEdge
    {
        public string Cursor { get; set; }
        public CheckoutLineItem Node { get; set; }
    }

    public class CheckoutLineItemsAddPayload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutLineItemsRemovePayload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutLineItemsReplacePayload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> UserErrors { get; set; }
    }

    public class CheckoutLineItemsUpdatePayload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutShippingAddressUpdateV2Payload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    public class CheckoutShippingLineUpdatePayload
    {
        public Checkout Checkout { get; set; }
        public ICollection<CheckoutUserError> CheckoutUserErrors { get; set; }
    }

    [GraphQlObjectType("CheckoutUserError")]
    public class CheckoutUserError : IDisplayableError
    {
        public CheckoutErrorCode? Code { get; set; }
        public ICollection<string> Field { get; set; }
        public string Message { get; set; }
    }

    [GraphQlObjectType("Collection")]
    public class Collection : IHasMetafields, INode, IOnlineStorePublishable
    {
        public string Description { get; set; }
        public object DescriptionHtml { get; set; }
        public string Handle { get; set; }
        public Guid? Id { get; set; }
        public Image Image { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public object OnlineStoreUrl { get; set; }
        public ProductConnection Products { get; set; }
        public Seo Seo { get; set; }
        public string Title { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
    }

    public class CollectionConnection
    {
        public ICollection<CollectionEdge> Edges { get; set; }
        public ICollection<Collection> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class CollectionEdge
    {
        public string Cursor { get; set; }
        public Collection Node { get; set; }
    }

    [GraphQlObjectType("Comment")]
    public class Comment : INode
    {
        public CommentAuthor Author { get; set; }
        public string Content { get; set; }
        public object ContentHtml { get; set; }
        public Guid? Id { get; set; }
    }

    public class CommentAuthor
    {
        public string Email { get; set; }
        public string Name { get; set; }
    }

    public class CommentConnection
    {
        public ICollection<CommentEdge> Edges { get; set; }
        public ICollection<Comment> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class CommentEdge
    {
        public string Cursor { get; set; }
        public Comment Node { get; set; }
    }

    public class Country
    {
        public ICollection<Language> AvailableLanguages { get; set; }
        public Currency Currency { get; set; }
        public CountryCode? IsoCode { get; set; }
        public string Name { get; set; }
        public UnitSystem? UnitSystem { get; set; }
    }

    public class CreditCard
    {
        public string Brand { get; set; }
        public int? ExpiryMonth { get; set; }
        public int? ExpiryYear { get; set; }
        public string FirstDigits { get; set; }
        public string FirstName { get; set; }
        public string LastDigits { get; set; }
        public string LastName { get; set; }
        public string MaskedNumber { get; set; }
    }

    public class Currency
    {
        public CurrencyCode? IsoCode { get; set; }
        public string Name { get; set; }
        public string Symbol { get; set; }
    }

    [GraphQlObjectType("Customer")]
    public class Customer : IHasMetafields
    {
        public bool? AcceptsMarketing { get; set; }
        public MailingAddressConnection Addresses { get; set; }
        public DateTimeOffset? CreatedAt { get; set; }
        public MailingAddress DefaultAddress { get; set; }
        public string DisplayName { get; set; }
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string? Id { get; set; }
        public Checkout LastIncompleteCheckout { get; set; }
        public string LastName { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public object NumberOfOrders { get; set; }
        public OrderConnection Orders { get; set; }
        public string Phone { get; set; }
        public ICollection<string> Tags { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
    }

    public partial class CustomerAccessToken
    {
        public string AccessToken { get; set; }
        public object ExpiresAt { get; set; }
    }

    public class CustomerAccessTokenCreatePayload
    {
        public CustomerAccessToken CustomerAccessToken { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerAccessTokenCreateWithMultipassPayload
    {
        public CustomerAccessToken CustomerAccessToken { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerAccessTokenDeletePayload
    {
        public string DeletedAccessToken { get; set; }
        public string DeletedCustomerAccessTokenId { get; set; }
        public ICollection<UserError> UserErrors { get; set; }
    }

    public class CustomerAccessTokenRenewPayload
    {
        public CustomerAccessToken CustomerAccessToken { get; set; }
        public ICollection<UserError> UserErrors { get; set; }
    }

    public class CustomerActivateByUrlPayload
    {
        public Customer Customer { get; set; }
        public CustomerAccessToken CustomerAccessToken { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerActivatePayload
    {
        public Customer Customer { get; set; }
        public CustomerAccessToken CustomerAccessToken { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerAddressCreatePayload
    {
        public MailingAddress CustomerAddress { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerAddressDeletePayload
    {
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
        public string DeletedCustomerAddressId { get; set; }
    }

    public class CustomerAddressUpdatePayload
    {
        public MailingAddress CustomerAddress { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerCreatePayload
    {
        public Customer Customer { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerDefaultAddressUpdatePayload
    {
        public Customer Customer { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerRecoverPayload
    {
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerResetByUrlPayload
    {
        public Customer Customer { get; set; }
        public CustomerAccessToken CustomerAccessToken { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerResetPayload
    {
        public Customer Customer { get; set; }
        public CustomerAccessToken CustomerAccessToken { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    public class CustomerUpdatePayload
    {
        public Customer Customer { get; set; }
        public CustomerAccessToken CustomerAccessToken { get; set; }
        public ICollection<CustomerUserError> CustomerUserErrors { get; set; }
    }

    [GraphQlObjectType("CustomerUserError")]
    public class CustomerUserError : IDisplayableError
    {
        public CustomerErrorCode? Code { get; set; }
        public ICollection<string> Field { get; set; }
        public string Message { get; set; }
    }

    public class DeliveryAddress
    {
        public string Address1 { get; set; }
        public string Address2 { get; set; }
        public string City { get; set; }
        public string Company { get; set; }
        public string Country { get; set; }
        public CountryCode? CountryCodeV2 { get; set; }
        public string FirstName { get; set; }
        public ICollection<string> Formatted { get; set; }
        public string FormattedArea { get; set; }
        public Guid? Id { get; set; }
        public string LastName { get; set; }
        public decimal? Latitude { get; set; }
        public decimal? Longitude { get; set; }
        public string Name { get; set; }
        public string Phone { get; set; }
        public string Province { get; set; }
        public string ProvinceCode { get; set; }
        public string Zip { get; set; }
    }

    public class DiscountAllocation
    {
        public MoneyV2 AllocatedAmount { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public IDiscountApplication DiscountApplication { get; set; }
    }

    public interface IDiscountApplication
    {
        DiscountApplicationAllocationMethod? AllocationMethod { get; set; }
        DiscountApplicationTargetSelection? TargetSelection { get; set; }
        DiscountApplicationTargetType? TargetType { get; set; }
        PricingValue Value { get; set; }
    }

    public class DiscountApplicationConnection
    {
        public ICollection<DiscountApplicationEdge> Edges { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<IDiscountApplication> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class DiscountApplicationEdge
    {
        public string Cursor { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public IDiscountApplication Node { get; set; }
    }

    [GraphQlObjectType("DiscountCodeApplication")]
    public class DiscountCodeApplication : IDiscountApplication
    {
        public DiscountApplicationAllocationMethod? AllocationMethod { get; set; }
        public bool? Applicable { get; set; }
        public string Code { get; set; }
        public DiscountApplicationTargetSelection? TargetSelection { get; set; }
        public DiscountApplicationTargetType? TargetType { get; set; }
        public PricingValue Value { get; set; }
    }

    public interface IDisplayableError
    {
        ICollection<string> Field { get; set; }
        string Message { get; set; }
    }

    public class Domain
    {
        public string Host { get; set; }
        public bool? SslEnabled { get; set; }
        public object Url { get; set; }
    }

    [GraphQlObjectType("ExternalVideo")]
    public class ExternalVideo : IMedia, INode
    {
        public string Alt { get; set; }
        public object EmbedUrl { get; set; }
        public MediaHost? Host { get; set; }
        public Guid? Id { get; set; }
        public MediaContentType? MediaContentType { get; set; }
        public object OriginUrl { get; set; }
        public Image PreviewImage { get; set; }
    }

    public class Filter
    {
        public string Id { get; set; }
        public string Label { get; set; }
        public FilterType? Type { get; set; }
        public ICollection<FilterValue> Values { get; set; }
    }

    public class FilterValue
    {
        public int? Count { get; set; }
        public string Id { get; set; }
        public object Input { get; set; }
        public string Label { get; set; }
    }

    public class Fulfillment
    {
        public FulfillmentLineItemConnection FulfillmentLineItems { get; set; }
        public string TrackingCompany { get; set; }
        public ICollection<FulfillmentTrackingInfo> TrackingInfo { get; set; }
    }

    public class FulfillmentLineItem
    {
        public OrderLineItem LineItem { get; set; }
        public int? Quantity { get; set; }
    }

    public class FulfillmentLineItemConnection
    {
        public ICollection<FulfillmentLineItemEdge> Edges { get; set; }
        public ICollection<FulfillmentLineItem> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class FulfillmentLineItemEdge
    {
        public string Cursor { get; set; }
        public FulfillmentLineItem Node { get; set; }
    }

    public class FulfillmentTrackingInfo
    {
        public string Number { get; set; }
        public object Url { get; set; }
    }

    [GraphQlObjectType("GenericFile")]
    public class GenericFile : INode
    {
        public string Alt { get; set; }
        public Guid? Id { get; set; }
        public string MimeType { get; set; }
        public int? OriginalFileSize { get; set; }
        public Image PreviewImage { get; set; }
        public object Url { get; set; }
    }

    public interface IHasMetafields
    {
        Metafield Metafield { get; set; }
        ICollection<Metafield> Metafields { get; set; }
    }

    public class Image
    {
        public string AltText { get; set; }
        public int? Height { get; set; }
        public Guid? Id { get; set; }
        public object Url { get; set; }
        public int? Width { get; set; }
    }

    public class ImageConnection
    {
        public ICollection<ImageEdge> Edges { get; set; }
        public ICollection<Image> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class ImageEdge
    {
        public string Cursor { get; set; }
        public Image Node { get; set; }
    }

    public class Language
    {
        public string EndonymName { get; set; }
        public LanguageCode? IsoCode { get; set; }
        public string Name { get; set; }
    }

    public class Localization
    {
        public ICollection<Country> AvailableCountries { get; set; }
        public ICollection<Language> AvailableLanguages { get; set; }
        public Country Country { get; set; }
        public Language Language { get; set; }
    }

    [GraphQlObjectType("Location")]
    public class Location : INode
    {
        public LocationAddress Address { get; set; }
        public Guid? Id { get; set; }
        public string Name { get; set; }
    }

    public class LocationAddress
    {
        public string Address1 { get; set; }
        public string Address2 { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
        public string CountryCode { get; set; }
        public ICollection<string> Formatted { get; set; }
        public decimal? Latitude { get; set; }
        public decimal? Longitude { get; set; }
        public string Phone { get; set; }
        public string Province { get; set; }
        public string ProvinceCode { get; set; }
        public string Zip { get; set; }
    }

    public class LocationConnection
    {
        public ICollection<LocationEdge> Edges { get; set; }
        public ICollection<Location> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class LocationEdge
    {
        public string Cursor { get; set; }
        public Location Node { get; set; }
    }

    [GraphQlObjectType("MailingAddress")]
    public class MailingAddress : INode
    {
        public string Address1 { get; set; }
        public string Address2 { get; set; }
        public string City { get; set; }
        public string Company { get; set; }
        public string Country { get; set; }
        public CountryCode? CountryCodeV2 { get; set; }
        public string FirstName { get; set; }
        public ICollection<string> Formatted { get; set; }
        public string FormattedArea { get; set; }
        public Guid? Id { get; set; }
        public string LastName { get; set; }
        public decimal? Latitude { get; set; }
        public decimal? Longitude { get; set; }
        public string Name { get; set; }
        public string Phone { get; set; }
        public string Province { get; set; }
        public string ProvinceCode { get; set; }
        public string Zip { get; set; }
    }

    public class MailingAddressConnection
    {
        public ICollection<MailingAddressEdge> Edges { get; set; }
        public ICollection<MailingAddress> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class MailingAddressEdge
    {
        public string Cursor { get; set; }
        public MailingAddress Node { get; set; }
    }

    [GraphQlObjectType("ManualDiscountApplication")]
    public class ManualDiscountApplication : IDiscountApplication
    {
        public DiscountApplicationAllocationMethod? AllocationMethod { get; set; }
        public string Description { get; set; }
        public DiscountApplicationTargetSelection? TargetSelection { get; set; }
        public DiscountApplicationTargetType? TargetType { get; set; }
        public string Title { get; set; }
        public PricingValue Value { get; set; }
    }

    public interface IMedia
    {
        string Alt { get; set; }
        MediaContentType? MediaContentType { get; set; }
        Image PreviewImage { get; set; }
    }

    public class MediaConnection
    {
        public ICollection<MediaEdge> Edges { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<IMedia> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class MediaEdge
    {
        public string Cursor { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public IMedia Node { get; set; }
    }

    [GraphQlObjectType("MediaImage")]
    public class MediaImage : IMedia, INode
    {
        public string Alt { get; set; }
        public Guid? Id { get; set; }
        public Image Image { get; set; }
        public MediaContentType? MediaContentType { get; set; }
        public Image PreviewImage { get; set; }
    }

    [GraphQlObjectType("Menu")]
    public class Menu : INode
    {
        public string Handle { get; set; }
        public Guid? Id { get; set; }
        public ICollection<MenuItem> Items { get; set; }
        public int? ItemsCount { get; set; }
        public string Title { get; set; }
    }

    [GraphQlObjectType("MenuItem")]
    public class MenuItem : INode
    {
        public Guid? Id { get; set; }
        public ICollection<MenuItem> Items { get; set; }
        public Guid? ResourceId { get; set; }
        public ICollection<string> Tags { get; set; }
        public string Title { get; set; }
        public MenuItemType? Type { get; set; }
        public object Url { get; set; }
    }

    public class Merchandise
    {
        public bool? AvailableForSale { get; set; }
        public string Barcode { get; set; }
        public MoneyV2 CompareAtPrice { get; set; }
        public bool? CurrentlyNotInStock { get; set; }
        public Guid? Id { get; set; }
        public Image Image { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public MoneyV2 Price { get; set; }
        public Product Product { get; set; }
        public int? QuantityAvailable { get; set; }
        public bool? RequiresShipping { get; set; }
        public ICollection<SelectedOption> SelectedOptions { get; set; }
        public SellingPlanAllocationConnection SellingPlanAllocations { get; set; }
        public string Sku { get; set; }
        public StoreAvailabilityConnection StoreAvailability { get; set; }
        public string Title { get; set; }
        public MoneyV2 UnitPrice { get; set; }
        public UnitPriceMeasurement UnitPriceMeasurement { get; set; }
        public decimal? Weight { get; set; }
        public WeightUnit? WeightUnit { get; set; }
    }

    [GraphQlObjectType("Metafield")]
    public class Metafield : INode
    {
        public DateTimeOffset? CreatedAt { get; set; }
        public string Description { get; set; }
        public Guid? Id { get; set; }
        public string Key { get; set; }
        public string Namespace { get; set; }
        public MetafieldParentResource ParentResource { get; set; }
        public MetafieldReference Reference { get; set; }
        public MetafieldReferenceConnection References { get; set; }
        public string Type { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
        public string Value { get; set; }
    }

    public class MetafieldParentResource
    {
        public ArticleAuthor AuthorV2 { get; set; }
        public Blog Blog { get; set; }
        public CommentConnection Comments { get; set; }
        public string Content { get; set; }
        public object ContentHtml { get; set; }
        public string Excerpt { get; set; }
        public object ExcerptHtml { get; set; }
        public string Handle { get; set; }
        public Guid? Id { get; set; }
        public Image Image { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public object OnlineStoreUrl { get; set; }
        public object PublishedAt { get; set; }
        public Seo Seo { get; set; }
        public ICollection<string> Tags { get; set; }
        public string Title { get; set; }
        public Article ArticleByHandle { get; set; }
        public ArticleConnection Articles { get; set; }
        public ICollection<ArticleAuthor> Authors { get; set; }
        public string Description { get; set; }
        public object DescriptionHtml { get; set; }
        public ProductConnection Products { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
        public bool? AcceptsMarketing { get; set; }
        public MailingAddressConnection Addresses { get; set; }
        public DateTimeOffset? CreatedAt { get; set; }
        public MailingAddress DefaultAddress { get; set; }
        public string DisplayName { get; set; }
        public string Email { get; set; }
        public string FirstName { get; set; }
        public Checkout LastIncompleteCheckout { get; set; }
        public string LastName { get; set; }
        public object NumberOfOrders { get; set; }
        public OrderConnection Orders { get; set; }
        public string Phone { get; set; }
        public OrderCancelReason? CancelReason { get; set; }
        public object CanceledAt { get; set; }
        public CurrencyCode? CurrencyCode { get; set; }
        public MoneyV2 CurrentSubtotalPrice { get; set; }
        public MoneyV2 CurrentTotalDuties { get; set; }
        public MoneyV2 CurrentTotalPrice { get; set; }
        public MoneyV2 CurrentTotalTax { get; set; }
        public string CustomerLocale { get; set; }
        public object CustomerUrl { get; set; }
        public DiscountApplicationConnection DiscountApplications { get; set; }
        public bool? Edited { get; set; }
        public OrderFinancialStatus? FinancialStatus { get; set; }
        public OrderFulfillmentStatus? FulfillmentStatus { get; set; }
        public OrderLineItemConnection LineItems { get; set; }
        public string Name { get; set; }
        public int? OrderNumber { get; set; }
        public MoneyV2 OriginalTotalDuties { get; set; }
        public MoneyV2 OriginalTotalPrice { get; set; }
        public object ProcessedAt { get; set; }
        public MailingAddress ShippingAddress { get; set; }
        public ICollection<DiscountAllocation> ShippingDiscountAllocations { get; set; }
        public object StatusUrl { get; set; }
        public MoneyV2 SubtotalPrice { get; set; }
        public ICollection<Fulfillment> SuccessfulFulfillments { get; set; }
        public MoneyV2 TotalPrice { get; set; }
        public MoneyV2 TotalRefunded { get; set; }
        public MoneyV2 TotalShippingPrice { get; set; }
        public MoneyV2 TotalTax { get; set; }
        public object Body { get; set; }
        public string BodySummary { get; set; }
        public bool? AvailableForSale { get; set; }
        public CollectionConnection Collections { get; set; }
        public ProductPriceRange CompareAtPriceRange { get; set; }
        public Image FeaturedImage { get; set; }
        public ImageConnection Images { get; set; }
        public bool? IsGiftCard { get; set; }
        public MediaConnection Media { get; set; }
        public ICollection<ProductOption> Options { get; set; }
        public ProductPriceRange PriceRange { get; set; }
        public string ProductType { get; set; }
        public bool? RequiresSellingPlan { get; set; }
        public SellingPlanGroupConnection SellingPlanGroups { get; set; }
        public int? TotalInventory { get; set; }
        public ProductVariant VariantBySelectedOptions { get; set; }
        public ProductVariantConnection Variants { get; set; }
        public string Vendor { get; set; }
        public string Barcode { get; set; }
        public MoneyV2 CompareAtPrice { get; set; }
        public bool? CurrentlyNotInStock { get; set; }
        public MoneyV2 Price { get; set; }
        public Product Product { get; set; }
        public int? QuantityAvailable { get; set; }
        public bool? RequiresShipping { get; set; }
        public ICollection<SelectedOption> SelectedOptions { get; set; }
        public SellingPlanAllocationConnection SellingPlanAllocations { get; set; }
        public string Sku { get; set; }
        public StoreAvailabilityConnection StoreAvailability { get; set; }
        public MoneyV2 UnitPrice { get; set; }
        public UnitPriceMeasurement UnitPriceMeasurement { get; set; }
        public decimal? Weight { get; set; }
        public WeightUnit? WeightUnit { get; set; }
        public Brand Brand { get; set; }
        public string MoneyFormat { get; set; }
        public PaymentSettings PaymentSettings { get; set; }
        public Domain PrimaryDomain { get; set; }
        public ShopPolicy PrivacyPolicy { get; set; }
        public ShopPolicy RefundPolicy { get; set; }
        public ShopPolicy ShippingPolicy { get; set; }
        public ICollection<CountryCode> ShipsToCountries { get; set; }
        public ShopPolicyWithDefault SubscriptionPolicy { get; set; }
        public ShopPolicy TermsOfService { get; set; }
    }

    public class MetafieldReference
    {
        public string Description { get; set; }
        public object DescriptionHtml { get; set; }
        public string Handle { get; set; }
        public Guid? Id { get; set; }
        public Image Image { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public object OnlineStoreUrl { get; set; }
        public ProductConnection Products { get; set; }
        public Seo Seo { get; set; }
        public string Title { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
        public string Alt { get; set; }
        public string MimeType { get; set; }
        public int? OriginalFileSize { get; set; }
        public Image PreviewImage { get; set; }
        public object Url { get; set; }
        public MediaContentType? MediaContentType { get; set; }
        public object Body { get; set; }
        public string BodySummary { get; set; }
        public DateTimeOffset? CreatedAt { get; set; }
        public bool? AvailableForSale { get; set; }
        public CollectionConnection Collections { get; set; }
        public ProductPriceRange CompareAtPriceRange { get; set; }
        public Image FeaturedImage { get; set; }
        public ImageConnection Images { get; set; }
        public bool? IsGiftCard { get; set; }
        public MediaConnection Media { get; set; }
        public ICollection<ProductOption> Options { get; set; }
        public ProductPriceRange PriceRange { get; set; }
        public string ProductType { get; set; }
        public object PublishedAt { get; set; }
        public bool? RequiresSellingPlan { get; set; }
        public SellingPlanGroupConnection SellingPlanGroups { get; set; }
        public ICollection<string> Tags { get; set; }
        public int? TotalInventory { get; set; }
        public ProductVariant VariantBySelectedOptions { get; set; }
        public ProductVariantConnection Variants { get; set; }
        public string Vendor { get; set; }
        public string Barcode { get; set; }
        public MoneyV2 CompareAtPrice { get; set; }
        public bool? CurrentlyNotInStock { get; set; }
        public MoneyV2 Price { get; set; }
        public Product Product { get; set; }
        public int? QuantityAvailable { get; set; }
        public bool? RequiresShipping { get; set; }
        public ICollection<SelectedOption> SelectedOptions { get; set; }
        public SellingPlanAllocationConnection SellingPlanAllocations { get; set; }
        public string Sku { get; set; }
        public StoreAvailabilityConnection StoreAvailability { get; set; }
        public MoneyV2 UnitPrice { get; set; }
        public UnitPriceMeasurement UnitPriceMeasurement { get; set; }
        public decimal? Weight { get; set; }
        public WeightUnit? WeightUnit { get; set; }
        public ICollection<VideoSource> Sources { get; set; }
    }

    public class MetafieldReferenceConnection
    {
        public ICollection<MetafieldReferenceEdge> Edges { get; set; }
        public ICollection<MetafieldReference> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class MetafieldReferenceEdge
    {
        public string Cursor { get; set; }
        public MetafieldReference Node { get; set; }
    }

    [GraphQlObjectType("Model3d")]
    public class Model3D : IMedia, INode
    {
        public string Alt { get; set; }
        public Guid? Id { get; set; }
        public MediaContentType? MediaContentType { get; set; }
        public Image PreviewImage { get; set; }
        public ICollection<Model3DSource> Sources { get; set; }
    }

    public class Model3DSource
    {
        public int? Filesize { get; set; }
        public string Format { get; set; }
        public string MimeType { get; set; }
        public string Url { get; set; }
    }

    public class MoneyV2
    {
        public object Amount { get; set; }
        public CurrencyCode? CurrencyCode { get; set; }
    }

    public class Mutation
    {
        public CartAttributesUpdatePayload CartAttributesUpdate { get; set; }
        public CartBuyerIdentityUpdatePayload CartBuyerIdentityUpdate { get; set; }
        public CartCreatePayload CartCreate { get; set; }
        public CartDiscountCodesUpdatePayload CartDiscountCodesUpdate { get; set; }
        public CartLinesAddPayload CartLinesAdd { get; set; }
        public CartLinesRemovePayload CartLinesRemove { get; set; }
        public CartLinesUpdatePayload CartLinesUpdate { get; set; }
        public CartNoteUpdatePayload CartNoteUpdate { get; set; }
        public CartSelectedDeliveryOptionsUpdatePayload CartSelectedDeliveryOptionsUpdate { get; set; }
        public CheckoutAttributesUpdateV2Payload CheckoutAttributesUpdateV2 { get; set; }
        public CheckoutCompleteFreePayload CheckoutCompleteFree { get; set; }
        public CheckoutCompleteWithCreditCardV2Payload CheckoutCompleteWithCreditCardV2 { get; set; }
        public CheckoutCompleteWithTokenizedPaymentV3Payload CheckoutCompleteWithTokenizedPaymentV3 { get; set; }
        public CheckoutCreatePayload CheckoutCreate { get; set; }
        public CheckoutCustomerAssociateV2Payload CheckoutCustomerAssociateV2 { get; set; }
        public CheckoutCustomerDisassociateV2Payload CheckoutCustomerDisassociateV2 { get; set; }
        public CheckoutDiscountCodeApplyV2Payload CheckoutDiscountCodeApplyV2 { get; set; }
        public CheckoutDiscountCodeRemovePayload CheckoutDiscountCodeRemove { get; set; }
        public CheckoutEmailUpdateV2Payload CheckoutEmailUpdateV2 { get; set; }
        public CheckoutGiftCardRemoveV2Payload CheckoutGiftCardRemoveV2 { get; set; }
        public CheckoutGiftCardsAppendPayload CheckoutGiftCardsAppend { get; set; }
        public CheckoutLineItemsAddPayload CheckoutLineItemsAdd { get; set; }
        public CheckoutLineItemsRemovePayload CheckoutLineItemsRemove { get; set; }
        public CheckoutLineItemsReplacePayload CheckoutLineItemsReplace { get; set; }
        public CheckoutLineItemsUpdatePayload CheckoutLineItemsUpdate { get; set; }
        public CheckoutShippingAddressUpdateV2Payload CheckoutShippingAddressUpdateV2 { get; set; }
        public CheckoutShippingLineUpdatePayload CheckoutShippingLineUpdate { get; set; }
        public CustomerAccessTokenCreatePayload CustomerAccessTokenCreate { get; set; }
        public CustomerAccessTokenCreateWithMultipassPayload CustomerAccessTokenCreateWithMultipass { get; set; }
        public CustomerAccessTokenDeletePayload CustomerAccessTokenDelete { get; set; }
        public CustomerAccessTokenRenewPayload CustomerAccessTokenRenew { get; set; }
        public CustomerActivatePayload CustomerActivate { get; set; }
        public CustomerActivateByUrlPayload CustomerActivateByUrl { get; set; }
        public CustomerAddressCreatePayload CustomerAddressCreate { get; set; }
        public CustomerAddressDeletePayload CustomerAddressDelete { get; set; }
        public CustomerAddressUpdatePayload CustomerAddressUpdate { get; set; }
        public CustomerCreatePayload CustomerCreate { get; set; }
        public CustomerDefaultAddressUpdatePayload CustomerDefaultAddressUpdate { get; set; }
        public CustomerRecoverPayload CustomerRecover { get; set; }
        public CustomerResetPayload CustomerReset { get; set; }
        public CustomerResetByUrlPayload CustomerResetByUrl { get; set; }
        public CustomerUpdatePayload CustomerUpdate { get; set; }
    }

    public interface INode
    {
        Guid? Id { get; set; }
    }

    public interface IOnlineStorePublishable
    {
        object OnlineStoreUrl { get; set; }
    }

    [GraphQlObjectType("Order")]
    public class Order : IHasMetafields, INode
    {
        public OrderCancelReason? CancelReason { get; set; }
        public object CanceledAt { get; set; }
        public CurrencyCode? CurrencyCode { get; set; }
        public MoneyV2 CurrentSubtotalPrice { get; set; }
        public MoneyV2 CurrentTotalDuties { get; set; }
        public MoneyV2 CurrentTotalPrice { get; set; }
        public MoneyV2 CurrentTotalTax { get; set; }
        public string CustomerLocale { get; set; }
        public object CustomerUrl { get; set; }
        public DiscountApplicationConnection DiscountApplications { get; set; }
        public bool? Edited { get; set; }
        public string Email { get; set; }
        public OrderFinancialStatus? FinancialStatus { get; set; }
        public OrderFulfillmentStatus? FulfillmentStatus { get; set; }
        public Guid? Id { get; set; }
        public OrderLineItemConnection LineItems { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public string Name { get; set; }
        public int? OrderNumber { get; set; }
        public MoneyV2 OriginalTotalDuties { get; set; }
        public MoneyV2 OriginalTotalPrice { get; set; }
        public string Phone { get; set; }
        public object ProcessedAt { get; set; }
        public MailingAddress ShippingAddress { get; set; }
        public ICollection<DiscountAllocation> ShippingDiscountAllocations { get; set; }
        public object StatusUrl { get; set; }
        public MoneyV2 SubtotalPrice { get; set; }
        public ICollection<Fulfillment> SuccessfulFulfillments { get; set; }
        public MoneyV2 TotalPrice { get; set; }
        public MoneyV2 TotalRefunded { get; set; }
        public MoneyV2 TotalShippingPrice { get; set; }
        public MoneyV2 TotalTax { get; set; }
    }

    public class OrderConnection
    {
        public ICollection<OrderEdge> Edges { get; set; }
        public ICollection<Order> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
        public object TotalCount { get; set; }
    }

    public class OrderEdge
    {
        public string Cursor { get; set; }
        public Order Node { get; set; }
    }

    public class OrderLineItem
    {
        public int? CurrentQuantity { get; set; }
        public ICollection<Attribute> CustomAttributes { get; set; }
        public ICollection<DiscountAllocation> DiscountAllocations { get; set; }
        public MoneyV2 DiscountedTotalPrice { get; set; }
        public MoneyV2 OriginalTotalPrice { get; set; }
        public int? Quantity { get; set; }
        public string Title { get; set; }
        public ProductVariant Variant { get; set; }
    }

    public class OrderLineItemConnection
    {
        public ICollection<OrderLineItemEdge> Edges { get; set; }
        public ICollection<OrderLineItem> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class OrderLineItemEdge
    {
        public string Cursor { get; set; }
        public OrderLineItem Node { get; set; }
    }

    [GraphQlObjectType("Page")]
    public class Page : IHasMetafields, INode, IOnlineStorePublishable
    {
        public object Body { get; set; }
        public string BodySummary { get; set; }
        public DateTimeOffset? CreatedAt { get; set; }
        public string Handle { get; set; }
        public Guid? Id { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public object OnlineStoreUrl { get; set; }
        public Seo Seo { get; set; }
        public string Title { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
    }

    public class PageConnection
    {
        public ICollection<PageEdge> Edges { get; set; }
        public ICollection<Page> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class PageEdge
    {
        public string Cursor { get; set; }
        public Page Node { get; set; }
    }

    public class PageInfo
    {
        public string EndCursor { get; set; }
        public bool? HasNextPage { get; set; }
        public bool? HasPreviousPage { get; set; }
        public string StartCursor { get; set; }
    }

    [GraphQlObjectType("Payment")]
    public class Payment : INode
    {
        public MoneyV2 Amount { get; set; }
        public MailingAddress BillingAddress { get; set; }
        public Checkout Checkout { get; set; }
        public CreditCard CreditCard { get; set; }
        public string ErrorMessage { get; set; }
        public Guid? Id { get; set; }
        public string IdempotencyKey { get; set; }
        public object NextActionUrl { get; set; }
        public bool? Ready { get; set; }
        public bool? Test { get; set; }
        public Transaction Transaction { get; set; }
    }

    public class PaymentSettings
    {
        public ICollection<CardBrand> AcceptedCardBrands { get; set; }
        public object CardVaultUrl { get; set; }
        public CountryCode? CountryCode { get; set; }
        public CurrencyCode? CurrencyCode { get; set; }
        public ICollection<CurrencyCode> EnabledPresentmentCurrencies { get; set; }
        public string ShopifyPaymentsAccountId { get; set; }
        public ICollection<DigitalWallet> SupportedDigitalWallets { get; set; }
    }

    public class PricingPercentageValue
    {
        public decimal? Percentage { get; set; }
    }

    public class PricingValue
    {
        public object Amount { get; set; }
        public CurrencyCode? CurrencyCode { get; set; }
        public decimal? Percentage { get; set; }
    }

    [GraphQlObjectType("Product")]
    public class Product : IHasMetafields, INode, IOnlineStorePublishable
    {
        public bool? AvailableForSale { get; set; }
        public CollectionConnection Collections { get; set; }
        public ProductPriceRange CompareAtPriceRange { get; set; }
        public DateTimeOffset? CreatedAt { get; set; }
        public string Description { get; set; }
        public object DescriptionHtml { get; set; }
        public Image FeaturedImage { get; set; }
        public string Handle { get; set; }
        public Guid? Id { get; set; }
        public ImageConnection Images { get; set; }
        public bool? IsGiftCard { get; set; }
        public MediaConnection Media { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public object OnlineStoreUrl { get; set; }
        public ICollection<ProductOption> Options { get; set; }
        public ProductPriceRange PriceRange { get; set; }
        public string ProductType { get; set; }
        public object PublishedAt { get; set; }
        public bool? RequiresSellingPlan { get; set; }
        public SellingPlanGroupConnection SellingPlanGroups { get; set; }
        public Seo Seo { get; set; }
        public ICollection<string> Tags { get; set; }
        public string Title { get; set; }
        public int? TotalInventory { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
        public ProductVariant VariantBySelectedOptions { get; set; }
        public ProductVariantConnection Variants { get; set; }
        public string Vendor { get; set; }
    }

    public class ProductConnection
    {
        public ICollection<ProductEdge> Edges { get; set; }
        public ICollection<Filter> Filters { get; set; }
        public ICollection<Product> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class ProductEdge
    {
        public string Cursor { get; set; }
        public Product Node { get; set; }
    }

    [GraphQlObjectType("ProductOption")]
    public class ProductOption : INode
    {
        public Guid? Id { get; set; }
        public string Name { get; set; }
        public ICollection<string> Values { get; set; }
    }

    public class ProductPriceRange
    {
        public MoneyV2 MaxVariantPrice { get; set; }
        public MoneyV2 MinVariantPrice { get; set; }
    }

    [GraphQlObjectType("ProductVariant")]
    public class ProductVariant : IHasMetafields, INode
    {
        public bool? AvailableForSale { get; set; }
        public string Barcode { get; set; }
        public MoneyV2 CompareAtPrice { get; set; }
        public bool? CurrentlyNotInStock { get; set; }
        public Guid? Id { get; set; }
        public Image Image { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public MoneyV2 Price { get; set; }
        public Product Product { get; set; }
        public int? QuantityAvailable { get; set; }
        public bool? RequiresShipping { get; set; }
        public ICollection<SelectedOption> SelectedOptions { get; set; }
        public SellingPlanAllocationConnection SellingPlanAllocations { get; set; }
        public string Sku { get; set; }
        public StoreAvailabilityConnection StoreAvailability { get; set; }
        public string Title { get; set; }
        public MoneyV2 UnitPrice { get; set; }
        public UnitPriceMeasurement UnitPriceMeasurement { get; set; }
        public decimal? Weight { get; set; }
        public WeightUnit? WeightUnit { get; set; }
    }

    public class ProductVariantConnection
    {
        public ICollection<ProductVariantEdge> Edges { get; set; }
        public ICollection<ProductVariant> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class ProductVariantEdge
    {
        public string Cursor { get; set; }
        public ProductVariant Node { get; set; }
    }

    public class QueryRoot
    {
        public ArticleConnection Articles { get; set; }
        public Blog Blog { get; set; }
        public BlogConnection Blogs { get; set; }
        public Cart Cart { get; set; }
        public Collection Collection { get; set; }
        public CollectionConnection Collections { get; set; }
        public Customer Customer { get; set; }
        public Localization Localization { get; set; }
        public LocationConnection Locations { get; set; }
        public Menu Menu { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public INode Node { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<INode> Nodes { get; set; }
        public Page Page { get; set; }
        public PageConnection Pages { get; set; }
        public Product Product { get; set; }
        public ICollection<Product> ProductRecommendations { get; set; }
        public StringConnection ProductTags { get; set; }
        public StringConnection ProductTypes { get; set; }
        public ProductConnection Products { get; set; }
        public ICollection<ApiVersion> PublicApiVersions { get; set; }
        public Shop Shop { get; set; }
        public UrlRedirectConnection UrlRedirects { get; set; }
    }

    public class Seo
    {
        public string Description { get; set; }
        public string Title { get; set; }
    }

    [GraphQlObjectType("ScriptDiscountApplication")]
    public class ScriptDiscountApplication : IDiscountApplication
    {
        public DiscountApplicationAllocationMethod? AllocationMethod { get; set; }
        public DiscountApplicationTargetSelection? TargetSelection { get; set; }
        public DiscountApplicationTargetType? TargetType { get; set; }
        public string Title { get; set; }
        public PricingValue Value { get; set; }
    }

    public class SelectedOption
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    public class SellingPlan
    {
        public SellingPlanCheckoutCharge CheckoutCharge { get; set; }
        public string Description { get; set; }
        public Guid? Id { get; set; }
        public string Name { get; set; }
        public ICollection<SellingPlanOption> Options { get; set; }
        public ICollection<SellingPlanPriceAdjustment> PriceAdjustments { get; set; }
        public bool? RecurringDeliveries { get; set; }
    }

    public class SellingPlanAllocation
    {
        public MoneyV2 CheckoutChargeAmount { get; set; }
        public ICollection<SellingPlanAllocationPriceAdjustment> PriceAdjustments { get; set; }
        public MoneyV2 RemainingBalanceChargeAmount { get; set; }
        public SellingPlan SellingPlan { get; set; }
    }

    public class SellingPlanAllocationConnection
    {
        public ICollection<SellingPlanAllocationEdge> Edges { get; set; }
        public ICollection<SellingPlanAllocation> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class SellingPlanAllocationEdge
    {
        public string Cursor { get; set; }
        public SellingPlanAllocation Node { get; set; }
    }

    public class SellingPlanAllocationPriceAdjustment
    {
        public MoneyV2 CompareAtPrice { get; set; }
        public MoneyV2 PerDeliveryPrice { get; set; }
        public MoneyV2 Price { get; set; }
        public MoneyV2 UnitPrice { get; set; }
    }

    public class SellingPlanCheckoutCharge
    {
        public SellingPlanCheckoutChargeType? Type { get; set; }
        public SellingPlanCheckoutChargeValue Value { get; set; }
    }

    public class SellingPlanCheckoutChargePercentageValue
    {
        public decimal? Percentage { get; set; }
    }

    public class SellingPlanCheckoutChargeValue
    {
        public object Amount { get; set; }
        public CurrencyCode? CurrencyCode { get; set; }
        public decimal? Percentage { get; set; }
    }

    public class SellingPlanConnection
    {
        public ICollection<SellingPlanEdge> Edges { get; set; }
        public ICollection<SellingPlan> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class SellingPlanEdge
    {
        public string Cursor { get; set; }
        public SellingPlan Node { get; set; }
    }

    public class SellingPlanFixedAmountPriceAdjustment
    {
        public MoneyV2 AdjustmentAmount { get; set; }
    }

    public class SellingPlanFixedPriceAdjustment
    {
        public MoneyV2 Price { get; set; }
    }

    public class SellingPlanGroup
    {
        public string AppName { get; set; }
        public string Name { get; set; }
        public ICollection<SellingPlanGroupOption> Options { get; set; }
        public SellingPlanConnection SellingPlans { get; set; }
    }

    public class SellingPlanGroupConnection
    {
        public ICollection<SellingPlanGroupEdge> Edges { get; set; }
        public ICollection<SellingPlanGroup> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class SellingPlanGroupEdge
    {
        public string Cursor { get; set; }
        public SellingPlanGroup Node { get; set; }
    }

    public class SellingPlanGroupOption
    {
        public string Name { get; set; }
        public ICollection<string> Values { get; set; }
    }

    public class SellingPlanOption
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    public class SellingPlanPercentagePriceAdjustment
    {
        public int? AdjustmentPercentage { get; set; }
    }

    public class SellingPlanPriceAdjustment
    {
        public SellingPlanPriceAdjustmentValue AdjustmentValue { get; set; }
        public int? OrderCount { get; set; }
    }

    public class SellingPlanPriceAdjustmentValue
    {
        public MoneyV2 AdjustmentAmount { get; set; }
        public MoneyV2 Price { get; set; }
        public int? AdjustmentPercentage { get; set; }
    }

    public class ShippingRate
    {
        public string Handle { get; set; }
        public MoneyV2 Price { get; set; }
        public string Title { get; set; }
    }

    [GraphQlObjectType("Shop")]
    public class Shop : IHasMetafields, INode
    {
        public Brand Brand { get; set; }
        public string Description { get; set; }
        public Guid? Id { get; set; }
        public Metafield Metafield { get; set; }
        public ICollection<Metafield> Metafields { get; set; }
        public string MoneyFormat { get; set; }
        public string Name { get; set; }
        public PaymentSettings PaymentSettings { get; set; }
        public Domain PrimaryDomain { get; set; }
        public ShopPolicy PrivacyPolicy { get; set; }
        public ShopPolicy RefundPolicy { get; set; }
        public ShopPolicy ShippingPolicy { get; set; }
        public ICollection<CountryCode> ShipsToCountries { get; set; }
        public ShopPolicyWithDefault SubscriptionPolicy { get; set; }
        public ShopPolicy TermsOfService { get; set; }
    }

    [GraphQlObjectType("ShopPolicy")]
    public class ShopPolicy : INode
    {
        public string Body { get; set; }
        public string Handle { get; set; }
        public Guid? Id { get; set; }
        public string Title { get; set; }
        public object Url { get; set; }
    }

    public class ShopPolicyWithDefault
    {
        public string Body { get; set; }
        public string Handle { get; set; }
        public Guid? Id { get; set; }
        public string Title { get; set; }
        public object Url { get; set; }
    }

    public class StoreAvailability
    {
        public bool? Available { get; set; }
        public Location Location { get; set; }
        public string PickUpTime { get; set; }
    }

    public class StoreAvailabilityConnection
    {
        public ICollection<StoreAvailabilityEdge> Edges { get; set; }
        public ICollection<StoreAvailability> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class StoreAvailabilityEdge
    {
        public string Cursor { get; set; }
        public StoreAvailability Node { get; set; }
    }

    public class StringConnection
    {
        public ICollection<StringEdge> Edges { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class StringEdge
    {
        public string Cursor { get; set; }
        public string Node { get; set; }
    }

    public class Transaction
    {
        public MoneyV2 Amount { get; set; }
        public TransactionKind? Kind { get; set; }
        public TransactionStatus? StatusV2 { get; set; }
        public bool? Test { get; set; }
    }

    public class UnitPriceMeasurement
    {
        public UnitPriceMeasurementMeasuredType? MeasuredType { get; set; }
        public UnitPriceMeasurementMeasuredUnit? QuantityUnit { get; set; }
        public decimal? QuantityValue { get; set; }
        public UnitPriceMeasurementMeasuredUnit? ReferenceUnit { get; set; }
        public int? ReferenceValue { get; set; }
    }

    [GraphQlObjectType("UrlRedirect")]
    public class UrlRedirect : INode
    {
        public Guid? Id { get; set; }
        public string Path { get; set; }
        public string Target { get; set; }
    }

    public class UrlRedirectConnection
    {
        public ICollection<UrlRedirectEdge> Edges { get; set; }
        public ICollection<UrlRedirect> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class UrlRedirectEdge
    {
        public string Cursor { get; set; }
        public UrlRedirect Node { get; set; }
    }

    [GraphQlObjectType("UserError")]
    public class UserError : IDisplayableError
    {
        public ICollection<string> Field { get; set; }
        public string Message { get; set; }
    }

    [GraphQlObjectType("Video")]
    public class Video : IMedia, INode
    {
        public string Alt { get; set; }
        public Guid? Id { get; set; }
        public MediaContentType? MediaContentType { get; set; }
        public Image PreviewImage { get; set; }
        public ICollection<VideoSource> Sources { get; set; }
    }

    public class VideoSource
    {
        public string Format { get; set; }
        public int? Height { get; set; }
        public string MimeType { get; set; }
        public string Url { get; set; }
        public int? Width { get; set; }
    }
    #endregion
}
